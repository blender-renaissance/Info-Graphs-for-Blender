bl_info = {
    "name": "Info_graphs_for_blender",
    "author": "Vikrant Jadhav, Blender Renaissance",
    "version": (1, 0),
    "blender": (4, 0, 0),
    "location": "View3D > Sidebar > Renaissance tab",
    "description": "Quick Render Presets for Blender Renaissance Graphs.",
    "warning": "",
    "doc_url": "https://twitter.com/b3d_Renaissance",
    "category": "3D View",
}


import bpy
import sys
import os
import csv
try:
    import mysql.connector
except ImportError as e:
    print("Error importing MySQL:", e)
import requests
import json
import re

from bpy.types import (Panel,
                       Menu,
                       PropertyGroup,
                       )
                       
class MyProperties(bpy.types.PropertyGroup):
    
    my_enum : bpy.props.EnumProperty(
        name= "",
        description= "Change Resolution / Aspect Ratio of the scene",
        items= [('OP1', "Rectangle [1920x1080]", "1080p"),
                ('OP2', "Rectangle [3840x2160]", "4K"),
                ('OP3', "Square [1080x1080]", "Instagram Ratio"),
                ('OP4', "Square [720x720]", "Instagram mini Ratio"),
                ('OP5', "Vertical [1080x1920]", "Youtube Vertical"),
                ('OP6', "Vertical [720x1280]", "Tiktok Vertical"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operator()
    )
    
    my_enum0 : bpy.props.EnumProperty(
        name= "",
        description= "Change the render engine of the scene",
        items= [('OP1', "Cycles (for CPU rendering)", "f"),
                ('OP2', "Eevee (Nvidia GPU rendering)", "fg"),
                ('OPC3', "Cycles (GPU rendering)", "fgh"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operator00()
    )
    
    my_enum2 : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OP7', "24 FPS (and reset to 4 seconds)", "24 Frames per second"),
                ('OP8', "30 FPS (and reset to 4 seconds)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operator2()
    )

    my_enum2pie : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OP7pie', "24 FPS (and reset to 4 seconds)", "24 Frames per second"),
                ('OP8pie', "30 FPS (and reset to 4 seconds)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operator2pie()
    )
    
    my_enumLGpie : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPLG7pie', "24 FPS (and reset)", "24 Frames per second"),
                ('OPLG8pie', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorlgpie()
    )
    
    my_enumHBpie : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPHB7pie', "24 FPS (and reset)", "24 Frames per second"),
                ('OPHB8pie', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbpie()
    )
    
    my_enumMCpie : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPMC7pie', "24 FPS (and reset)", "24 Frames per second"),
                ('OPMC8pie', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatormcpie()
    )

    my_enumMPpie : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPMP7pie', "24 FPS (and reset)", "24 Frames per second"),
                ('OPMP8pie', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatormppie()
    )
    
    my_enumRADAR : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPRADAR7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPRADAR8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorradar()
    )

    my_enum23C : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OP23C7', "24 FPS (and reset)", "24 Frames per second"),
                ('OP23C8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operator23c()
    )
    
    my_enum_candlestick : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPcandle7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPcandle8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandlestick()
    )
    
    my_enum23P : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OP23P7', "24 FPS (and reset)", "24 Frames per second"),
                ('OP23P8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operator23p()
    )
    
    my_enumLGC : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPLGC7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPLGC8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorlgc()
    )
    
    my_enumHBC : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPHBC7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPHBC8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbc()
    )
    
    my_enumHBO : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPHBO7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPHBO8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbo()
    )
    
    my_enumPLpie : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPPLpie7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPPLpie8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorplpie()
    )
    
    my_enumSHBG : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame VBGrate of the scene",
        items= [('OPSHBG7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPSHBG8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorshbg()
    )
    
    my_enumSVBG : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPSVBG7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPSVBG8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorsvbg()
    )
    
    my_enumMG : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPMG7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPMG8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatormg()
    )
    
    my_enumMGC : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPMGC7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPMGC8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatormgc()
    )
    
    my_enumSGC : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPSGC7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPSGC8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorsgc()
    )
    
    my_enumBGS : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPBGS7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPBGS8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorbgs()
    )
    
    my_enum_usmap : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPUSM7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPUSM8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorusmap()
    )
    
    my_enumVB : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPVB7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPVB8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorvb()
    )
    
    my_enumVBC : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPVBC7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPVBC8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbc()
    )
    

    my_enumVBM : bpy.props.EnumProperty(
        name= "",
        description= "Change Frame rate of the scene",
        items= [('OPVBM7', "24 FPS (and reset)", "24 Frames per second"),
                ('OPVBM8', "30 FPS (and reset)", "30 Frames per second"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbm()
    )

    
    my_enum3 : bpy.props.EnumProperty(
        name= "",
        description= "Change Output Format of the Final Render",
        items= [('OP9', "PNG Image Sequence", "(with transparency)"),
                ('OP10', "OpenEXR Image Sequence", "(with transparency)"),
                ('OP11', "MP4 Video", "(No transparency)"),
        ],
        update=lambda self, context: bpy.ops.addonname.myop_operator3()
    )
    
    my_stringhost : bpy.props.StringProperty(
    name= "",
    default="localhost",)
    
    my_stringuser : bpy.props.StringProperty(
    name= "",
    default="root",)
    
    my_stringpassword : bpy.props.StringProperty(
    name= "",
    subtype='PASSWORD',)
    
    my_stringsiteurl : bpy.props.StringProperty(
    name= "",
    default='https://your_site_url.com',)
    
    my_stringappname : bpy.props.StringProperty(
    name= "",
    default='YourAppName',)
    
    my_stringapikeyname : bpy.props.StringProperty(
    name= "",
    subtype='PASSWORD',)
    
    my_stringmodelname1 : bpy.props.StringProperty(
    name= "",
    default='perplexity/pplx-70b-online',)
    
    my_stringmodelname2 : bpy.props.StringProperty(
    name= "",
    default='mistralai/mixtral-8x7b-instruct',)
    
    my_stringresponseurl : bpy.props.StringProperty(
    name= "",
    default='https://openrouter.ai/api/v1/chat/completions')
    
    my_stringcirclegraph : bpy.props.StringProperty(
    name= "",
    default="circle_graph",)
    
    my_stringpiegengraph : bpy.props.StringProperty(
    name= "",
    default="What percentage of people are obese in the US?",)
    
    my_stringcirclegengraph1 : bpy.props.StringProperty(
    name= "",
    default="What percentage of americans are millionaires?",)
    
    my_stringcirclegengraph2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}, no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. Here's a sample answer, Step 1: India's Men's obesity rate is approximately 12.00%. Step 2: I obtained this information from the data.",)
    
    my_stringcirclegengraph3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: Value in digit only. Here's a sample answer, ( Step A: Obese people in India; Step B: According to MoHW; Step C: 10 )",)

    my_stringpiegengraph1 : bpy.props.StringProperty(
    name= "",
    default="What percentage of germans speak english?",)
    
    my_stringpiegengraph2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}, no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. Here's a sample answer, Step 1: India's Men's obesity rate is approximately 12.00%. Step 2: I obtained this information from the data.",)
    
    my_stringpiegengraph3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: Value in digit only. Here's a sample answer, ( Step A: Obese people in India; Step B: According to MoHW; Step C: 10 )",)
    
    my_stringpiegraph : bpy.props.StringProperty(
    name= "",
    default="pie_graph",)
    
    my_stringcircle23_graph : bpy.props.StringProperty(
    name= "",
    default="circle23_graph",)
    
    my_stringcandlestick_graph : bpy.props.StringProperty(
    name= "",
    default="candlestick_graph",)
    
    my_stringpie23_graph : bpy.props.StringProperty(
    name= "",
    default="pie23_graph",)
    
    my_stringhorizontal_bar_graph : bpy.props.StringProperty(
    name= "",
    default="horizontal_bar_graph",)
    
    my_stringhorizontal_bar_graph_comparison : bpy.props.StringProperty(
    name= "",
    default="horizontal_bar_graph_comparison",)
    
    my_stringhorizontal_bar_graph_opposing : bpy.props.StringProperty(
    name= "",
    default="horizontal_bar_graph_opposing",)
    
    my_stringprofitloss_bar_graph : bpy.props.StringProperty(
    name= "",
    default="profitloss_bar_graph",)
    
    my_stringhorizontalstacked_bar_graph_comparison : bpy.props.StringProperty(
    name= "",
    default="horizontal_bar_graph_stacked",)
    
    my_stringverticalstacked_bar_graph_comparison : bpy.props.StringProperty(
    name= "",
    default="vertical_bar_graph_stacked",)
    
    my_stringvertical_bar_graph : bpy.props.StringProperty(
    name= "",
    default="vertical_bar_graph",)
    
    my_stringvertical_bar_graph_comparison : bpy.props.StringProperty(
    name= "",
    default="vertical_bar_graph_comparison",)
    
    my_stringvertical_bar_graph_multiple : bpy.props.StringProperty(
    name= "",
    default="vertical_bar_graph_multiple",)
    
    my_stringline_graph : bpy.props.StringProperty(
    name= "",
    default="line_graph",)
    
    my_stringline_graph_comparison : bpy.props.StringProperty(
    name= "",
    default="line_graph_comparison",)    

    my_stringmountain_graph : bpy.props.StringProperty(
    name= "",
    default="mountain_graph",)
    
    my_stringmountain_graph_comparison : bpy.props.StringProperty(
    name= "",
    default="mountain_graph_comparison",)
    
    my_stringscatter_graph : bpy.props.StringProperty(
    name= "",
    default="scatter_graph",)
    
    my_stringbubble_graph : bpy.props.StringProperty(
    name= "",
    default="bubble_graph",)
    
    my_stringmultiple_circle_graph : bpy.props.StringProperty(
    name= "",
    default="multiple_circle_graph",)
    
    my_stringmcgndp : bpy.props.StringProperty(
    name= "",
    default='8')
    
    my_stringmpgndp : bpy.props.StringProperty(
    name= "",
    default='8')
    
    my_stringhbgndp : bpy.props.StringProperty(
    name= "",
    default='10')
    
    my_stringmultiple_pie_graph : bpy.props.StringProperty(
    name= "",
    default="multiple_pie_graph",)  
    
    my_stringradar_graph : bpy.props.StringProperty(
    name= "",
    default="radar_graph",)  
    
    my_stringusmap : bpy.props.StringProperty(
    name= "",
    default="us_map",)      
    
    my_stringcircle23gen_graph1 : bpy.props.StringProperty(
    name= "",
    default="circle23_graph",)
    
    my_stringcircle23gen_graph2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}; no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. Here's a sample answer, Step 1: Men's obesity rate in India, US, China is 10%, 53%, and 20% respectively. Step 2: I obtained this information from the data.",)
    
    my_stringcircle23gen_graph3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: Value in digit only. Step D: Describing the Values. Here's a sample answer, ( Step A: Obese people in India, US, and China; Step B: According to MoHW; Step C: 10, 53, 20; Step D: India, US, China.)",)
    
    my_stringcandlestickgen_graph1 : bpy.props.StringProperty(
    name= "",
    default="candlestick_graph",)
    
    my_stringcandlestickgen_graph2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}, no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. I only want the answer from open-source data. Here's a sample answer, Step 1: India's Men's obesity rate is approximately 12.00%. Step 2: I obtained this information from the data.",)
    
    my_stringcandlestickgen_graph3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: Value in digit only. Here's a sample answer, ( Step A: Obese people in India; Step B: According to MoHW; Step C: 10 )",)
    
    my_stringpie23gen_graph1 : bpy.props.StringProperty(
    name= "",
    default="pie23_graph",)
    
    my_stringpie23gen_graph2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}; no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. Here's a sample answer, Step 1: Men's obesity rate in India, US, China is 10%, 53%, and 20% respectively. Step 2: I obtained this information from the data.",)
    
    my_stringpie23gen_graph3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: Value in digit only. Step D: Describing the Values. Here's a sample answer, ( Step A: Obese people in India, US, and China; Step B: According to MoHW; Step C: 10, 53, 20; Step D: India, US, China.)",)
    
    my_stringhorizontal_bar_gengraph1 : bpy.props.StringProperty(
    name= "",
    default="horizontal_bar_graph",)
    
    my_stringhorizontal_bar_gengraph2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}; no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. Here's a sample answer, Step 1: Number of Aircraft carriers per country is as follows; US: 11, China: 2, India: 2, Italy: 2, Japan: 2, UK: 2, France: 1, Russia: 1, Spain: 1, Thailand 1. Step 2: I obtained this information from the data.",)
    
    my_stringhorizontal_bar_gengraph3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: Values in digit only separated by a comma. Step D: Describing the Values separated by a comma. Here's a sample answer, ( Step A: Aircraft carriers per country; Step B: Source Wisevoter; Step C: 11,2,2,2,2,2,1,1,1,1; Step D: US,China,India,Italy,Japan,UK,France,Russia,Spain,Thailand.)",)
    
    my_stringhorizontal_bar_gengraph_comparison1 : bpy.props.StringProperty(
    name= "",
    default="Wheat production of same 9 countries in 2019 and 2021",)
    
    my_stringhorizontal_bar_gengraph_comparison2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}, no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. Here's a sample answer, Step 1: India's Men's obesity rate is approximately 12.00%. Step 2: I obtained this information from the data.",)
    
    my_stringhorizontal_bar_gengraph_comparison3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: Value in digit only. Here's a sample answer, ( Step A: Obese people in India; Step B: According to MoHW; Step C: 10 )",)
    
    my_stringvertical_bar_gengraph1 : bpy.props.StringProperty(
    name= "",
    default="vertical_bar_graph",)
    
    my_stringvertical_bar_gengraph2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}; no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. Here's a sample answer, Step 1: Number of Aircraft carriers per country is as follows; US: 11, China: 2, India: 2, Italy: 2, Japan: 2, UK: 2, France: 1, Russia: 1. Step 2: I obtained this information from the data.",)
    
    my_stringvertical_bar_gengraph3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: Values in digit only separated by a comma. Step D: Describing the Values separated by a comma. Here's a sample answer, ( Step A: Aircraft carriers per country; Step B: Source Wisevoter; Step C: 11,2,2,2,2,2,1,1; Step D: US,China,India,Italy,Japan,UK,France,Russia.)",)
    
    my_stringvertical_bar_gengraph_comparison1 : bpy.props.StringProperty(
    name= "",
    default="vertical_bar_graph_comparison",)
    
    my_stringvertical_bar_gengraph_comparison2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}, no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. Here's a sample answer, Step 1: India's Men's obesity rate is approximately 12.00%. Step 2: I obtained this information from the data.",)
    
    my_stringvertical_bar_gengraph_comparison3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: Value in digit only. Here's a sample answer, ( Step A: Obese people in India; Step B: According to MoHW; Step C: 10 )",)
    
    my_stringline_gengraph1 : bpy.props.StringProperty(
    name= "",
    default="line_graph",)
    
    my_stringline_gengraph2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}; no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. Here's a sample answer, Step 1: The 30-year data of India's population from 1993 to 2023 is as follows: 1993: 926351297, 1994: 945261958, 1995: 964279129, 1996: 983281218, 1997: 1002335230, 1998: 1021449248, 1999: 1040619456, 2000: 1059828737, 2001: 1078999477, 2002: 1098379968, 2003: 1118089438, 2004: 1137998566, 2005: 1157908987, 2006: 1177811083, 2007: 1197714248, 2008: 1217614333, 2009: 1237438004, 2010: 1257345183, 2011: 1277421968, 2012: 1297323842, 2013: 1317530279, 2014: 1337639382, 2015: 1357996628, 2016: 1378493737, 2017: 1396387127, 2018: 1417173173, 2019: 1428627663, 2020: 1428627663, 2021: 1407563842, 2022: 1417173173, 2023: 1428627663. Step 2: The information was obtained from data.",)
    
    my_stringline_gengraph3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: First range Values in digit only separated by a comma. Step D: Second range Values in digit only separated by a comma. Here's a sample answer, ( Step A: India's population from 1993 to 2023; Step B: according to Macrotrends; Step C: 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023; Step D: 926, 9458, 964, 983, 1002, 1021, 1040, 1059, 1078, 1098, 1118, 1137, 1157, 1177, 1197, 1217, 1237, 1257, 1277, 1297, 1317, 1337, 1357, 1378, 1396, 1417, 1428, 1428, 1407, 1417, 1428). ",)
    
    my_stringline_gengraph_comparison1 : bpy.props.StringProperty(
    name= "",
    default="line_graph_comparison",)
    
    my_stringline_gengraph_comparison2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}, no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. Here's a sample answer, Step 1: India's Men's obesity rate is approximately 12.00%. Step 2: I obtained this information from the data.",)
    
    my_stringline_gengraph_comparison3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: Value in digit only. Here's a sample answer, ( Step A: Obese people in India; Step B: According to MoHW; Step C: 10 )",)
    
    my_stringmountain_gengraph1 : bpy.props.StringProperty(
    name= "",
    default="mountain_graph",)
    
    my_stringmountain_gengraph2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}; no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. Here's a sample answer, Step 1: Number of Aircraft carriers per country is as follows; US: 11, China: 2, India: 2, Italy: 2, Japan: 2, UK: 2, France: 1, Russia: 1, Spain: 1, Thailand 1. Step 2: I obtained this information from the data.",)
    
    my_stringmountain_gengraph3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: Values in digit only separated by a comma. Step D: Describing the Values separated by a comma. Here's a sample answer, ( Step A: Aircraft carriers per country; Step B: Source Wisevoter; Step C: 11,2,2,2,2,2,1,1,1,1; Step D: US,China,India,Italy,Japan,UK,France,Russia,Spain,Thailand.)",)
    
    my_stringmountain_gengraph_comparison1 : bpy.props.StringProperty(
    name= "",
    default="mountain_graph_comparison",)
    
    my_stringmountain_gengraph_comparison2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}, no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. Here's a sample answer, Step 1: India's Men's obesity rate is approximately 12.00%. Step 2: I obtained this information from the data.",)
    
    my_stringmountain_gengraph_comparison3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: Value in digit only. Here's a sample answer, ( Step A: Obese people in India; Step B: According to MoHW; Step C: 10 )",)
    
    my_stringmultiple_circle_gengraph1 : bpy.props.StringProperty(
    name= "",
    default="multiple_circle_graph",)
    
    my_stringmultiple_circle_gengraph2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}; no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. Here's a sample answer, Step 1: The top 8 countries with the highest percentage of the world's GDP are as follows: United States: 25.32%, China: 17.86%, Japan: 4.21%, Germany: 4.05%, India: 3.37%, United Kingdom: 3.1%, France: 2.8% and Canada: 2.1%. Step 2: The information is sourced from data.",)
    
    my_stringmultiple_circle_gengraph3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: Value in digit only. Step D: Describing the Values. Here's a sample answer, ( Step A: World's GDP in percentage; Step B: according to Worldometers and Visual capitalist; Step C: 25.32, 17.86, 4.21, 4.05, 3.37, 3.1, 2.8, 2.1; Step D: United States, China, Japan, Germany, India, United Kingdom, France, Canada). ",)
    
    my_stringmultiple_pie_gengraph1 : bpy.props.StringProperty(
    name= "",
    default="multiple_pie_graph",) 
    
    my_stringmultiple_pie_gengraph2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}; no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. Here's a sample answer, Step 1: The top 8 countries with the highest percentage of the world's GDP are as follows: United States: 25.32%, China: 17.86%, Japan: 4.21%, Germany: 4.05%, India: 3.37%, United Kingdom: 3.1%, France: 2.8% and Canada: 2.1%. Step 2: The information is sourced from data.",)
    
    my_stringmultiple_pie_gengraph3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: Value in digit only. Step D: Describing the Values. Here's a sample answer, ( Step A: World's GDP in percentage; Step B: according to Worldometers and Visual capitalist; Step C: 25.32, 17.86, 4.21, 4.05, 3.37, 3.1, 2.8, 2.1; Step D: United States, China, Japan, Germany, India, United Kingdom, France, Canada). ",) 
    
    my_stringusgenmap1 : bpy.props.StringProperty(
    name= "",
    default="us_map",) 
    
    my_stringusgenmap2 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think before responding. Step 1: {}, no range, no explanation and one sentence. Step 2: Where did you get this information from in one sentence. Here's a sample answer, Step 1: India's Men's obesity rate is approximately 12.00%. Step 2: I obtained this information from the data.",)
    
    my_stringusgenmap3 : bpy.props.StringProperty(
    name= "",
    default="Answer this step-by-step and take your time to think. Divide each step by a semicolon. Step A: title in 6 words. Step B: Subtitle starting with the word (Source:). Step C: Value in digit only. Here's a sample answer, ( Step A: Obese people in India; Step B: According to MoHW; Step C: 10 )",) 
      
    
    my_float: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 3,
        min = 0.1,
        max = 30.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorgg()
        )
        
    my_float23CA: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operator23cal()
        )
        
    my_float23CLA: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operator23cal()
        )

    my_floatcandlea1: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle1()
        )

    my_floatcandlea2: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle2()
        )

    my_floatcandlea3: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle3()
    )

    my_floatcandlea4: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle4()
    )

    my_floatcandlea5: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle5()
    )

    my_floatcandlea6: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle6()
    )

    my_floatcandlea7: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle7()
    )

    my_floatcandlea8: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle8()
    )

    my_floatcandlea9: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle9()
    )

    my_floatcandlea10: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle10()
    )

    my_floatcandlea11: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle11()
    )

    my_floatcandlea12: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle12()
    )

    my_floatcandlea13: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle13()
    )

    my_floatcandlea14: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle14()
    )

    my_floatcandlea15: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle15()
    )

    my_floatcandlea16: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle16()
    )

    my_floatcandlea17: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle17()
    )

    my_floatcandlea18: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle18()
    )

    my_floatcandlea19: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle19()
    )

    my_floatcandlea20: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle20()
    )

    my_floatcandlea21: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle21()
    )

    my_floatcandlea22: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle22()
    )

    my_floatcandlea23: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle23()
    )

    my_floatcandlea24: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle24()
    )

    my_floatcandlea25: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle25()
    )

    my_floatcandlea26: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle26()
    )

    my_floatcandlea27: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle27()
    )

    my_floatcandlea28: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle28()
    )

    my_floatcandlea29: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle29()
    )

    my_floatcandlea30: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle30()
    )

    my_floatcandlea31: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle31()
    )

    my_floatcandlea32: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle32()
    )

    my_floatcandleb1: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle1()
        )

    my_floatcandleb2: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle2()
        )

    my_floatcandleb3: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle3()
    )

    my_floatcandleb4: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle4()
    )

    my_floatcandleb5: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle5()
    )

    my_floatcandleb6: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle6()
    )

    my_floatcandleb7: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle7()
    )

    my_floatcandleb8: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle8()
    )

    my_floatcandleb9: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle9()
    )

    my_floatcandleb10: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle10()
    )

    my_floatcandleb11: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle11()
    )

    my_floatcandleb12: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle12()
    )

    my_floatcandleb13: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle13()
    )

    my_floatcandleb14: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle14()
    )

    my_floatcandleb15: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle15()
    )

    my_floatcandleb16: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle16()
    )

    my_floatcandleb17: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle17()
    )

    my_floatcandleb18: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle18()
    )

    my_floatcandleb19: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle19()
    )

    my_floatcandleb20: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle20()
    )

    my_floatcandleb21: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle21()
    )

    my_floatcandleb22: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle22()
    )

    my_floatcandleb23: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle23()
    )

    my_floatcandleb24: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle24()
    )

    my_floatcandleb25: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle25()
    )

    my_floatcandleb26: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle26()
    )

    my_floatcandleb27: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle27()
    )

    my_floatcandleb28: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle28()
    )

    my_floatcandleb29: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle29()
    )

    my_floatcandleb30: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle30()
    )

    my_floatcandleb31: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle31()
    )

    my_floatcandleb32: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcandle32()
    )

    my_float23CB: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operator23cbl()
        )
        
    my_float23CLB: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operator23cbl()
        )
        
    my_float23CC: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operator23ccl()
        )
        
    my_float23CLC: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operator23ccl()
        )
        
    my_float23PA: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operator23pal()
        )
        
    my_float23PLA: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operator23pal()
        )
        
    my_float23PB: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operator23pbl()
        )
        
    my_float23PLB: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operator23pbl()
        )
        
    my_float23PC: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operator23pcl()
        )
        
    my_float23PLC: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operator23pcl()
        )
        
    my_floatHBGA: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgal()
        )
        
    my_floatHBGLA: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgal()
        )
        
    my_floatHBGB: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgbl()
        )
        
    my_floatHBGLB: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgbl()
        )
        
    my_floatHBGC: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgcl()
        )
        
    my_floatHBGLC: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgcl()
        )
        
    my_floatHBGD: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgdl()
        )
        
    my_floatHBGLD: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgdl()
        )
        
    my_floatHBGE: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgel()
        )
        
    my_floatHBGLE: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgel()
        )

    my_floatHBGF: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgfl()
        )
        
    my_floatHBGLF: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgfl()
        )

    my_floatHBGG: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbggl()
        )
        
    my_floatHBGLG: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbggl()
        )

    my_floatHBGH: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbghl()
        )
        
    my_floatHBGLH: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbghl()
        )

    my_floatHBGI: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgil()
        )
        
    my_floatHBGLI: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgil()
        )

    my_floatHBGJ: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgjl()
        )
        
    my_floatHBGLJ: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbgjl()
        )
        
    my_floatCOMPARISONAHBARA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbara()
    )
    
    my_floatCOMPARISONAHBARLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbara()
    )
    
    my_floatCOMPARISONAHBARB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbarb()
    )
    
    my_floatCOMPARISONAHBARLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbarb()
    )
    
    my_floatCOMPARISONAHBARC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbarc()
    )
    
    my_floatCOMPARISONAHBARLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbarc()
    )
    
    my_floatCOMPARISONAHBARD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbard()
    )
    
    my_floatCOMPARISONAHBARLD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbard()
    )
    
    my_floatCOMPARISONAHBARE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbare()
    )
    
    my_floatCOMPARISONAHBARLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbare()
    )

    my_floatCOMPARISONAHBARF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbarf()
    )
    
    my_floatCOMPARISONAHBARLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbarf()
    )

    my_floatCOMPARISONAHBARG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbarg()
    )
    
    my_floatCOMPARISONAHBARLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbarg()
    )

    my_floatCOMPARISONAHBARH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbarh()
    )
    
    my_floatCOMPARISONAHBARLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbarh()
    )

    my_floatCOMPARISONAHBARI: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbari()
    )
    
    my_floatCOMPARISONAHBARLI: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonahbari()
    )

    my_floatCOMPARISONBHBARA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbara()
    )

    my_floatCOMPARISONBHBARLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbara()
    )

    my_floatCOMPARISONBHBARB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbarb()
    )

    my_floatCOMPARISONBHBARLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbarb()
    )

    my_floatCOMPARISONBHBARC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbarc()
    )

    my_floatCOMPARISONBHBARLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbarc()
    )

    my_floatCOMPARISONBHBARD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbard()
    )

    my_floatCOMPARISONBHBARDL: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbard()
    )

    my_floatCOMPARISONBHBARE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbare()
    )
    
    my_floatCOMPARISONBHBARLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbare()
    )

    my_floatCOMPARISONBHBARF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbarf()
    )
    
    my_floatCOMPARISONBHBARLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbarf()
    )

    my_floatCOMPARISONBHBARG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbarg()
    )
    
    my_floatCOMPARISONBHBARLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbarg()
    )

    my_floatCOMPARISONBHBARH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbarh()
    )
    
    my_floatCOMPARISONBHBARLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbarh()
    )

    my_floatCOMPARISONBHBARI: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbari()
    )
    
    my_floatCOMPARISONBHBARLI: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbhbari()
    )
    
    my_floatOPPOSINGAHBARA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhboal()
    )
    
    my_floatOPPOSINGAHBARLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhboal()
    )
    
    my_floatOPPOSINGAHBARB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbobl()
    )
    
    my_floatOPPOSINGAHBARLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbobl()
    )
    
    my_floatOPPOSINGAHBARC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbocl()
    )
    
    my_floatOPPOSINGAHBARLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbocl()
    )
    
    my_floatOPPOSINGAHBARD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbodl()
    )
    
    my_floatOPPOSINGAHBARLD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbodl()
    )
    
    my_floatOPPOSINGAHBARE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhboel()
    )
    
    my_floatOPPOSINGAHBARLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhboel()
    )

    my_floatOPPOSINGAHBARF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbofl()
    )
    
    my_floatOPPOSINGAHBARLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbofl()
    )

    my_floatOPPOSINGAHBARG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbogl()
    )
    
    my_floatOPPOSINGAHBARLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbogl()
    )

    my_floatOPPOSINGAHBARH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbohl()
    )
    
    my_floatOPPOSINGAHBARLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbohl()
    )

    my_floatOPPOSINGAHBARI: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhboil()
    )
    
    my_floatOPPOSINGAHBARLI: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhboil()
    )
    
    my_floatOPPOSINGAHBARJ: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbojl()
    )
    
    my_floatOPPOSINGAHBARLJ: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorhbojl()
    )

    my_floatOPPOSINGBHBARA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbara()
    )

    my_floatOPPOSINGBHBARLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbara()
    )

    my_floatOPPOSINGBHBARB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbarb()
    )

    my_floatOPPOSINGBHBARLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbarb()
    )

    my_floatOPPOSINGBHBARC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbarc()
    )

    my_floatOPPOSINGBHBARLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbarc()
    )

    my_floatOPPOSINGBHBARD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbard()
    )

    my_floatOPPOSINGBHBARDL: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbard()
    )

    my_floatOPPOSINGBHBARE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbare()
    )
    
    my_floatOPPOSINGBHBARLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbare()
    )

    my_floatOPPOSINGBHBARF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbarf()
    )
    
    my_floatOPPOSINGBHBARLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbarf()
    )

    my_floatOPPOSINGBHBARG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbarg()
    )
    
    my_floatOPPOSINGBHBARLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbarg()
    )

    my_floatOPPOSINGBHBARH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbarh()
    )
    
    my_floatOPPOSINGBHBARLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbarh()
    )

    my_floatOPPOSINGBHBARI: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbari()
    )
    
    my_floatOPPOSINGBHBARLI: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatoropposingbhbari()
    )

    my_floatCOMPARISONALINEA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonalinea()
    )

    my_floatCOMPARISONALINELA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonalinea()
    )

    my_floatCOMPARISONALINEB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonalineb()
    )

    my_floatCOMPARISONALINELB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonalineb()
    )

    my_floatCOMPARISONALINEC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonalinec()
    )

    my_floatCOMPARISONALINELC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonalinec()
    )

    my_floatCOMPARISONALINED: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonalined()
    )

    my_floatCOMPARISONALINELD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonalined()
    )

    my_floatCOMPARISONBLINEA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonblinea()
    )

    my_floatCOMPARISONBLINELA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonblinea()
    )

    my_floatCOMPARISONBLINEB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonblineb()
    )

    my_floatCOMPARISONBLINELB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonblineb()
    )

    my_floatCOMPARISONBLINEC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonblinec()
    )

    my_floatCOMPARISONBLINELC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonblinec()
    )

    my_floatCOMPARISONBLINED: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonblined()
    )

    my_floatCOMPARISONBLINELD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonblined()
    )

    my_floatCOMPARISONALINEE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonealinee()
    )

    my_floatCOMPARISONALINELE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonealinee()
    )

    my_floatCOMPARISONALINEF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonalinef()
    )

    my_floatCOMPARISONALINELF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonalinef()
    )

    my_floatCOMPARISONALINEG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonalineg()
    )

    my_floatCOMPARISONALINELG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonalineg()
    )

    my_floatCOMPARISONALINEH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonalineh()
    )

    my_floatCOMPARISONALINELH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonalineh()
    )

    my_floatCOMPARISONBLINEE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisoneblinee()
    )

    my_floatCOMPARISONBLINELE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisoneblinee()
    )

    my_floatCOMPARISONBLINEF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonblinef()
    )

    my_floatCOMPARISONBLINELF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonblinef()
    )

    my_floatCOMPARISONBLINEG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonblineg()
    )

    my_floatCOMPARISONBLINELG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonblineg()
    )

    my_floatCOMPARISONBLINEH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonblineh()
    )

    my_floatCOMPARISONBLINELH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonblineh()
    )


        
    my_floatLGA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlgal()
    )
        
    my_floatLGLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=2,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlgal()
    )
        
    my_floatLGB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=2.5,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlgbl()
    )
        
    my_floatLGLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=0.5,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlgbl()
    )
        
    my_floatLGC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlgcl()
    )
        
    my_floatLGLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlgcl()
    )
        
    my_floatLGD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlgdl()
    )
        
    my_floatLGLD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlgdl()
    )
        
    my_floatLGE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlgel()
    )
        
    my_floatLGLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlgel()
    )
        
    my_floatLGF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlgfl()
    )
        
    my_floatLGLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlgfl()
    )
        
    my_floatLGG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlggl()
    )
        
    my_floatLGLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlggl()
    )
        
    my_floatLGH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlghl()
    )
        
    my_floatLGLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorlghl()
    )

    my_floatMCGA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcgal()
    )

    my_floatMCGLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcgal()
    )

    my_floatMCGB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=2,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcgbl()
    )

    my_floatMCGLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcgbl()
    )

    my_floatMCGC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=3,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcgcl()
    )

    my_floatMCGLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcgcl()
    )

    my_floatMCGD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcgdl()
    )

    my_floatMCGLD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcgdl()
    )

    my_floatMCGE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=5,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcgel()
    )

    my_floatMCGLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcgel()
    )
    
    my_floatMCGF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=6,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcgfl()
    )

    my_floatMCGLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcgfl()
    )
    
    my_floatMCGG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=7,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcggl()
    )

    my_floatMCGLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcggl()
    )

    my_floatMCGH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=8,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcghl()
    )

    my_floatMCGLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormcghl()
    )

    my_floatMPGA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpgal()
    )

    my_floatMPGLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpgal()
    )

    my_floatMPGB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=2,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpgbl()
    )

    my_floatMPGLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpgbl()
    )

    my_floatMPGC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=3,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpgcl()
    )

    my_floatMPGLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpgcl()
    )

    my_floatMPGD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpgdl()
    )

    my_floatMPGLD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpgdl()
    )

    my_floatMPGE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=5,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpgel()
    )

    my_floatMPGLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpgel()
    )
    
    my_floatMPGF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=6,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpgfl()
    )

    my_floatMPGLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpgfl()
    )

    my_floatMPGG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=7,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpggl()
    )

    my_floatMPGLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpggl()
    )

    my_floatMPGH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=8,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpghl()
    )

    my_floatMPGLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormpghl()
    )


    my_floatMGA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormgal()
    )
        
    my_floatMGLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormgal()
    )
        
    my_floatMGB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormgbl()
    )
        
    my_floatMGLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormgbl()
    )
        
    my_floatMGC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormgcl()
    )
        
    my_floatMGLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormgcl()
    )
        
    my_floatMGD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormgdl()
    )
        
    my_floatMGLD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormgdl()
    )
        
    my_floatMGE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormgel()
    )
        
    my_floatMGLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormgel()
    )
        
    my_floatMGF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormgfl()
    )
        
    my_floatMGLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormgfl()
    )
        
    my_floatMGG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormggl()
    )
        
    my_floatMGLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormggl()
    )
        
    my_floatMGH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormghl()
    )
        
    my_floatMGLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormghl()
    )
    

    my_floatRGA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorrgal()
    )
        
    my_floatRGLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorrgal()
    )
        
    my_floatRGB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=2,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorrgbl()
    )
        
    my_floatRGLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorrgbl()
    )
        
    my_floatRGC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=3,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorrgcl()
    )
        
    my_floatRGLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorrgcl()
    )    

    my_floatCOMPARISONAMOUNTA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamounta()
    )
    
    my_floatSCATTERA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=0.5,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorscattera()
    )
    
    my_floatSCATTERLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=3.5,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorscattera()
    )
    
    my_floatBUBBLEA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=0.5,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorbubblea()
    )
    
    my_floatBUBBLELA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=3.5,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorbubblea()
    )

    my_floatCOMPARISONAMOUNTLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamounta()
    )

    my_floatCOMPARISONAMOUNTB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamountb()
    )

    my_floatCOMPARISONAMOUNTLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamountb()
    )

    my_floatCOMPARISONAMOUNTC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamountc()
    )

    my_floatCOMPARISONAMOUNTLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamountc()
    )

    my_floatCOMPARISONAMOUNTD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamountd()
    )

    my_floatCOMPARISONAMOUNTLD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamountd()
    )

    my_floatCOMPARISONBMOUNTA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmounta()
    )

    my_floatCOMPARISONBMOUNTLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmounta()
    )

    my_floatCOMPARISONBMOUNTB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmountb()
    )

    my_floatCOMPARISONBMOUNTLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmountb()
    )

    my_floatCOMPARISONBMOUNTC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmountc()
    )

    my_floatCOMPARISONBMOUNTLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmountc()
    )

    my_floatCOMPARISONBMOUNTD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmountd()
    )

    my_floatCOMPARISONBMOUNTLD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmountd()
    )

    my_floatCOMPARISONAMOUNTE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamounte()
    )

    my_floatCOMPARISONAMOUNTLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamounte()
    )

    my_floatCOMPARISONAMOUNTF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamountf()
    )

    my_floatCOMPARISONAMOUNTLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamountf()
    )

    my_floatCOMPARISONAMOUNTG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamountg()
    )

    my_floatCOMPARISONAMOUNTLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamountg()
    )

    my_floatCOMPARISONAMOUNTH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamounth()
    )

    my_floatCOMPARISONAMOUNTLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonamounth()
    )

    my_floatCOMPARISONBMOUNTE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmounte()
    )

    my_floatCOMPARISONBMOUNTLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmounte()
    )

    my_floatCOMPARISONBMOUNTF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmountf()
    )

    my_floatCOMPARISONBMOUNTLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmountf()
    )

    my_floatCOMPARISONBMOUNTG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmountg()
    )

    my_floatCOMPARISONBMOUNTLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmountg()
    )

    my_floatCOMPARISONBMOUNTH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmounth()
    )

    my_floatCOMPARISONBMOUNTLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbmounth()
    )

    my_floatCOMPARISONABARVA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarva()
    )

    my_floatCOMPARISONABARVLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarva()
    )

    my_floatCOMPARISONABARVB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarvb()
    )

    my_floatCOMPARISONABARVLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarvb()
    )

    my_floatCOMPARISONABARVC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarvc()
    )

    my_floatCOMPARISONABARVLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarvc()
    )

    my_floatCOMPARISONABARVD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarvd()
    )

    my_floatCOMPARISONABARVLD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarvd()
    )

    my_floatCOMPARISONBBARVA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarva()
    )

    my_floatCOMPARISONBBARVLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarva()
    )

    my_floatCOMPARISONBBARVB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarvb()
    )

    my_floatCOMPARISONBBARVLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarvb()
    )

    my_floatCOMPARISONBBARVC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarvc()
    )

    my_floatCOMPARISONBBARVLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarvc()
    )

    my_floatCOMPARISONBBARVD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarvd()
    )

    my_floatCOMPARISONBBARVLD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarvd()
    )

    my_floatCOMPARISONABARVE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarve()
    )

    my_floatCOMPARISONABARVLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarve()
    )

    my_floatCOMPARISONABARVF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarvf()
    )

    my_floatCOMPARISONABARVLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarvf()
    )

    my_floatCOMPARISONABARVG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarvg()
    )

    my_floatCOMPARISONABARVLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarvg()
    )

    my_floatCOMPARISONABARVH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarvh()
    )

    my_floatCOMPARISONABARVLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonabarvh()
    )

    my_floatCOMPARISONBBARVE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarve()
    )

    my_floatCOMPARISONBBARVLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarve()
    )

    my_floatCOMPARISONBBARVF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarvf()
    )

    my_floatCOMPARISONBBARVLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarvf()
    )

    my_floatCOMPARISONBBARVG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarvg()
    )

    my_floatCOMPARISONBBARVLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarvg()
    )

    my_floatCOMPARISONBBARVH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarvh()
    )

    my_floatCOMPARISONBBARVLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorcomparisonbbarvh()
    )

    my_floatMULTIPLEABARVA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarva()
    )

    my_floatMULTIPLEABARVLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarva()
    )

    my_floatMULTIPLEABARVB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarvb()
    )

    my_floatMULTIPLEABARVLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarvb()
    )

    my_floatMULTIPLEABARVC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarvc()
    )

    my_floatMULTIPLEABARVLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarvc()
    )

    my_floatMULTIPLEABARVD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarvd()
    )

    my_floatMULTIPLEABARVLD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarvd()
    )

    my_floatMULTIPLEABARVE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarve()
    )

    my_floatMULTIPLEABARVLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarve()
    )

    my_floatMULTIPLEABARVF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarvf()
    )

    my_floatMULTIPLEABARVLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarvf()
    )

    my_floatMULTIPLEABARVG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarvg()
    )

    my_floatMULTIPLEABARVLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarvg()
    )

    my_floatMULTIPLEABARVH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarvh()
    )

    my_floatMULTIPLEABARVLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipleabarvh()
    )

    my_floatMULTIPLEBBARVA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarva()
    )

    my_floatMULTIPLEBBARVLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarva()
    )

    my_floatMULTIPLEBBARVB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarvb()
    )

    my_floatMULTIPLEBBARVLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarvb()
    )

    my_floatMULTIPLEBBARVC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarvc()
    )

    my_floatMULTIPLEBBARVLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarvc()
    )

    my_floatMULTIPLEBBARVD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarvd()
    )

    my_floatMULTIPLEBBARVLD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarvd()
    )

    my_floatMULTIPLEBBARVE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarve()
    )

    my_floatMULTIPLEBBARVLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarve()
    )

    my_floatMULTIPLEBBARVF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarvf()
    )

    my_floatMULTIPLEBBARVLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarvf()
    )

    my_floatMULTIPLEBBARVG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarvg()
    )

    my_floatMULTIPLEBBARVLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarvg()
    )

    my_floatMULTIPLEBBARVH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarvh()
    )

    my_floatMULTIPLEBBARVLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplebbarvh()
    )

    my_floatMULTIPLECBARVA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarva()
    )

    my_floatMULTIPLECBARVLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarva()
    )

    my_floatMULTIPLECBARVB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarvb()
    )

    my_floatMULTIPLECBARVLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarvb()
    )

    my_floatMULTIPLECBARVC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarvc()
    )

    my_floatMULTIPLECBARVLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarvc()
    )

    my_floatMULTIPLECBARVD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarvd()
    )

    my_floatMULTIPLECBARVLD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarvd()
    )

    my_floatMULTIPLECBARVE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarve()
    )

    my_floatMULTIPLECBARVLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarve()
    )

    my_floatMULTIPLECBARVF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarvf()
    )

    my_floatMULTIPLECBARVLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarvf()
    )

    my_floatMULTIPLECBARVG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarvg()
    )

    my_floatMULTIPLECBARVLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarvg()
    )

    my_floatMULTIPLECBARVH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarvh()
    )

    my_floatMULTIPLECBARVLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultiplecbarvh()
    )

    my_floatMULTIPLEDBARVA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarva()
    )

    my_floatMULTIPLEDBARVLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarva()
    )

    my_floatMULTIPLEDBARVB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarvb()
    )

    my_floatMULTIPLEDBARVLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarvb()
    )

    my_floatMULTIPLEDBARVC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarvc()
    )

    my_floatMULTIPLEDBARVLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarvc()
    )

    my_floatMULTIPLEDBARVD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarvd()
    )

    my_floatMULTIPLEDBARVLD: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarvd()
    )

    my_floatMULTIPLEDBARVE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarve()
    )

    my_floatMULTIPLEDBARVLE: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarve()
    )

    my_floatMULTIPLEDBARVF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarvf()
    )

    my_floatMULTIPLEDBARVLF: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarvf()
    )

    my_floatMULTIPLEDBARVG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarvg()
    )

    my_floatMULTIPLEDBARVLG: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarvg()
    )

    my_floatMULTIPLEDBARVH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarvh()
    )

    my_floatMULTIPLEDBARVLH: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatormultipledbarvh()
    )
    
        
    my_floatVBGA: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbgal()
        )
        
    my_floatVBGLA: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbgal()
        )
        
    my_floatVBGB: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbgbl()
        )
        
    my_floatVBGLB: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbgbl()
        )
        
    my_floatVBGC: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbgcl()
        )
        
    my_floatVBGLC: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbgcl()
        )
        
    my_floatVBGD: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbgdl()
        )
        
    my_floatVBGLD: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbgdl()
        )
        
    my_floatVBGE: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbgel()
        )
        
    my_floatVBGLE: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbgel()
        )
        
    my_floatVBGF: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbgfl()
        )
        
    my_floatVBGLF: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbgfl()
        )
        
    my_floatVBGG: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbggl()
        )
        
    my_floatVBGLG: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbggl()
        )
        
    my_floatVBGH: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbghl()
        )
        
    my_floatVBGLH: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorvbghl()
        )        
    my_floatPLGA: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplgal()
        )
        
    my_floatPLGLA: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplgal()
        )
        
    my_floatPLGB: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplgbl()
        )
        
    my_floatPLGLB: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplgbl()
        )
        
    my_floatPLGC: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplgcl()
        )
        
    my_floatPLGLC: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplgcl()
        )
        
    my_floatPLGD: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplgdl()
        )
        
    my_floatPLGLD: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplgdl()
        )
        
    my_floatPLGE: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplgel()
        )
        
    my_floatPLGLE: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplgel()
        )
        
    my_floatPLGF: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplgfl()
        )
        
    my_floatPLGLF: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplgfl()
        )
        
    my_floatPLGG: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplggl()
        )
        
    my_floatPLGLG: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplggl()
        )
        
    my_floatPLGH: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 1,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplghl()
        )
        
    my_floatPLGLH: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorplghl()
        ) 
        
    my_floatSTACKEDAHBARA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorstackedahbara()
    )
    
    my_floatSTACKEDAHBARLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorstackedahbara()
    )
    
    my_floatSTACKEDAHBARB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=2.5,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorstackedahbarb()
    )
    
    my_floatSTACKEDAHBARLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorstackedahbarb()
    )
    
    my_floatSTACKEDAHBARC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorstackedahbarc()
    )
    
    my_floatSTACKEDAHBARLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorstackedahbarc()
    )
    
    my_floatSTACKEDAVBARA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorstackedavbara()
    )
    
    my_floatSTACKEDAVBARLA: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorstackedavbara()
    )
    
    my_floatSTACKEDAVBARB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=2.5,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorstackedavbarb()
    )
    
    my_floatSTACKEDAVBARLB: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorstackedavbarb()
    )
    
    my_floatSTACKEDAVBARC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=4,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorstackedavbarc()
    )
    
    my_floatSTACKEDAVBARLC: bpy.props.FloatProperty(
        name="In seconds",
        description="A float property",
        default=1,
        min=0.1,
        max=300.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorstackedavbarc()
    )
    


    my_floatpie: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float property",
        default = 4,
        min = 0.1,
        max = 30.0,
        update=lambda self, context: bpy.ops.addonname.myop_operatorggpie()
        )
        
    my_float2: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float2 property",
        default =0,
        min = 0,
        max = 100000,
        update=lambda self, context: bpy.ops.addonname.myop_operatorgg()
        )
        
    my_float2pie: bpy.props.FloatProperty(
        name = "In seconds",
        description = "A float2 property",
        default =0,
        min = 0,
        max = 100000,
        update=lambda self, context: bpy.ops.addonname.myop_operatorggpie()
        )
        
    my_path: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/circle_graph.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathpie: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/pie_graph.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathline: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/line_graph.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathlinec: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/line_graph_comparison.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathhbar: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/horizontal_bar_graph.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathhbarc: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/horizontal_bar_graph_comparison.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathhbaro: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/horizontal_bar_graph_opposing.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathplbar: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/profitloss_graph.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathhbars: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/horizontal_bar_graph_stacked.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathsvbg: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/vertical_bar_graph_stacked.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathmcircle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/multiple_circle_graph.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathmpie: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/multiple_pie_graph.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_path23c: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/2_3_circle_graph.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathcandle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/candlestick_graph.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_path23p: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/2_3_pie_graph.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathmg: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/mountain_graph.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathmgc: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/mountain_graph_comparison.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathrg: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/radar_graph.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathsgc: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/scatter_graph.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathbgs: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/bubble_graph.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathvb: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/vertical_bar_graph.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathvbc: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/vertical_bar_graph_comparison.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathvbm: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/vertical_bar_graph_multiple.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_path2: bpy.props.StringProperty(
        name = "",
        description="location to save",
        default="//Rendered/rendered####",
        maxlen=1024,
        subtype='FILE_PATH',
        update=lambda self, context: bpy.ops.addonname.myop_operatorffg()
        )
        
    my_pathfontcg_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontcg_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontcg_value: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontcg_description: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontpg_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontpg_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontpg_value: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontpg_description: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfont23cg_title: bpy.props.StringProperty(
        name="",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfont23cg_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfont23cg_value: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfont23cg_description: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfont23cg_legend: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfont23pg_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfont23pg_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfont23pg_value: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfont23pg_description: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfont23pg_legend: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbg_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbg_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbg_barvalue: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbg_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontbg_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontbg_texttotal: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontbg_valuetotal: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbgc_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbgc_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbgc_barvalue: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbgc_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontbgc_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontbgc_legend: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbgo_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbgo_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbgo_barvalue: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbgo_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontbgo_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontbgo_legend: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontlg_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontlg_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontlg_barvalue: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontlg_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontlg_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Semibold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontlgc_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontlgc_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontlgc_barvalue: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontlgc_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontlgc_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Semibold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontlgc_legend: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontmg_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontmg_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontmg_barvalue: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontmg_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontmg_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Semibold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontmgc_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontmgc_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontmgc_barvalue: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontmgc_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontmgc_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Semibold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontmgc_legend: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontsgc_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontsgc_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontsgc_barvalue: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontsgc_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontsgc_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Semibold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontsgc_legend: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbgs_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbgs_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbgs_description: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontbgs_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontbgs_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Semibold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontbgs_legend: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontmcg_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontmcg_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontmcg_barvalue: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Semibold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontmcg_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontmpg_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontmpg_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontmpg_barvalue: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Semibold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontmpg_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontrg_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontrg_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontrg_barvalue: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Semibold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontrg_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontvbg_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontvbg_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontvbg_barvalue: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontvbg_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontvbg_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontvbg_texttotal: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontvbg_valuetotal: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontplg_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontplg_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontplg_barvalue: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontplg_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontplg_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontplg_texttotal: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontplg_valuetotal: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontshbg_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontshbg_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontshbg_barvalue: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontshbg_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontshbg_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontshbg_legend: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontsvbg_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontsvbg_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontsvbg_barvalue: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontsvbg_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontsvbg_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontsvbg_legend: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
 
    my_pathfontvbgc_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontvbgc_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontvbgc_barvaluea: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontvbgc_barvalueb: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
             
    my_pathfontvbgc_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontvbgc_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontvbgc_legend: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH', 
        )
        
    my_pathfontvbgm_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontvbgm_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontvbgm_barvaluea: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontvbgm_barvalueb: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontvbgm_barvaluec: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontvbgm_barvalued: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
             
    my_pathfontvbgm_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontvbgm_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )

    my_pathfontvbgm_legend: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH', 
        )
        
    my_pathfontcandleg_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontcandleg_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontcandleg_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Semibold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontcandleg_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathusmap: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//csv/us_map.csv",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontusmap_title: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-ExtraBold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontusmap_subtitle: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Light.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontusmap_rangenumbers: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Semibold.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathfontusmap_bartext: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//Fonts/Open sans/OpenSans-Regular.ttf",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
    my_pathapi_key: bpy.props.StringProperty(
        name = "",
        description="link to csv file:",
        default="//API_KEY.txt",
        maxlen=1024,
        subtype='FILE_PATH',
        )
        
def read_api_key(file_path):
    try:
        with open(file_path, 'r') as file:
            api_key = file.read().strip()
            return api_key
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
        return None


class NG_PT_QuickRenderPresets(bpy.types.Panel):
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"} 
    
class NG_PT_QuickRenderPresets_1(NG_PT_QuickRenderPresets, bpy.types.Panel):    
    bl_label = "Quick Render Presets"
    bl_idname = "NG_PT_QuickRenderPresets_1"  
   
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool        
        
        rowD = layout.row()
        rowD.label(text= "Render buttons:")
        
        row0 = layout.row()
        row0.operator("render.render", text="Render Image (and save in path)", icon='RENDER_STILL').write_still = True
        
        row00 = layout.row()
        row00.operator("render.render", text="Render Animation", icon='RENDER_ANIMATION').animation = True
        
        rowAA = layout.row()
        rowAA.label(text= "Render Engine:")
        
        layout.prop(mytool, "my_enum0")
        
        row = layout.row()
        row.label(text= "Aspect Ratio and Resolution:")
        
        layout.prop(mytool, "my_enum")
        
        rowC = layout.row()
        rowC.label(text= "Output Format:")
        
        layout.prop(mytool, "my_enum3")
        
        rowFFG = layout.row()
        rowFFG.label(text= "Path:")
        layout.prop(mytool, "my_path2")
        
class NG_PT_QuickRenderPresets_2(NG_PT_QuickRenderPresets, bpy.types.Panel):
    bl_parent_id = "NG_PT_QuickRenderPresets_1"
    bl_label = "MySQL Login Details"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool 
        
        rowSH = layout.row()
        rowSH.label(text= "Hostname:")
        layout.prop(mytool, "my_stringhost")
        
        rowSU = layout.row()
        rowSU.label(text= "User:")
        layout.prop(mytool, "my_stringuser")
        
        rowSPW = layout.row()
        rowSPW.label(text= "Password:")
        layout.prop(mytool, "my_stringpassword")
    
class NG_PT_QuickRenderPresets_3(NG_PT_QuickRenderPresets, bpy.types.Panel):
    bl_parent_id = "NG_PT_QuickRenderPresets_1"
    bl_label = "Gen AI API Details"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool 
        
        rowSHAI = layout.row()
        rowSHAI.label(text= "Your Site URL: (Keep default if you don't know)")
        layout.prop(mytool, "my_stringsiteurl")
        
        rowSUAI = layout.row()
        rowSUAI.label(text= "Your App Name: (Keep default if you don't know)")
        layout.prop(mytool, "my_stringappname")
        
        rowSPWAI = layout.row()
        rowSPWAI.label(text= "Your API Key (Check PDF / video tutorial in the help folder to get your own API key) ")
        layout.prop(mytool, "my_pathapi_key")
    
        rowGenAI1 = layout.row()
        rowGenAI1.label(text= "Model Name for Fetching Datapoints: (Check 'https://openrouter.ai/docs#models' for options)")
        layout.prop(mytool, "my_stringmodelname1")
        
        rowGenAI2 = layout.row()
        rowGenAI2.label(text= "Model Name for Structuring datapoints: (Check 'https://openrouter.ai/docs#models' for options)")
        layout.prop(mytool, "my_stringmodelname2")
        
        rowRURL = layout.row()
        rowRURL.label(text= "Response URL: (Keep default if you don't know)")
        layout.prop(mytool, "my_stringresponseurl")
        
        
class CIRCLE_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class CIRCLE_GRAPH_PT_panel_1(CIRCLE_GRAPH_panel, bpy.types.Panel):
    bl_idname = "CIRCLE_GRAPH_PT_panel_1"
    bl_label = "Circle Graph"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowFPS = layout.row()
        rowFPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enum2")

class CIRCLE_GRAPH_PT_panel_2(CIRCLE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "CIRCLE_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowCGcsv = layout.row()
        rowCGcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_path")
        layout.operator("mesh.mycubeoperatorcgcsv")
        
class CIRCLE_GRAPH_PT_panel_3(CIRCLE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "CIRCLE_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringcirclegraph")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorcgsql")
        
class CIRCLE_GRAPH_PT_panel_4(CIRCLE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "CIRCLE_GRAPH_PT_panel_1"
    bl_label = "Import Gen AI Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGAI1 = layout.row()        
        layout.label(text="Type the info you want:")
        layout.prop(mytool, "my_stringcirclegengraph1")
        layout.operator("mesh.mycubeoperatorcggenai")
        
        rowCGAI2 = layout.row()        
        layout.label(text="Prompt to get datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringcirclegengraph2")
        
        rowCGAI3 = layout.row()        
        layout.label(text="Prompt to rephrase datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringcirclegengraph3")

class CIRCLE_GRAPH_PT_panel_5(CIRCLE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "CIRCLE_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowG = layout.row()
        rowG.label(text= "Start Animation:")
        layout.prop(mytool, "my_float2")

        rowE = layout.row()
        rowE.label(text= "Length of Animation:")
        layout.prop(mytool, "my_float")
        
class CIRCLE_GRAPH_PT_panel_6(CIRCLE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "CIRCLE_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlecg = layout.row()
        rowtitlecg.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontcg_title")

        rowsubtitlecg = layout.row()
        rowsubtitlecg.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontcg_subtitle")
        
        rowvaluecg = layout.row()
        rowvaluecg.label(text= "Value Font:")
        layout.prop(mytool, "my_pathfontcg_value")

        rowvaluecg = layout.row()
        rowvaluecg.label(text= "Description Font:")
        layout.prop(mytool, "my_pathfontcg_description")
        layout.operator("addonname.myop_operatorf")
        
        rowresetcg = layout.row()
        rowresetcg.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorres")
        
                
class CIRCLE_GRAPH_23_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class CIRCLE_GRAPH_23_PT_panel_1(CIRCLE_GRAPH_23_panel, bpy.types.Panel):
    bl_idname = "CIRCLE_GRAPH_23_PT_panel_1"
    bl_label = "2-3 Circle Graph"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        row23FPS = layout.row()
        row23FPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enum23C")

class CIRCLE_GRAPH_23_PT_panel_2(CIRCLE_GRAPH_23_panel, bpy.types.Panel):
    bl_parent_id = "CIRCLE_GRAPH_23_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        row23CGcsv = layout.row()
        row23CGcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_path23c")
        layout.operator("mesh.mycubeoperatorcgccsv")
        
class CIRCLE_GRAPH_23_PT_panel_3(CIRCLE_GRAPH_23_panel, bpy.types.Panel):
    bl_parent_id = "CIRCLE_GRAPH_23_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringcircle23_graph")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorcg23sql")
        
class CIRCLE_GRAPH_23_PT_panel_4(CIRCLE_GRAPH_23_panel, bpy.types.Panel):
    bl_parent_id = "CIRCLE_GRAPH_23_PT_panel_1"
    bl_label = "Import Gen AI Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        row23CGAI1 = layout.row()        
        layout.label(text="Type the info you want:")
        layout.prop(mytool, "my_stringcircle23gen_graph1")
        layout.operator("mesh.mycubeoperator23cggenai")
        
        row23CGAI2 = layout.row()        
        layout.label(text="Prompt to get datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringcircle23gen_graph2")
        
        row23CGAI3 = layout.row()        
        layout.label(text="Prompt to rephrase datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringcircle23gen_graph3")

class CIRCLE_GRAPH_23_PT_panel_5(CIRCLE_GRAPH_23_panel, bpy.types.Panel):
    bl_parent_id = "CIRCLE_GRAPH_23_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        row23CA = layout.row()
        row23CA.label(text= "Start A:")
        layout.prop(mytool, "my_float23CA")
        
        row23CLA = layout.row()
        row23CLA.label(text= "Length of Animation A:")
        layout.prop(mytool, "my_float23CLA")
        
        row23CB = layout.row()
        row23CB.label(text= "Start B:")
        layout.prop(mytool, "my_float23CB")
        
        row23CLB = layout.row()
        row23CLB.label(text= "Length of Animation B:")
        layout.prop(mytool, "my_float23CLB")
        
        row23CC = layout.row()
        row23CC.label(text= "Start C:")
        layout.prop(mytool, "my_float23CC")
        
        row23CLC = layout.row()
        row23CLC.label(text= "Length of Animation C:")
        layout.prop(mytool, "my_float23CLC")
        
class CIRCLE_GRAPH_23_PT_panel_6(CIRCLE_GRAPH_23_panel, bpy.types.Panel):
    bl_parent_id = "CIRCLE_GRAPH_23_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitle23cg = layout.row()
        rowtitle23cg.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfont23cg_title")

        rowsubtitle23cg = layout.row()
        rowsubtitle23cg.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfont23cg_subtitle")
        
        rowvalue23cg = layout.row()
        rowvalue23cg.label(text= "Value Font:")
        layout.prop(mytool, "my_pathfont23cg_value")

        rowdescription23cg = layout.row()
        rowdescription23cg.label(text= "Description Font:")
        layout.prop(mytool, "my_pathfont23cg_description")
        
        rowlegend23cg = layout.row()
        rowlegend23cg.label(text= "Legend Font:")
        layout.prop(mytool, "my_pathfont23cg_legend")                
        layout.operator("addonname.myop_operator23cgfont")
        
        rowreset23cg = layout.row()
        rowreset23cg.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operator23cgresfont")

class CANDLESTICK_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class CANDLESTICK_GRAPH_PT_panel_1(CANDLESTICK_GRAPH_panel, bpy.types.Panel):
    bl_idname = "CANDLESTICK_GRAPH_PT_panel_1"
    bl_label = "Candlestick Graph"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

class CANDLESTICK_GRAPH_PT_panel_2(CANDLESTICK_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "CANDLESTICK_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowCGcsv = layout.row()
        rowCGcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathcandle")
        layout.operator("mesh.mycubeoperatorcandlecsv")
        
class CANDLESTICK_GRAPH_PT_panel_3(CANDLESTICK_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "CANDLESTICK_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringcandlestick_graph")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorcandlesql")
        

class CANDLESTICK_GRAPH_PT_panel_4(CANDLESTICK_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "CANDLESTICK_GRAPH_PT_panel_1"
    bl_label = "Note"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowcandlea1 = layout.row()
        rowcandlea1.label(text= "Duration Control is not applied")
        
        rowcandlea2 = layout.row()
        rowcandlea2.label(text= "for this graph,")
        
        rowcandlea3 = layout.row()
        rowcandlea3.label(text= "as its tedious to control")
        
        rowcandlea4 = layout.row()
        rowcandlea4.label(text= "32 data points individually.")

        rowcandlea5 = layout.row()
        rowcandlea5.label(text= "There is a tutorial in the help")
        
        rowcandlea6 = layout.row()
        rowcandlea6.label(text= "folder on how to increase duration")
        
        rowcandlea7 = layout.row()
        rowcandlea7.label(text= "in an easy way.")
        
class CANDLESTICK_GRAPH_PT_panel_5(CANDLESTICK_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "CANDLESTICK_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlecandleg = layout.row()
        rowtitlecandleg.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontcandleg_title")

        rowsubtitlecandleg = layout.row()
        rowsubtitlecandleg.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontcandleg_subtitle")
        
        rowrangenumberscandleg = layout.row()
        rowrangenumberscandleg.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontcandleg_rangenumbers")

        rowbartextcandleg = layout.row()
        rowbartextcandleg.label(text= "Point Name Font:")
        layout.prop(mytool, "my_pathfontcandleg_bartext")
        layout.operator("addonname.myop_operatorcandlegfont")
        
        rowresetcandleg = layout.row()
        rowresetcandleg.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorcandlegresfont")
        
class PIE_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class PIE_GRAPH_PT_panel_1(PIE_GRAPH_panel, bpy.types.Panel):
    bl_idname = "PIE_GRAPH_PT_panel_1"
    bl_label = "Pie Graph"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowPFPS = layout.row()
        rowPFPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enum2pie")

class PIE_GRAPH_PT_panel_2(PIE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "PIE_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowPGcsv = layout.row()
        rowPGcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathpie")
        layout.operator("mesh.mycubeoperatorpgcsv")
        
class PIE_GRAPH_PT_panel_3(PIE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "PIE_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringpiegraph")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorpgsql")
        
class PIE_GRAPH_PT_panel_4(PIE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "PIE_GRAPH_PT_panel_1"
    bl_label = "Import Gen AI Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowPGAI1 = layout.row()        
        layout.label(text="Type the info you want:")
        layout.prop(mytool, "my_stringpiegengraph1")
        layout.operator("mesh.mycubeoperatorpggenai")
        
        rowPGAI2 = layout.row()        
        layout.label(text="Prompt to get datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringpiegengraph2")
        
        rowPGAI3 = layout.row()        
        layout.label(text="Prompt to rephrase datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringpiegengraph3")

class PIE_GRAPH_PT_panel_5(PIE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "PIE_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowPG = layout.row()
        rowPG.label(text= "Start Animation:")
        layout.prop(mytool, "my_float2pie")

        rowPE = layout.row()
        rowPE.label(text= "Length of Animation:")
        layout.prop(mytool, "my_floatpie")
        
class PIE_GRAPH_PT_panel_6(PIE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "PIE_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
            
        rowtitlepg = layout.row()
        rowtitlepg.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontpg_title")

        rowsubtitlepg = layout.row()
        rowsubtitlepg.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontpg_subtitle")
        
        rowvaluepg = layout.row()
        rowvaluepg.label(text= "Value Font:")
        layout.prop(mytool, "my_pathfontpg_value")

        rowvaluepg = layout.row()
        rowvaluepg.label(text= "Description Font:")
        layout.prop(mytool, "my_pathfontpg_description")
        layout.operator("addonname.myop_operatorfpie")
        
        rowresetpg = layout.row()
        rowresetpg.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorrespie")

        
class PIE_GRAPH_23_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class PIE_GRAPH_23_PT_panel_1(PIE_GRAPH_23_panel, bpy.types.Panel):
    bl_idname = "PIE_GRAPH_23_PT_panel_1"
    bl_label = "2-3 Pie Graph"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        row23PFPS = layout.row()
        row23PFPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enum23P")

class PIE_GRAPH_23_PT_panel_2(PIE_GRAPH_23_panel, bpy.types.Panel):
    bl_parent_id = "PIE_GRAPH_23_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        row23PGcsv = layout.row()
        row23PGcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_path23p")
        layout.operator("mesh.mycubeoperatorpgccsv")
        
class PIE_GRAPH_23_PT_panel_3(PIE_GRAPH_23_panel, bpy.types.Panel):
    bl_parent_id = "PIE_GRAPH_23_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringpie23_graph")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorpg23sql")
        
class PIE_GRAPH_23_PT_panel_4(PIE_GRAPH_23_panel, bpy.types.Panel):
    bl_parent_id = "PIE_GRAPH_23_PT_panel_1"
    bl_label = "Import Gen AI Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        row23PGAI1 = layout.row()        
        layout.label(text="Type the info you want:")
        layout.prop(mytool, "my_stringpie23gen_graph1")
        layout.operator("mesh.mycubeoperator23pggenai")
        
        row23PGAI2 = layout.row()        
        layout.label(text="Prompt to get datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringpie23gen_graph2")
        
        row23PGAI3 = layout.row()        
        layout.label(text="Prompt to rephrase datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringpie23gen_graph3")

class PIE_GRAPH_23_PT_panel_5(PIE_GRAPH_23_panel, bpy.types.Panel):
    bl_parent_id = "PIE_GRAPH_23_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        row23PA = layout.row()
        row23PA.label(text= "Start A:")
        layout.prop(mytool, "my_float23PA")
        
        row23PLA = layout.row()
        row23PLA.label(text= "Length of Animation A:")
        layout.prop(mytool, "my_float23PLA")
        
        row23PB = layout.row()
        row23PB.label(text= "Start B:")
        layout.prop(mytool, "my_float23PB")
        
        row23PLB = layout.row()
        row23PLB.label(text= "Length of Animation B:")
        layout.prop(mytool, "my_float23PLB")
        
        row23PC = layout.row()
        row23PC.label(text= "Start C:")
        layout.prop(mytool, "my_float23PC")
        
        row23PLC = layout.row()
        row23PLC.label(text= "Length of Animation C:")
        layout.prop(mytool, "my_float23PLC")
        
class PIE_GRAPH_23_PT_panel_6(PIE_GRAPH_23_panel, bpy.types.Panel):
    bl_parent_id = "PIE_GRAPH_23_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitle23pg = layout.row()
        rowtitle23pg.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfont23pg_title")

        rowsubtitle23pg = layout.row()
        rowsubtitle23pg.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfont23pg_subtitle")
        
        rowvalue23pg = layout.row()
        rowvalue23pg.label(text= "Value Font:")
        layout.prop(mytool, "my_pathfont23pg_value")

        rowvalue23pg = layout.row()
        rowvalue23pg.label(text= "Description Font:")
        layout.prop(mytool, "my_pathfont23pg_description")
        
        rowlegend23pg = layout.row()
        rowlegend23pg.label(text= "Legend Font:")
        layout.prop(mytool, "my_pathfont23pg_legend")                
        layout.operator("addonname.myop_operator23pgfont")
        
        rowreset23pg = layout.row()
        rowreset23pg.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operator23pgresfont")
        
class LINE_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class LINE_GRAPH_PT_panel_1(LINE_GRAPH_panel, bpy.types.Panel):
    bl_idname = "LINE_GRAPH_PT_panel_1"
    bl_label = "Line Graph"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowLG = layout.row()
        rowLG.label(text= "Frames per second:")
        layout.prop(mytool, "my_enumLGpie")

class LINE_GRAPH_PT_panel_2(LINE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "LINE_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowLGcsv = layout.row()
        rowLGcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathline")
        layout.operator("mesh.mycubeoperatorlgcsv")
        
class LINE_GRAPH_PT_panel_3(LINE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "LINE_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringline_graph")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorlgsql")
        
class LINE_GRAPH_PT_panel_4(LINE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "LINE_GRAPH_PT_panel_1"
    bl_label = "Import Gen AI Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowLGAI1 = layout.row()        
        layout.label(text="Type the info you want:")
        layout.prop(mytool, "my_stringline_gengraph1")
        layout.operator("mesh.mycubeoperatorlineggenai")
        
        rowLGAI2 = layout.row()        
        layout.label(text="Prompt to get datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringline_gengraph2")
        
        rowLGAI3 = layout.row()        
        layout.label(text="Prompt to rephrase datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringline_gengraph3")

class LINE_GRAPH_PT_panel_5(LINE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "LINE_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowLGA = layout.row()
        rowLGA.label(text= "Start Length of Curve:")
        layout.prop(mytool, "my_floatLGA")

        rowLGLA = layout.row()
        rowLGLA.label(text= "Length of Animation of Length of Curve:")
        layout.prop(mytool, "my_floatLGLA")

        rowLGB = layout.row()
        rowLGB.label(text= "Start Shader Display:")
        layout.prop(mytool, "my_floatLGB")

        rowLGLB = layout.row()
        rowLGLB.label(text= "Length of Animation of Shader Display:")
        layout.prop(mytool, "my_floatLGLB")

        
class LINE_GRAPH_PT_panel_6(LINE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "LINE_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlelg = layout.row()
        rowtitlelg.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontlg_title")

        rowsubtitlelg = layout.row()
        rowsubtitlelg.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontlg_subtitle")
        
        rowvaluelg = layout.row()
        rowvaluelg.label(text= "Bar Value Font:")
        layout.prop(mytool, "my_pathfontlg_barvalue")

        rowlinetextlg = layout.row()
        rowlinetextlg.label(text= "Bar Text Font:")
        layout.prop(mytool, "my_pathfontlg_bartext")
        
        rowlegendlg = layout.row()
        rowlegendlg.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontlg_rangenumbers")                
        layout.operator("addonname.myop_operatorlinegfont")
        
        rowresetlg = layout.row()
        rowresetlg.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorlinegresfont")

        
class COMPARISON_LINE_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class COMPARISON_LINE_GRAPH_PT_panel_1(COMPARISON_LINE_GRAPH_panel, bpy.types.Panel):
    bl_idname = "COMPARISON_LINE_GRAPH_PT_panel_1"
    bl_label = "Line Graph Comparison"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowLGCFPS = layout.row()
        rowLGCFPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enumLGC")

class COMPARISON_LINE_GRAPH_PT_panel_2(COMPARISON_LINE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_LINE_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowLGCcsv = layout.row()
        rowLGCcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathlinec")
        layout.operator("mesh.mycubeoperatorlgccsv")
        
class COMPARISON_LINE_GRAPH_PT_panel_3(COMPARISON_LINE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_LINE_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringline_graph_comparison")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorlgcsql")
        
class COMPARISON_LINE_GRAPH_PT_panel_4(COMPARISON_LINE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_LINE_GRAPH_PT_panel_1"
    bl_label = "Import Gen AI Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowLGCAI1 = layout.row()        
        layout.label(text="Type the info you want:")
        layout.prop(mytool, "my_stringline_gengraph_comparison1")
        layout.operator("mesh.mycubeoperatorlgcgenai")
        
        rowLGCAI2 = layout.row()        
        layout.label(text="Prompt to get datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringline_gengraph_comparison2")
        
        rowLGCAI3 = layout.row()        
        layout.label(text="Prompt to rephrase datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringline_gengraph_comparison3")

class COMPARISON_LINE_GRAPH_PT_panel_5(COMPARISON_LINE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_LINE_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCOMPARISONALINEA = layout.row()
        rowCOMPARISONALINEA.label(text= "Start A1:")
        layout.prop(mytool, "my_floatCOMPARISONALINEA")

        rowCOMPARISONALINELA = layout.row()
        rowCOMPARISONALINELA.label(text= "Length of Animation A1:")
        layout.prop(mytool, "my_floatCOMPARISONALINELA")

        rowCOMPARISONALINEB = layout.row()
        rowCOMPARISONALINEB.label(text= "Start B1:")
        layout.prop(mytool, "my_floatCOMPARISONBLINEA")

        rowCOMPARISONALINELB = layout.row()
        rowCOMPARISONALINELB.label(text= "Length of Animation B1:")
        layout.prop(mytool, "my_floatCOMPARISONBLINELA")

        rowCOMPARISONBLINEA = layout.row()
        rowCOMPARISONBLINEA.label(text= "Start A2:")
        layout.prop(mytool, "my_floatCOMPARISONALINEB")

        rowCOMPARISONBLINELA = layout.row()
        rowCOMPARISONBLINELA.label(text= "Length of Animation A2:")
        layout.prop(mytool, "my_floatCOMPARISONALINELB")

        rowCOMPARISONBLINEB = layout.row()
        rowCOMPARISONBLINEB.label(text= "Start B2:")
        layout.prop(mytool, "my_floatCOMPARISONBLINEB")

        rowCOMPARISONBLINELB = layout.row()
        rowCOMPARISONBLINELB.label(text= "Length of Animation B2:")
        layout.prop(mytool, "my_floatCOMPARISONBLINELB")

        rowCOMPARISONALINEC = layout.row()
        rowCOMPARISONALINEC.label(text= "Start A3:")
        layout.prop(mytool, "my_floatCOMPARISONALINEC")

        rowCOMPARISONALINELC = layout.row()
        rowCOMPARISONALINELC.label(text= "Length of Animation A3:")
        layout.prop(mytool, "my_floatCOMPARISONALINELC")

        rowCOMPARISONBLINEC = layout.row()
        rowCOMPARISONBLINEC.label(text= "Start B3:")
        layout.prop(mytool, "my_floatCOMPARISONBLINEC")

        rowCOMPARISONBLINELC = layout.row()
        rowCOMPARISONBLINELC.label(text= "Length of Animation B3:")
        layout.prop(mytool, "my_floatCOMPARISONBLINELC")

        rowCOMPARISONALINED = layout.row()
        rowCOMPARISONALINED.label(text= "Start A4:")
        layout.prop(mytool, "my_floatCOMPARISONALINED")

        rowCOMPARISONALINELD = layout.row()
        rowCOMPARISONALINELD.label(text= "Length of Animation A4:")
        layout.prop(mytool, "my_floatCOMPARISONALINELD")

        rowCOMPARISONBLINED = layout.row()
        rowCOMPARISONBLINED.label(text= "Start B4:")
        layout.prop(mytool, "my_floatCOMPARISONBLINED")

        rowCOMPARISONBLINELD = layout.row()
        rowCOMPARISONBLINELD.label(text= "Length of Animation B4:")
        layout.prop(mytool, "my_floatCOMPARISONBLINELD")

        rowCOMPARISONALINEE = layout.row()
        rowCOMPARISONALINEE.label(text= "Start A5:")
        layout.prop(mytool, "my_floatCOMPARISONALINEE")

        rowCOMPARISONALINELE = layout.row()
        rowCOMPARISONALINELE.label(text= "Length of Animation A5:")
        layout.prop(mytool, "my_floatCOMPARISONALINELE")

        rowCOMPARISONBLINEE = layout.row()
        rowCOMPARISONBLINEE.label(text= "Start B5:")
        layout.prop(mytool, "my_floatCOMPARISONBLINEE")

        rowCOMPARISONBLINELE = layout.row()
        rowCOMPARISONBLINELE.label(text= "Length of Animation B5:")
        layout.prop(mytool, "my_floatCOMPARISONBLINELE")

        rowCOMPARISONALINEF = layout.row()
        rowCOMPARISONALINEF.label(text= "Start A6:")
        layout.prop(mytool, "my_floatCOMPARISONALINEF")

        rowCOMPARISONALINELF = layout.row()
        rowCOMPARISONALINELF.label(text= "Length of Animation A6:")
        layout.prop(mytool, "my_floatCOMPARISONALINELF")

        rowCOMPARISONBLINEF = layout.row()
        rowCOMPARISONBLINEF.label(text= "Start B6:")
        layout.prop(mytool, "my_floatCOMPARISONBLINEF")

        rowCOMPARISONBLINELF = layout.row()
        rowCOMPARISONBLINELF.label(text= "Length of Animation B6:")
        layout.prop(mytool, "my_floatCOMPARISONBLINELF")

        rowCOMPARISONALINEG = layout.row()
        rowCOMPARISONALINEG.label(text= "Start A7:")
        layout.prop(mytool, "my_floatCOMPARISONALINEG")

        rowCOMPARISONALINELG = layout.row()
        rowCOMPARISONALINELG.label(text= "Length of Animation A7:")
        layout.prop(mytool, "my_floatCOMPARISONALINELG")

        rowCOMPARISONBLINEG = layout.row()
        rowCOMPARISONBLINEG.label(text= "Start B7:")
        layout.prop(mytool, "my_floatCOMPARISONBLINEG")

        rowCOMPARISONBLINELG = layout.row()
        rowCOMPARISONBLINELG.label(text= "Length of Animation B7:")
        layout.prop(mytool, "my_floatCOMPARISONBLINELG")

        rowCOMPARISONALINEH = layout.row()
        rowCOMPARISONALINEH.label(text= "Start A8:")
        layout.prop(mytool, "my_floatCOMPARISONALINEH")

        rowCOMPARISONALINELH = layout.row()
        rowCOMPARISONALINELH.label(text= "Length of Animation A8:")
        layout.prop(mytool, "my_floatCOMPARISONALINELH")

        rowCOMPARISONBLINEH = layout.row()
        rowCOMPARISONBLINEH.label(text= "Start B8:")
        layout.prop(mytool, "my_floatCOMPARISONBLINEH")

        rowCOMPARISONBLINELH = layout.row()
        rowCOMPARISONBLINELH.label(text= "Length of Animation B8:")
        layout.prop(mytool, "my_floatCOMPARISONBLINELH")

class COMPARISON_LINE_GRAPH_PT_panel_6(COMPARISON_LINE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_LINE_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlelgc = layout.row()
        rowtitlelgc.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontlgc_title")

        rowsubtitlelgc = layout.row()
        rowsubtitlelgc.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontlgc_subtitle")
        
        rowvaluelgc = layout.row()
        rowvaluelgc.label(text= "Bar Value Font:")
        layout.prop(mytool, "my_pathfontlgc_barvalue")

        rowvaluelgc = layout.row()
        rowvaluelgc.label(text= "Bar Text Font:")
        layout.prop(mytool, "my_pathfontlgc_bartext")
        
        rowlegendlgc = layout.row()
        rowlegendlgc.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontlgc_rangenumbers")
        
        rowlegendlgc = layout.row()
        rowlegendlgc.label(text= "Legend Font:")
        layout.prop(mytool, "my_pathfontlgc_legend")                 
        layout.operator("addonname.myop_operatorlinegcfont")
        
        rowresetlgc = layout.row()
        rowresetlgc.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorlinegcresfont")


class HORIZONTAL_BAR_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class HORIZONTAL_BAR_GRAPH_PT_panel_1(HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_idname = "HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Horizontal Bar Graph"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowHB = layout.row()
        rowHB.label(text= "Frames per second:")
        layout.prop(mytool, "my_enumHBpie")

class HORIZONTAL_BAR_GRAPH_PT_panel_2(HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowHBcsv = layout.row()
        rowHBcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathhbar")
        layout.operator("mesh.mycubeoperatorhbcsv")
        
class HORIZONTAL_BAR_GRAPH_PT_panel_3(HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringhorizontal_bar_graph")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorhbgsql")
        
class HORIZONTAL_BAR_GRAPH_PT_panel_4(HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import Gen AI Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowHBGGAIA1 = layout.row()        
        layout.label(text="Type the info you want:")
        layout.prop(mytool, "my_stringhorizontal_bar_gengraph1")
        layout.operator("mesh.mycubeoperatorhbggenai")
        
        rowHBGGAIA2 = layout.row()        
        layout.label(text="Prompt to get datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringhorizontal_bar_gengraph2")
        
        rowHBGGAIA3 = layout.row()        
        layout.label(text="Prompt to rephrase datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringhorizontal_bar_gengraph3")

class HORIZONTAL_BAR_GRAPH_PT_panel_5(HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowHBGA = layout.row()
        rowHBGA.label(text= "Start A:")
        layout.prop(mytool, "my_floatHBGA")
        
        rowHBGLA = layout.row()
        rowHBGLA.label(text= "Length of Animation A:")
        layout.prop(mytool, "my_floatHBGLA")
        
        rowHBGB = layout.row()
        rowHBGB.label(text= "Start B:")
        layout.prop(mytool, "my_floatHBGB")
        
        rowHBGLB = layout.row()
        rowHBGLB.label(text= "Length of Animation B:")
        layout.prop(mytool, "my_floatHBGLB")
        
        rowHBGC = layout.row()
        rowHBGC.label(text= "Start C:")
        layout.prop(mytool, "my_floatHBGC")
        
        rowHBGLC = layout.row()
        rowHBGLC.label(text= "Length of Animation C:")
        layout.prop(mytool, "my_floatHBGLC")
        
        rowHBGD = layout.row()
        rowHBGD.label(text= "Start D:")
        layout.prop(mytool, "my_floatHBGD")
        
        rowHBGLD = layout.row()
        rowHBGLD.label(text= "Length of Animation D:")
        layout.prop(mytool, "my_floatHBGLD")
        
        rowHBGD = layout.row()
        rowHBGD.label(text= "Start E:")
        layout.prop(mytool, "my_floatHBGE")
        
        rowHBGLD = layout.row()
        rowHBGLD.label(text= "Length of Animation E:")
        layout.prop(mytool, "my_floatHBGLE")
        
        rowHBGD = layout.row()
        rowHBGD.label(text= "Start F:")
        layout.prop(mytool, "my_floatHBGF")
        
        rowHBGLD = layout.row()
        rowHBGLD.label(text= "Length of Animation F:")
        layout.prop(mytool, "my_floatHBGLF")
        
        rowHBGD = layout.row()
        rowHBGD.label(text= "Start G:")
        layout.prop(mytool, "my_floatHBGG")
        
        rowHBGLD = layout.row()
        rowHBGLD.label(text= "Length of Animation G:")
        layout.prop(mytool, "my_floatHBGLG")
        
        rowHBGD = layout.row()
        rowHBGD.label(text= "Start H:")
        layout.prop(mytool, "my_floatHBGH")
        
        rowHBGLD = layout.row()
        rowHBGLD.label(text= "Length of Animation H:")
        layout.prop(mytool, "my_floatHBGLH")
        
        rowHBGD = layout.row()
        rowHBGD.label(text= "Start I:")
        layout.prop(mytool, "my_floatHBGI")
        
        rowHBGLD = layout.row()
        rowHBGLD.label(text= "Length of Animation I:")
        layout.prop(mytool, "my_floatHBGLI")
        
        rowHBGD = layout.row()
        rowHBGD.label(text= "Start J:")
        layout.prop(mytool, "my_floatHBGJ")
        
        rowHBGLD = layout.row()
        rowHBGLD.label(text= "Length of Animation J:")
        layout.prop(mytool, "my_floatHBGLJ")
        
class HORIZONTAL_BAR_GRAPH_PT_panel_6(HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlebg = layout.row()
        rowtitlebg.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontbg_title")

        rowsubtitlebg = layout.row()
        rowsubtitlebg.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontbg_subtitle")
        
        rowvaluebg = layout.row()
        rowvaluebg.label(text= "Bar Value Font:")
        layout.prop(mytool, "my_pathfontbg_barvalue")

        rowvaluebg = layout.row()
        rowvaluebg.label(text= "Bar Text Font:")
        layout.prop(mytool, "my_pathfontbg_bartext")
        
        rowlegendbg = layout.row()
        rowlegendbg.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontbg_rangenumbers")
        
        rowlegendbg = layout.row()
        rowlegendbg.label(text= "Text Total Font:")
        layout.prop(mytool, "my_pathfontbg_texttotal")

        rowlegendbg = layout.row()
        rowlegendbg.label(text= "Value Total Font:")
        layout.prop(mytool, "my_pathfontbg_valuetotal")                  
        layout.operator("addonname.myop_operatorbgfont")
        
        rowresetbg = layout.row()
        rowresetbg.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorbgresfont")
        
class COMPARISON_HORIZONTAL_BAR_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_1(COMPARISON_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_idname = "COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Horizontal Bar Graph Comparison"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowHBCFPS = layout.row()
        rowHBCFPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enumHBC")

class COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_2(COMPARISON_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowHBCcsv = layout.row()
        rowHBCcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathhbarc")
        layout.operator("mesh.mycubeoperatorhbccsv")
        
class COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_3(COMPARISON_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringhorizontal_bar_graph_comparison")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorhbgcsql")
        
class COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_4(COMPARISON_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import Gen AI Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowHBGCGAIA1 = layout.row()        
        layout.label(text="Type the info you want:")
        layout.prop(mytool, "my_stringhorizontal_bar_gengraph_comparison1")
        layout.operator("mesh.mycubeoperatorhbgcgenai")
        
        rowHBGCGAIA2 = layout.row()        
        layout.label(text="Prompt to get datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringhorizontal_bar_gengraph_comparison2")
        
        rowHBGCGAIA3 = layout.row()        
        layout.label(text="Prompt to rephrase datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringhorizontal_bar_gengraph_comparison3")

class COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_5(COMPARISON_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCOMPARISONAHBARA = layout.row()
        rowCOMPARISONAHBARA.label(text= "Start A1:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARA")

        rowCOMPARISONAHBARLA = layout.row()
        rowCOMPARISONAHBARLA.label(text= "Length of Animation A1:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARLA")
        
        rowCOMPARISONAHBARB = layout.row()
        rowCOMPARISONAHBARB.label(text= "Start B1:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARA")

        rowCOMPARISONAHBARLB = layout.row()
        rowCOMPARISONAHBARLB.label(text= "Length of Animation B1:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARLA")
        
        rowCOMPARISONBHBARA = layout.row()
        rowCOMPARISONBHBARA.label(text= "Start A2:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARB")

        rowCOMPARISONBHBARLA = layout.row()
        rowCOMPARISONBHBARLA.label(text= "Length of Animation A2:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARLB")
        
        rowCOMPARISONBHBARB = layout.row()
        rowCOMPARISONBHBARB.label(text= "Start B2:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARB")

        rowCOMPARISONBHBARLB = layout.row()
        rowCOMPARISONBHBARLB.label(text= "Length of Animation B2:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARLB")

        rowCOMPARISONAHBARC = layout.row()
        rowCOMPARISONAHBARC.label(text= "Start A3:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARC")

        rowCOMPARISONAHBARLC = layout.row()
        rowCOMPARISONAHBARLC.label(text= "Length of Animation A3:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARLC")
        
        rowCOMPARISONBHBARC = layout.row()
        rowCOMPARISONBHBARC.label(text= "Start B3:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARC")

        rowCOMPARISONBHBARLC = layout.row()
        rowCOMPARISONBHBARLC.label(text= "Length of Animation B3:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARLC")

        rowCOMPARISONAHBARD = layout.row()
        rowCOMPARISONAHBARD.label(text= "Start A4:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARD")

        rowCOMPARISONAHBARLD = layout.row()
        rowCOMPARISONAHBARLD.label(text= "Length of Animation A4:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARLD")
        
        rowCOMPARISONBHBARD = layout.row()
        rowCOMPARISONBHBARD.label(text= "Start B4:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARD")

        rowCOMPARISONBHBARLD = layout.row()
        rowCOMPARISONBHBARLD.label(text= "Length of Animation B4:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARDL")
        
        rowCOMPARISONAHBARE = layout.row()
        rowCOMPARISONAHBARE.label(text= "Start A5:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARE")

        rowCOMPARISONAHBARLE = layout.row()
        rowCOMPARISONAHBARLE.label(text= "Length of Animation A5:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARLE")
        
        rowCOMPARISONBHBARE = layout.row()
        rowCOMPARISONBHBARE.label(text= "Start B5:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARE")

        rowCOMPARISONBHBARLE = layout.row()
        rowCOMPARISONBHBARLE.label(text= "Length of Animation B5:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARLE")

        rowCOMPARISONAHBARF = layout.row()
        rowCOMPARISONAHBARF.label(text= "Start A6:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARF")

        rowCOMPARISONAHBARLF = layout.row()
        rowCOMPARISONAHBARLF.label(text= "Length of Animation A6:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARLF")
        
        rowCOMPARISONBHBARF = layout.row()
        rowCOMPARISONBHBARF.label(text= "Start B6:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARF")

        rowCOMPARISONBHBARLF = layout.row()
        rowCOMPARISONBHBARLF.label(text= "Length of Animation B6:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARLF")
        
        rowCOMPARISONAHBARG = layout.row()
        rowCOMPARISONAHBARG.label(text= "Start A7:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARG")

        rowCOMPARISONAHBARLG = layout.row()
        rowCOMPARISONAHBARLG.label(text= "Length of Animation A7:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARLG")
        
        rowCOMPARISONBHBARG = layout.row()
        rowCOMPARISONBHBARG.label(text= "Start B7:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARG")

        rowCOMPARISONBHBARLG = layout.row()
        rowCOMPARISONBHBARLG.label(text= "Length of Animation B7:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARLG")
        
        rowCOMPARISONAHBARH = layout.row()
        rowCOMPARISONAHBARH.label(text= "Start A8:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARH")

        rowCOMPARISONAHBARLH = layout.row()
        rowCOMPARISONAHBARLH.label(text= "Length of Animation A8:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARLH")
        
        rowCOMPARISONBHBARH = layout.row()
        rowCOMPARISONBHBARH.label(text= "Start B8:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARH")

        rowCOMPARISONBHBARLH = layout.row()
        rowCOMPARISONBHBARLH.label(text= "Length of Animation B8:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARLH")
        
        rowCOMPARISONAHBARI = layout.row()
        rowCOMPARISONAHBARI.label(text= "Start A9:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARI")

        rowCOMPARISONAHBARLI = layout.row()
        rowCOMPARISONAHBARLI.label(text= "Length of Animation A9:")
        layout.prop(mytool, "my_floatCOMPARISONAHBARLI")
        
        rowCOMPARISONBHBARI = layout.row()
        rowCOMPARISONBHBARI.label(text= "Start B9:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARI")

        rowCOMPARISONBHBARLI = layout.row()
        rowCOMPARISONBHBARLI.label(text= "Length of Animation B9:")
        layout.prop(mytool, "my_floatCOMPARISONBHBARLI")

class COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_6(COMPARISON_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlebgc = layout.row()
        rowtitlebgc.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontbgc_title")

        rowsubtitlebgc = layout.row()
        rowsubtitlebgc.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontbgc_subtitle")
        
        rowvaluebgc = layout.row()
        rowvaluebgc.label(text= "Bar Value Font:")
        layout.prop(mytool, "my_pathfontbgc_barvalue")

        rowvaluebgc = layout.row()
        rowvaluebgc.label(text= "Bar Text Font:")
        layout.prop(mytool, "my_pathfontbgc_bartext")
        
        rowlegendbgc = layout.row()
        rowlegendbgc.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontbgc_rangenumbers")
        
        rowlegendbgc = layout.row()
        rowlegendbgc.label(text= "Legend Font:")
        layout.prop(mytool, "my_pathfontbgc_legend")                 
        layout.operator("addonname.myop_operatorbgcfont")
        
        rowresetbgc = layout.row()
        rowresetbgc.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorbgcresfont")



class MULTIPLE_CIRCLE_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class MULTIPLE_CIRCLE_GRAPH_PT_panel_1(MULTIPLE_CIRCLE_GRAPH_panel, bpy.types.Panel):
    bl_idname = "MULTIPLE_CIRCLE_GRAPH_PT_panel_1"
    bl_label = "Multiple Circle Graph"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowMC = layout.row()
        rowMC.label(text= "Frames per second:")       
        layout.prop(mytool, "my_enumMCpie")

class MULTIPLE_CIRCLE_GRAPH_PT_panel_2(MULTIPLE_CIRCLE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MULTIPLE_CIRCLE_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowMCcsv = layout.row()
        rowMCcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathmcircle")
        layout.operator("mesh.mycubeoperatormccsv")
        
class MULTIPLE_CIRCLE_GRAPH_PT_panel_3(MULTIPLE_CIRCLE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MULTIPLE_CIRCLE_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringmultiple_circle_graph")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatormcgsql")
        
class MULTIPLE_CIRCLE_GRAPH_PT_panel_4(MULTIPLE_CIRCLE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MULTIPLE_CIRCLE_GRAPH_PT_panel_1"
    bl_label = "Import Gen AI Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowMCGGAIB = layout.row()        
        layout.label(text="Type the info you want:")
        layout.prop(mytool, "my_stringmultiple_circle_gengraph1")
        layout.operator("mesh.mycubeoperatormcggenai")
        
        rowMCGGAI2 = layout.row()        
        layout.label(text="Prompt to get datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringmultiple_circle_gengraph2")
        
        rowMCGGAI3 = layout.row()        
        layout.label(text="Prompt to rephrase datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringmultiple_circle_gengraph3")

class MULTIPLE_CIRCLE_GRAPH_PT_panel_5(MULTIPLE_CIRCLE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MULTIPLE_CIRCLE_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowMCGA = layout.row()
        rowMCGA.label(text= "Start A:")
        layout.prop(mytool, "my_floatMCGA")

        rowMCGLA = layout.row()
        rowMCGLA.label(text= "Length of Animation A:")
        layout.prop(mytool, "my_floatMCGLA")

        rowMCGB = layout.row()
        rowMCGB.label(text= "Start B:")
        layout.prop(mytool, "my_floatMCGB")

        rowMCGLB = layout.row()
        rowMCGLB.label(text= "Length of Animation B:")
        layout.prop(mytool, "my_floatMCGLB")

        rowMCGC = layout.row()
        rowMCGC.label(text= "Start C:")
        layout.prop(mytool, "my_floatMCGC")

        rowMCGLC = layout.row()
        rowMCGLC.label(text= "Length of Animation C:")
        layout.prop(mytool, "my_floatMCGLC")

        rowMCGD = layout.row()
        rowMCGD.label(text= "Start D:")
        layout.prop(mytool, "my_floatMCGD")

        rowMCGLD = layout.row()
        rowMCGLD.label(text= "Length of Animation D:")
        layout.prop(mytool, "my_floatMCGLD")

        rowMCGE = layout.row()
        rowMCGE.label(text= "Start E:")
        layout.prop(mytool, "my_floatMCGE")

        rowMCGLE = layout.row()
        rowMCGLE.label(text= "Length of Animation E:")
        layout.prop(mytool, "my_floatMCGLE")
        
        rowMCGE = layout.row()
        rowMCGE.label(text= "Start F:")
        layout.prop(mytool, "my_floatMCGF")

        rowMCGLE = layout.row()
        rowMCGLE.label(text= "Length of Animation F:")
        layout.prop(mytool, "my_floatMCGLF")
        
        rowMCGE = layout.row()
        rowMCGE.label(text= "Start G:")
        layout.prop(mytool, "my_floatMCGG")

        rowMCGLE = layout.row()
        rowMCGLE.label(text= "Length of Animation G:")
        layout.prop(mytool, "my_floatMCGLG")
        
        rowMCGE = layout.row()
        rowMCGE.label(text= "Start H:")
        layout.prop(mytool, "my_floatMCGH")

        rowMCGLE = layout.row()
        rowMCGLE.label(text= "Length of Animation H:")
        layout.prop(mytool, "my_floatMCGLH")

class MULTIPLE_CIRCLE_GRAPH_PT_panel_6(MULTIPLE_CIRCLE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MULTIPLE_CIRCLE_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlemcg = layout.row()
        rowtitlemcg.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontmcg_title")

        rowsubtitlemcg = layout.row()
        rowsubtitlemcg.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontmcg_subtitle")
        
        rowvaluemcg = layout.row()
        rowvaluemcg.label(text= "Value Font:")
        layout.prop(mytool, "my_pathfontmcg_barvalue")

        rowvaluemcg = layout.row()
        rowvaluemcg.label(text= "Description Font:")
        layout.prop(mytool, "my_pathfontmcg_bartext")
        layout.operator("addonname.myop_operatormcgfont")
        
        rowresetmcg = layout.row()
        rowresetmcg.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatormcgresfont")

        
class MULTIPLE_PIE_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class MULTIPLE_PIE_GRAPH_PT_panel_1(MULTIPLE_PIE_GRAPH_panel, bpy.types.Panel):
    bl_idname = "MULTIPLE_PIE_GRAPH_PT_panel_1"
    bl_label = "Multiple Pie Graph"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowMP = layout.row()
        rowMP.label(text= "Frames per second:")       
        layout.prop(mytool, "my_enumMPpie")

class MULTIPLE_PIE_GRAPH_PT_panel_2(MULTIPLE_PIE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MULTIPLE_PIE_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowMPcsv = layout.row()
        rowMPcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathmpie")
        layout.operator("mesh.mycubeoperatormpcsv")
        
class MULTIPLE_PIE_GRAPH_PT_panel_3(MULTIPLE_PIE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MULTIPLE_PIE_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringmultiple_pie_graph")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatormpgsql")
        
class MULTIPLE_PIE_GRAPH_PT_panel_4(MULTIPLE_PIE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MULTIPLE_PIE_GRAPH_PT_panel_1"
    bl_label = "Import Gen AI Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowMPGGAIB = layout.row()        
        layout.label(text="Type the info you want:")
        layout.prop(mytool, "my_stringmultiple_pie_gengraph1")
        layout.operator("mesh.mycubeoperatormpggenai")
        
        rowMPGGAI2 = layout.row()        
        layout.label(text="Prompt to get datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringmultiple_pie_gengraph2")
        
        rowMPGGAI3 = layout.row()        
        layout.label(text="Prompt to rephrase datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringmultiple_pie_gengraph3")

class MULTIPLE_PIE_GRAPH_PT_panel_5(MULTIPLE_PIE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MULTIPLE_PIE_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowMPGA = layout.row()
        rowMPGA.label(text="Start A:")
        layout.prop(mytool, "my_floatMPGA")

        rowMPLA = layout.row()
        rowMPLA.label(text="Length of Animation A:")
        layout.prop(mytool, "my_floatMPGLA")

        rowMPGB = layout.row()
        rowMPGB.label(text="Start B:")
        layout.prop(mytool, "my_floatMPGB")

        rowMPLB = layout.row()
        rowMPLB.label(text="Length of Animation B:")
        layout.prop(mytool, "my_floatMPGLB")

        rowMPC = layout.row()
        rowMPC.label(text="Start C:")
        layout.prop(mytool, "my_floatMPGC")

        rowMPLC = layout.row()
        rowMPLC.label(text="Length of Animation C:")
        layout.prop(mytool, "my_floatMPGLC")

        rowMPD = layout.row()
        rowMPD.label(text="Start D:")
        layout.prop(mytool, "my_floatMPGD")

        rowMPLD = layout.row()
        rowMPLD.label(text="Length of Animation D:")
        layout.prop(mytool, "my_floatMPGLD")

        rowMPE = layout.row()
        rowMPE.label(text="Start E:")
        layout.prop(mytool, "my_floatMPGE")

        rowMPLE = layout.row()
        rowMPLE.label(text="Length of Animation E:")
        layout.prop(mytool, "my_floatMPGLE")
        
        rowMPF = layout.row()
        rowMPF.label(text="Start F:")
        layout.prop(mytool, "my_floatMPGF")

        rowMPLF = layout.row()
        rowMPLF.label(text="Length of Animation F:")
        layout.prop(mytool, "my_floatMPGLF")
        
        rowMPF = layout.row()
        rowMPF.label(text="Start G:")
        layout.prop(mytool, "my_floatMPGG")

        rowMPLF = layout.row()
        rowMPLF.label(text="Length of Animation G:")
        layout.prop(mytool, "my_floatMPGLG")
        
        rowMPF = layout.row()
        rowMPF.label(text="Start H:")
        layout.prop(mytool, "my_floatMPGH")

        rowMPLF = layout.row()
        rowMPLF.label(text="Length of Animation H:")
        layout.prop(mytool, "my_floatMPGLH")

class MULTIPLE_PIE_GRAPH_PT_panel_6(MULTIPLE_PIE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MULTIPLE_PIE_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlempg = layout.row()
        rowtitlempg.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontmpg_title")

        rowsubtitlempg = layout.row()
        rowsubtitlempg.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontmpg_subtitle")
        
        rowvaluempg = layout.row()
        rowvaluempg.label(text= "Value Font:")
        layout.prop(mytool, "my_pathfontmpg_barvalue")

        rowvaluempg = layout.row()
        rowvaluempg.label(text= "Description Font:")
        layout.prop(mytool, "my_pathfontmpg_bartext")
        layout.operator("addonname.myop_operatormpgfont")
        
        rowresetmpg = layout.row()
        rowresetmpg.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatormpgresfont")

class RADAR_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class RADAR_GRAPH_PT_panel_1(RADAR_GRAPH_panel, bpy.types.Panel):
    bl_idname = "RADAR_GRAPH_PT_panel_1"
    bl_label = "Radar Graph"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowRG = layout.row()
        rowRG.label(text= "Frames per second:")       
        layout.prop(mytool, "my_enumRADAR")

class RADAR_GRAPH_PT_panel_2(RADAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "RADAR_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowRGcsv = layout.row()
        rowRGcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathrg")
        layout.operator("mesh.mycubeoperatorrgcsv")
        
class RADAR_GRAPH_PT_panel_3(RADAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "RADAR_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowRGsql = layout.row()
        rowRGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringradar_graph")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorrgsql")

class RADAR_GRAPH_PT_panel_4(RADAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "RADAR_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowRGA = layout.row()
        rowRGA.label(text="Start A:")
        layout.prop(mytool, "my_floatRGA")

        rowRGLA = layout.row()
        rowRGLA.label(text="Length of Animation A:")
        layout.prop(mytool, "my_floatRGLA")

        rowRGB = layout.row()
        rowRGB.label(text="Start B:")
        layout.prop(mytool, "my_floatRGB")

        rowRGLB = layout.row()
        rowRGLB.label(text="Length of Animation B:")
        layout.prop(mytool, "my_floatRGLB")

        rowRGC = layout.row()
        rowRGC.label(text="Start C:")
        layout.prop(mytool, "my_floatRGC")

        rowRGLC = layout.row()
        rowRGLC.label(text="Length of Animation C:")
        layout.prop(mytool, "my_floatRGLC")


class RADAR_GRAPH_PT_panel_5(RADAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "RADAR_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlerg = layout.row()
        rowtitlerg.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontrg_title")

        rowsubtitlerg = layout.row()
        rowsubtitlerg.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontrg_subtitle")
        
        rowvaluerg = layout.row()
        rowvaluerg.label(text= "Value Names Font:")
        layout.prop(mytool, "my_pathfontrg_barvalue")

        rowvaluerg = layout.row()
        rowvaluerg.label(text= "Legend Font:")
        layout.prop(mytool, "my_pathfontrg_bartext")
        layout.operator("addonname.myop_operatorrgfont")
        
        rowresetrg = layout.row()
        rowresetrg.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorrgresfont")

        
class MOUNTAIN_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class MOUNTAIN_GRAPH_PT_panel_1(MOUNTAIN_GRAPH_panel, bpy.types.Panel):
    bl_idname = "MOUNTAIN_GRAPH_PT_panel_1"
    bl_label = "Mountain Graph"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowMGFPS = layout.row()
        rowMGFPS.label(text= "Frames per second:")  
        layout.prop(mytool, "my_enumMG") 

class MOUNTAIN_GRAPH_PT_panel_2(MOUNTAIN_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MOUNTAIN_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowMGcsv = layout.row()
        rowMGcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathmg")
        layout.operator("mesh.mycubeoperatormgcsv")
        
class MOUNTAIN_GRAPH_PT_panel_3(MOUNTAIN_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MOUNTAIN_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringmountain_graph")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatormgsql")
        
class MOUNTAIN_GRAPH_PT_panel_4(MOUNTAIN_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MOUNTAIN_GRAPH_PT_panel_1"
    bl_label = "Import Gen AI Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowMGAI1 = layout.row()        
        layout.label(text="Type the info you want:")
        layout.prop(mytool, "my_stringmountain_gengraph1")
        layout.operator("mesh.mycubeoperatormggenai")
        
        rowMGGAI2 = layout.row()        
        layout.label(text="Prompt to get datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringmountain_gengraph2")
        
        rowMGGAI3 = layout.row()        
        layout.label(text="Prompt to rephrase datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringmountain_gengraph3")

class MOUNTAIN_GRAPH_PT_panel_5(MOUNTAIN_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MOUNTAIN_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowMGA = layout.row()
        rowMGA.label(text= "Start A:")
        layout.prop(mytool, "my_floatMGA")

        rowMGLA = layout.row()
        rowMGLA.label(text= "Length of Animation A:")
        layout.prop(mytool, "my_floatMGLA")

        rowMGB = layout.row()
        rowMGB.label(text= "Start B:")
        layout.prop(mytool, "my_floatMGB")

        rowMGLB = layout.row()
        rowMGLB.label(text= "Length of Animation B:")
        layout.prop(mytool, "my_floatMGLB")

        rowMGC = layout.row()
        rowMGC.label(text= "Start C:")
        layout.prop(mytool, "my_floatMGC")

        rowMGLC = layout.row()
        rowMGLC.label(text= "Length of Animation C:")
        layout.prop(mytool, "my_floatMGLC")

        rowMGD = layout.row()
        rowMGD.label(text= "Start D:")
        layout.prop(mytool, "my_floatMGD")

        rowMGLD = layout.row()
        rowMGLD.label(text= "Length of Animation D:")
        layout.prop(mytool, "my_floatMGLD")

        rowMGE = layout.row()
        rowMGE.label(text= "Start E:")
        layout.prop(mytool, "my_floatMGE")

        rowMGLE = layout.row()
        rowMGLE.label(text= "Length of Animation E:")
        layout.prop(mytool, "my_floatMGLE")

        rowMGF = layout.row()
        rowMGF.label(text= "Start F:")
        layout.prop(mytool, "my_floatMGF")

        rowMGLF = layout.row()
        rowMGLF.label(text= "Length of Animation F:")
        layout.prop(mytool, "my_floatMGLF")

        rowMGG = layout.row()
        rowMGG.label(text= "Start G:")
        layout.prop(mytool, "my_floatMGG")

        rowMGLG = layout.row()
        rowMGLG.label(text= "Length of Animation G:")
        layout.prop(mytool, "my_floatMGLG")

        rowMGH = layout.row()
        rowMGH.label(text= "Start H:")
        layout.prop(mytool, "my_floatMGH")

        rowMGLH = layout.row()
        rowMGLH.label(text= "Length of Animation H:")
        layout.prop(mytool, "my_floatMGLH")
        
class MOUNTAIN_GRAPH_PT_panel_6(MOUNTAIN_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MOUNTAIN_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlemg = layout.row()
        rowtitlemg.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontmg_title")

        rowsubtitlemg = layout.row()
        rowsubtitlemg.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontmg_subtitle")
        
        rowvaluemg = layout.row()
        rowvaluemg.label(text= "Bar Value Font:")
        layout.prop(mytool, "my_pathfontmg_barvalue")

        rowvaluemg = layout.row()
        rowvaluemg.label(text= "Bar Text Font:")
        layout.prop(mytool, "my_pathfontmg_bartext")
        
        rowlegendmg = layout.row()
        rowlegendmg.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontmg_rangenumbers")                
        layout.operator("addonname.myop_operatormgfont")
        
        rowresetmg = layout.row()
        rowresetmg.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatormgresfont")
        
class COMPARISON_MOUNTAIN_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class COMPARISON_MOUNTAIN_GRAPH_PT_panel_1(COMPARISON_MOUNTAIN_GRAPH_panel, bpy.types.Panel):
    bl_idname = "COMPARISON_MOUNTAIN_GRAPH_PT_panel_1"
    bl_label = "Mountain Graph Comparison"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowMGCFPS = layout.row()
        rowMGCFPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enumMGC")  

class COMPARISON_MOUNTAIN_GRAPH_PT_panel_2(COMPARISON_MOUNTAIN_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_MOUNTAIN_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowMGCcsv = layout.row()
        rowMGCcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathmgc")
        layout.operator("mesh.mycubeoperatormgccsv")
        
class COMPARISON_MOUNTAIN_GRAPH_PT_panel_3(COMPARISON_MOUNTAIN_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_MOUNTAIN_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringmountain_graph_comparison")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatormgcsql")
        
class COMPARISON_MOUNTAIN_GRAPH_PT_panel_4(COMPARISON_MOUNTAIN_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_MOUNTAIN_GRAPH_PT_panel_1"
    bl_label = "Import Gen AI Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowHBGsql = layout.row()        
        layout.label(text="Type the info you want:")
        layout.prop(mytool, "my_stringmountain_gengraph_comparison1")
        layout.operator("mesh.mycubeoperatormgcgenai")
        
        rowMGGAI2 = layout.row()        
        layout.label(text="Prompt to get datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringmountain_gengraph_comparison2")
        
        rowMGGAI3 = layout.row()        
        layout.label(text="Prompt to rephrase datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringmountain_gengraph_comparison3")

class COMPARISON_MOUNTAIN_GRAPH_PT_panel_5(COMPARISON_MOUNTAIN_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_MOUNTAIN_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCOMPARISONAMOUNTA = layout.row()
        rowCOMPARISONAMOUNTA.label(text= "Start A1:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTA")

        rowCOMPARISONAMOUNTLA = layout.row()
        rowCOMPARISONAMOUNTLA.label(text= "Length of Animation A1:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTLA")

        rowCOMPARISONAMOUNTB = layout.row()
        rowCOMPARISONAMOUNTB.label(text= "Start B1:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTA")

        rowCOMPARISONAMOUNTLB = layout.row()
        rowCOMPARISONAMOUNTLB.label(text= "Length of Animation B1:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTLA")

        rowCOMPARISONBMOUNTA = layout.row()
        rowCOMPARISONBMOUNTA.label(text= "Start A2:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTB")

        rowCOMPARISONBMOUNTLA = layout.row()
        rowCOMPARISONBMOUNTLA.label(text= "Length of Animation A2:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTLB")

        rowCOMPARISONBMOUNTB = layout.row()
        rowCOMPARISONBMOUNTB.label(text= "Start B2:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTB")

        rowCOMPARISONBMOUNTLB = layout.row()
        rowCOMPARISONBMOUNTLB.label(text= "Length of Animation B2:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTLB")

        rowCOMPARISONAMOUNTC = layout.row()
        rowCOMPARISONAMOUNTC.label(text= "Start A3:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTC")

        rowCOMPARISONAMOUNTLC = layout.row()
        rowCOMPARISONAMOUNTLC.label(text= "Length of Animation A3:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTLC")

        rowCOMPARISONBMOUNTC = layout.row()
        rowCOMPARISONBMOUNTC.label(text= "Start B3:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTC")

        rowCOMPARISONBMOUNTLC = layout.row()
        rowCOMPARISONBMOUNTLC.label(text= "Length of Animation B3:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTLC")

        rowCOMPARISONAMOUNTD = layout.row()
        rowCOMPARISONAMOUNTD.label(text= "Start A4:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTD")

        rowCOMPARISONAMOUNTLD = layout.row()
        rowCOMPARISONAMOUNTLD.label(text= "Length of Animation A4:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTLD")

        rowCOMPARISONBMOUNTD = layout.row()
        rowCOMPARISONBMOUNTD.label(text= "Start B4:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTD")

        rowCOMPARISONBMOUNTLD = layout.row()
        rowCOMPARISONBMOUNTLD.label(text= "Length of Animation B4:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTLD")

        rowCOMPARISONAMOUNTE = layout.row()
        rowCOMPARISONAMOUNTE.label(text= "Start A5:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTE")

        rowCOMPARISONAMOUNTLE = layout.row()
        rowCOMPARISONAMOUNTLE.label(text= "Length of Animation A5:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTLE")

        rowCOMPARISONBMOUNTE = layout.row()
        rowCOMPARISONBMOUNTE.label(text= "Start B5:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTE")

        rowCOMPARISONBMOUNTLE = layout.row()
        rowCOMPARISONBMOUNTLE.label(text= "Length of Animation B5:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTLE")

        rowCOMPARISONAMOUNTF = layout.row()
        rowCOMPARISONAMOUNTF.label(text= "Start A6:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTF")

        rowCOMPARISONAMOUNTLF = layout.row()
        rowCOMPARISONAMOUNTLF.label(text= "Length of Animation A6:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTLF")

        rowCOMPARISONBMOUNTF = layout.row()
        rowCOMPARISONBMOUNTF.label(text= "Start B6:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTF")

        rowCOMPARISONBMOUNTLF = layout.row()
        rowCOMPARISONBMOUNTLF.label(text= "Length of Animation B6:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTLF")

        rowCOMPARISONAMOUNTG = layout.row()
        rowCOMPARISONAMOUNTG.label(text= "Start A7:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTG")

        rowCOMPARISONAMOUNTLG = layout.row()
        rowCOMPARISONAMOUNTLG.label(text= "Length of Animation A7:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTLG")

        rowCOMPARISONBMOUNTG = layout.row()
        rowCOMPARISONBMOUNTG.label(text= "Start B7:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTG")

        rowCOMPARISONBMOUNTLG = layout.row()
        rowCOMPARISONBMOUNTLG.label(text= "Length of Animation B7:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTLG")

        rowCOMPARISONAMOUNTH = layout.row()
        rowCOMPARISONAMOUNTH.label(text= "Start A8:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTH")

        rowCOMPARISONAMOUNTLH = layout.row()
        rowCOMPARISONAMOUNTLH.label(text= "Length of Animation A8:")
        layout.prop(mytool, "my_floatCOMPARISONAMOUNTLH")

        rowCOMPARISONBMOUNTH = layout.row()
        rowCOMPARISONBMOUNTH.label(text= "Start B8:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTH")

        rowCOMPARISONBMOUNTLH = layout.row()
        rowCOMPARISONBMOUNTLH.label(text= "Length of Animation B8:")
        layout.prop(mytool, "my_floatCOMPARISONBMOUNTLH")
        
class COMPARISON_MOUNTAIN_GRAPH_PT_panel_6(COMPARISON_MOUNTAIN_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_MOUNTAIN_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlemgc = layout.row()
        rowtitlemgc.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontmgc_title")

        rowsubtitlemgc = layout.row()
        rowsubtitlemgc.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontmgc_subtitle")
        
        rowvaluemgc = layout.row()
        rowvaluemgc.label(text= "Bar Value Font:")
        layout.prop(mytool, "my_pathfontmgc_barvalue")

        rowvaluemgc = layout.row()
        rowvaluemgc.label(text= "Bar Text Font:")
        layout.prop(mytool, "my_pathfontmgc_bartext")
        
        rowlegendmgc = layout.row()
        rowlegendmgc.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontmgc_rangenumbers")
        
        rowlegendmgc = layout.row()
        rowlegendmgc.label(text= "Legend Font:")
        layout.prop(mytool, "my_pathfontmgc_legend")                 
        layout.operator("addonname.myop_operatormgcfont")
        
        rowresetmgc = layout.row()
        rowresetmgc.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatormgcresfont")
        
class SCATTER_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class SCATTER_GRAPH_PT_panel_1(SCATTER_GRAPH_panel, bpy.types.Panel):
    bl_idname = "SCATTER_GRAPH_PT_panel_1"
    bl_label = "Scatter Graph"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowSGCFPS = layout.row()
        rowSGCFPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enumSGC")  

class SCATTER_GRAPH_PT_panel_2(SCATTER_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "SCATTER_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowSGCcsv = layout.row()
        rowSGCcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathsgc")
        layout.operator("mesh.mycubeoperatorsgccsv")
        
class SCATTER_GRAPH_PT_panel_3(SCATTER_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "SCATTER_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringscatter_graph")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorsgcsql")

class SCATTER_GRAPH_PT_panel_4(SCATTER_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "SCATTER_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowSCATTERA = layout.row()
        rowSCATTERA.label(text= "Start Animation:")
        layout.prop(mytool, "my_floatSCATTERA")
        
        rowSCATTERLA = layout.row()
        rowSCATTERLA.label(text= "Duration:")
        layout.prop(mytool, "my_floatSCATTERLA")
        
class SCATTER_GRAPH_PT_panel_5(SCATTER_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "SCATTER_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlesgc = layout.row()
        rowtitlesgc.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontsgc_title")

        rowsubtitlesgc = layout.row()
        rowsubtitlesgc.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontsgc_subtitle")

        rowvaluesgc = layout.row()
        rowvaluesgc.label(text= "r² Font:")
        layout.prop(mytool, "my_pathfontsgc_bartext")
        
        rowlegendsgc = layout.row()
        rowlegendsgc.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontsgc_rangenumbers")
        
        rowlegendsgc = layout.row()
        rowlegendsgc.label(text= "X and Y Description Font:")
        layout.prop(mytool, "my_pathfontsgc_legend")                 
        layout.operator("addonname.myop_operatorsgcfont")
        
        rowresetsgc = layout.row()
        rowresetsgc.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorsgcresfont")
        
class BUBBLE_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class BUBBLE_GRAPH_PT_panel_1(BUBBLE_GRAPH_panel, bpy.types.Panel):
    bl_idname = "BUBBLE_GRAPH_PT_panel_1"
    bl_label = "Bubble Graph"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowBGCFPS = layout.row()
        rowBGCFPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enumBGS")  

class BUBBLE_GRAPH_PT_panel_2(BUBBLE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "BUBBLE_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowBGCcsv = layout.row()
        rowBGCcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathbgs")
        layout.operator("mesh.mycubeoperatorbgscsv")
        
class BUBBLE_GRAPH_PT_panel_3(BUBBLE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "BUBBLE_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringbubble_graph")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorbgssql")

class BUBBLE_GRAPH_PT_panel_4(BUBBLE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "BUBBLE_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowBUBBLEA = layout.row()
        rowBUBBLEA.label(text= "Start Animation:")
        layout.prop(mytool, "my_floatBUBBLEA")
        
        rowBUBBLELA = layout.row()
        rowBUBBLELA.label(text= "Duration:")
        layout.prop(mytool, "my_floatBUBBLELA")
        
class BUBBLE_GRAPH_PT_panel_5(BUBBLE_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "BUBBLE_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlebgs = layout.row()
        rowtitlebgs.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontbgs_title")

        rowsubtitlebgs = layout.row()
        rowsubtitlebgs.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontbgs_subtitle")
        
        rowlegendbgs = layout.row()
        rowlegendbgs.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontbgs_rangenumbers")
        
        rowlegendbgs = layout.row()
        rowlegendbgs.label(text= "Legend Font:")
        layout.prop(mytool, "my_pathfontbgs_legend")
        
        rowlegendbgs = layout.row()
        rowlegendbgs.label(text= "X and Y Description Font:")
        layout.prop(mytool, "my_pathfontbgs_description")        
                 
        layout.operator("addonname.myop_operatorbgsfont")
        
        rowresetbgs = layout.row()
        rowresetbgs.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorbgsresfont")
        
class US_MAP_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class US_MAP_PT_panel_1(US_MAP_panel, bpy.types.Panel):
    bl_idname = "US_MAP_PT_panel_1"
    bl_label = "US Map"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowusmFPS = layout.row()
        rowusmFPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enum_usmap")

class US_MAP_PT_panel_2(US_MAP_panel, bpy.types.Panel):
    bl_parent_id = "US_MAP_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowusmcsv = layout.row()
        rowusmcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathusmap")
        layout.operator("mesh.mycubeoperatorusmapcsv")
        
class US_MAP_PT_panel_3(US_MAP_panel, bpy.types.Panel):
    bl_parent_id = "US_MAP_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowusmsql = layout.row()
        rowusmsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringusmap")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorusmapsql")
        

class US_MAP_PT_panel_4(US_MAP_panel, bpy.types.Panel):
    bl_parent_id = "US_MAP_PT_panel_1"
    bl_label = "Note"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowcandlea1 = layout.row()
        rowcandlea1.label(text= "Duration Control is not applied")
        
        rowcandlea2 = layout.row()
        rowcandlea2.label(text= "for this map,")
        
        rowcandlea3 = layout.row()
        rowcandlea3.label(text= "as its tedious to control")
        
        rowcandlea4 = layout.row()
        rowcandlea4.label(text= "50+ data points individually.")

        rowcandlea5 = layout.row()
        rowcandlea5.label(text= "There is a tutorial in the help")
        
        rowcandlea6 = layout.row()
        rowcandlea6.label(text= "folder on how to increase duration")
        
        rowcandlea7 = layout.row()
        rowcandlea7.label(text= "in an easy way.")
        
class US_MAP_PT_panel_5(US_MAP_panel, bpy.types.Panel):
    bl_parent_id = "US_MAP_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitleusmap = layout.row()
        rowtitleusmap.label(text= "Title Font: (also Credit and Source Title)")
        layout.prop(mytool, "my_pathfontusmap_title")

        rowsubtitleusmap = layout.row()
        rowsubtitleusmap.label(text= "Subtitle Font: (Credit and Source Subtitle)")
        layout.prop(mytool, "my_pathfontusmap_subtitle")
        layout.operator("addonname.myop_operatorusmapfont")
        
        rowresetusmap = layout.row()
        rowresetusmap.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorusmapresfont")
        
class VERTICAL_BAR_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class VERTICAL_BAR_GRAPH_PT_panel_1(VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_idname = "VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Vertical Bar Graph"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowVBFPS = layout.row()
        rowVBFPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enumVB") 

class VERTICAL_BAR_GRAPH_PT_panel_2(VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowVBcsv = layout.row()
        rowVBcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathvb")
        layout.operator("mesh.mycubeoperatorvbcsv")
        
class VERTICAL_BAR_GRAPH_PT_panel_3(VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringvertical_bar_graph")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorvbgsql")
        
class VERTICAL_BAR_GRAPH_PT_panel_4(VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import Gen AI Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowVBGAI1 = layout.row()        
        layout.label(text="Type the info you want:")
        layout.prop(mytool, "my_stringvertical_bar_gengraph1")
        layout.operator("mesh.mycubeoperatorvbggenai")
        
        rowVBGAI2 = layout.row()        
        layout.label(text="Prompt to get datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringvertical_bar_gengraph2")
        
        rowVBGAI3 = layout.row()        
        layout.label(text="Prompt to rephrase datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringvertical_bar_gengraph3")

class VERTICAL_BAR_GRAPH_PT_panel_5(VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowVBGA = layout.row()
        rowVBGA.label(text= "Start A:")
        layout.prop(mytool, "my_floatVBGA")
        
        rowVBGLA = layout.row()
        rowVBGLA.label(text= "Length of Animation A:")
        layout.prop(mytool, "my_floatVBGLA")
        
        rowVBGB = layout.row()
        rowVBGB.label(text= "Start B:")
        layout.prop(mytool, "my_floatVBGB")
        
        rowVBGLB = layout.row()
        rowVBGLB.label(text= "Length of Animation B:")
        layout.prop(mytool, "my_floatVBGLB")
        
        rowVBGC = layout.row()
        rowVBGC.label(text= "Start C:")
        layout.prop(mytool, "my_floatVBGC")
        
        rowVBGLC = layout.row()
        rowVBGLC.label(text= "Length of Animation C:")
        layout.prop(mytool, "my_floatVBGLC")
        
        rowVBGD = layout.row()
        rowVBGD.label(text= "Start D:")
        layout.prop(mytool, "my_floatVBGD")
        
        rowVBGLD = layout.row()
        rowVBGLD.label(text= "Length of Animation D:")
        layout.prop(mytool, "my_floatVBGLD")
        
        rowVBGE = layout.row()
        rowVBGE.label(text= "Start E:")
        layout.prop(mytool, "my_floatVBGE")
        
        rowVBGLE = layout.row()
        rowVBGLE.label(text= "Length of Animation E:")
        layout.prop(mytool, "my_floatVBGLE")
        
        rowVBGF = layout.row()
        rowVBGF.label(text= "Start F:")
        layout.prop(mytool, "my_floatVBGF")
        
        rowVBGLF = layout.row()
        rowVBGLF.label(text= "Length of Animation F:")
        layout.prop(mytool, "my_floatVBGLF")
        
        rowVBGG = layout.row()
        rowVBGG.label(text= "Start G:")
        layout.prop(mytool, "my_floatVBGG")
        
        rowVBGLG = layout.row()
        rowVBGLG.label(text= "Length of Animation G:")
        layout.prop(mytool, "my_floatVBGLG")
        
        rowVBGH = layout.row()
        rowVBGH.label(text= "Start H:")
        layout.prop(mytool, "my_floatVBGH")
        
        rowVBGLH = layout.row()
        rowVBGLH.label(text= "Length of Animation H:")
        layout.prop(mytool, "my_floatVBGLH") 
 
class VERTICAL_BAR_GRAPH_PT_panel_6(VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlevbg = layout.row()
        rowtitlevbg.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontvbg_title")

        rowsubtitlevbg = layout.row()
        rowsubtitlevbg.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontvbg_subtitle")
        
        rowvaluevbg = layout.row()
        rowvaluevbg.label(text= "Bar Value Font:")
        layout.prop(mytool, "my_pathfontvbg_barvalue")

        rowvaluevbg = layout.row()
        rowvaluevbg.label(text= "Bar Text Font:")
        layout.prop(mytool, "my_pathfontvbg_bartext")
        
        rowlegendvbg = layout.row()
        rowlegendvbg.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontvbg_rangenumbers")
        
        rowlegendvbg = layout.row()
        rowlegendvbg.label(text= "Text Total Font:")
        layout.prop(mytool, "my_pathfontvbg_texttotal")

        rowlegendvbg = layout.row()
        rowlegendvbg.label(text= "Value Total Font:")
        layout.prop(mytool, "my_pathfontvbg_valuetotal")                  
        layout.operator("addonname.myop_operatorvbgfont")
        
        rowresetvbg = layout.row()
        rowresetvbg.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorvbgresfont")

        
class COMPARISON_VERTICAL_BAR_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_1(COMPARISON_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_idname = "COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Vertical Bar Graph Comparison"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowVBCFPS = layout.row()
        rowVBCFPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enumVBC") 

class COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_2(COMPARISON_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowVBCcsv = layout.row()
        rowVBCcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathvbc")
        layout.operator("mesh.mycubeoperatorvbccsv")
        
class COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_3(COMPARISON_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringvertical_bar_graph_comparison")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorvbgcsql")
        
class COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_4(COMPARISON_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import Gen AI Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowVBGCAI1 = layout.row()        
        layout.label(text="Type the info you want:")
        layout.prop(mytool, "my_stringvertical_bar_gengraph_comparison1")
        layout.operator("mesh.mycubeoperatorvbgcgenai")
        
        rowVBGCAI2 = layout.row()        
        layout.label(text="Prompt to get datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringvertical_bar_gengraph_comparison2")
        
        rowVBGCAI3 = layout.row()        
        layout.label(text="Prompt to rephrase datapoints {Keep default if you don't know}:")
        layout.prop(mytool, "my_stringvertical_bar_gengraph_comparison3")

class COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_5(COMPARISON_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCOMPARISONABARVA = layout.row()
        rowCOMPARISONABARVA.label(text= "Start A1:")
        layout.prop(mytool, "my_floatCOMPARISONABARVA")

        rowCOMPARISONABARVLA = layout.row()
        rowCOMPARISONABARVLA.label(text= "Length of Animation A1:")
        layout.prop(mytool, "my_floatCOMPARISONABARVLA")

        rowCOMPARISONBBARVB = layout.row()
        rowCOMPARISONBBARVB.label(text= "Start B1:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVA")

        rowCOMPARISONBBARVLB = layout.row()
        rowCOMPARISONBBARVLB.label(text= "Length of Animation B1:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVLA")

        rowCOMPARISONABARVB = layout.row()
        rowCOMPARISONABARVB.label(text= "Start A2:")
        layout.prop(mytool, "my_floatCOMPARISONABARVB")

        rowCOMPARISONABARVLB = layout.row()
        rowCOMPARISONABARVLB.label(text= "Length of Animation A2:")
        layout.prop(mytool, "my_floatCOMPARISONABARVLB")

        rowCOMPARISONBBARVB = layout.row()
        rowCOMPARISONBBARVB.label(text= "Start B2:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVB")

        rowCOMPARISONBBARVLB = layout.row()
        rowCOMPARISONBBARVLB.label(text= "Length of Animation B2:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVLB")

        rowCOMPARISONABARVC = layout.row()
        rowCOMPARISONABARVC.label(text= "Start A3:")
        layout.prop(mytool, "my_floatCOMPARISONABARVC")

        rowCOMPARISONABARVLC = layout.row()
        rowCOMPARISONABARVLC.label(text= "Length of Animation A3:")
        layout.prop(mytool, "my_floatCOMPARISONABARVLC")

        rowCOMPARISONBBARVC = layout.row()
        rowCOMPARISONBBARVC.label(text= "Start B3:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVC")

        rowCOMPARISONBBARVLC = layout.row()
        rowCOMPARISONBBARVLC.label(text= "Length of Animation B3:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVLC")

        rowCOMPARISONABARVD = layout.row()
        rowCOMPARISONABARVD.label(text= "Start A4:")
        layout.prop(mytool, "my_floatCOMPARISONABARVD")

        rowCOMPARISONABARVLD = layout.row()
        rowCOMPARISONABARVLD.label(text= "Length of Animation A4:")
        layout.prop(mytool, "my_floatCOMPARISONABARVLD")

        rowCOMPARISONBBARVD = layout.row()
        rowCOMPARISONBBARVD.label(text= "Start B4:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVD")

        rowCOMPARISONBBARVLD = layout.row()
        rowCOMPARISONBBARVLD.label(text= "Length of Animation B4:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVLD")

        rowCOMPARISONABARVE = layout.row()
        rowCOMPARISONABARVE.label(text= "Start A5:")
        layout.prop(mytool, "my_floatCOMPARISONABARVE")

        rowCOMPARISONABARVLE = layout.row()
        rowCOMPARISONABARVLE.label(text= "Length of Animation A5:")
        layout.prop(mytool, "my_floatCOMPARISONABARVLE")

        rowCOMPARISONBBARVE = layout.row()
        rowCOMPARISONBBARVE.label(text= "Start B5:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVE")

        rowCOMPARISONBBARVLE = layout.row()
        rowCOMPARISONBBARVLE.label(text= "Length of Animation B5:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVLE")

        rowCOMPARISONABARVF = layout.row()
        rowCOMPARISONABARVF.label(text= "Start A6:")
        layout.prop(mytool, "my_floatCOMPARISONABARVF")

        rowCOMPARISONABARVLF = layout.row()
        rowCOMPARISONABARVLF.label(text= "Length of Animation A6:")
        layout.prop(mytool, "my_floatCOMPARISONABARVLF")

        rowCOMPARISONBBARVF = layout.row()
        rowCOMPARISONBBARVF.label(text= "Start B6:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVF")

        rowCOMPARISONBBARVLF = layout.row()
        rowCOMPARISONBBARVLF.label(text= "Length of Animation B6:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVLF")

        rowCOMPARISONABARVG = layout.row()
        rowCOMPARISONABARVG.label(text= "Start A7:")
        layout.prop(mytool, "my_floatCOMPARISONABARVG")

        rowCOMPARISONABARVLG = layout.row()
        rowCOMPARISONABARVLG.label(text= "Length of Animation A7:")
        layout.prop(mytool, "my_floatCOMPARISONABARVLG")

        rowCOMPARISONBBARVG = layout.row()
        rowCOMPARISONBBARVG.label(text= "Start B7:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVG")

        rowCOMPARISONBBARVLG = layout.row()
        rowCOMPARISONBBARVLG.label(text= "Length of Animation B7:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVLG")

        rowCOMPARISONABARVH = layout.row()
        rowCOMPARISONABARVH.label(text= "Start A8:")
        layout.prop(mytool, "my_floatCOMPARISONABARVH")

        rowCOMPARISONABARVLH = layout.row()
        rowCOMPARISONABARVLH.label(text= "Length of Animation A8:")
        layout.prop(mytool, "my_floatCOMPARISONABARVLH")

        rowCOMPARISONBBARVH = layout.row()
        rowCOMPARISONBBARVH.label(text= "Start B8:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVH")

        rowCOMPARISONBBARVLH = layout.row()
        rowCOMPARISONBBARVLH.label(text= "Length of Animation B8:")
        layout.prop(mytool, "my_floatCOMPARISONBBARVLH")
        
class COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_6(COMPARISON_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlevbgc = layout.row()
        rowtitlevbgc.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontvbgc_title")

        rowsubtitlevbgc = layout.row()
        rowsubtitlevbgc.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontvbgc_subtitle")
        
        rowvalueavbgc = layout.row()
        rowvalueavbgc.label(text= "Bar Value A Font:")
        layout.prop(mytool, "my_pathfontvbgc_barvaluea")
        
        rowvaluebvbgc = layout.row()
        rowvaluebvbgc.label(text= "Bar Value B Font:")
        layout.prop(mytool, "my_pathfontvbgc_barvalueb")

        rowvaluevbgc = layout.row()
        rowvaluevbgc.label(text= "Bar Text Font:")
        layout.prop(mytool, "my_pathfontvbgc_bartext")
        
        rowlegendvbgc = layout.row()
        rowlegendvbgc.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontvbgc_rangenumbers")
        
        rowlegendvbgc = layout.row()
        rowlegendvbgc.label(text= "Legend Font:")
        layout.prop(mytool, "my_pathfontvbgc_legend")                 
        layout.operator("addonname.myop_operatorvbgcfont")
        
        rowresetvbgc = layout.row()
        rowresetvbgc.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorvbgcresfont")
        
class OPPOSING_HORIZONTAL_BAR_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class OPPOSING_HORIZONTAL_BAR_GRAPH_PT_panel_1(OPPOSING_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_idname = "OPPOSING_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Horizontal Bar Graph Opposing"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowHBOFPS = layout.row()
        rowHBOFPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enumHBO")

class OPPOSING_HORIZONTAL_BAR_GRAPH_PT_panel_2(OPPOSING_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "OPPOSING_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowHBOcsv = layout.row()
        rowHBOcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathhbaro")
        layout.operator("mesh.mycubeoperatorhbocsv")
        
class OPPOSING_HORIZONTAL_BAR_GRAPH_PT_panel_3(OPPOSING_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "OPPOSING_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringhorizontal_bar_graph_opposing")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorhbgosql")
        

        

class OPPOSING_HORIZONTAL_BAR_GRAPH_PT_panel_4(OPPOSING_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "OPPOSING_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowOPPOSINGAHBARA = layout.row()
        rowOPPOSINGAHBARA.label(text= "Start A1:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARA")

        rowOPPOSINGAHBARLA = layout.row()
        rowOPPOSINGAHBARLA.label(text= "Length of Animation A1:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARLA")
        

        
        rowOPPOSINGBHBARA = layout.row()
        rowOPPOSINGBHBARA.label(text= "Start A2:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARB")

        rowOPPOSINGBHBARLA = layout.row()
        rowOPPOSINGBHBARLA.label(text= "Length of Animation A2:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARLB")
        


        rowOPPOSINGAHBARC = layout.row()
        rowOPPOSINGAHBARC.label(text= "Start A3:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARC")

        rowOPPOSINGAHBARLC = layout.row()
        rowOPPOSINGAHBARLC.label(text= "Length of Animation A3:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARLC")
        


        rowOPPOSINGAHBARD = layout.row()
        rowOPPOSINGAHBARD.label(text= "Start A4:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARD")

        rowOPPOSINGAHBARLD = layout.row()
        rowOPPOSINGAHBARLD.label(text= "Length of Animation A4:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARLD")
        

        
        rowOPPOSINGAHBARE = layout.row()
        rowOPPOSINGAHBARE.label(text= "Start A5:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARE")

        rowOPPOSINGAHBARLE = layout.row()
        rowOPPOSINGAHBARLE.label(text= "Length of Animation A5:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARLE")
        


        rowOPPOSINGAHBARF = layout.row()
        rowOPPOSINGAHBARF.label(text= "Start A6:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARF")

        rowOPPOSINGAHBARLF = layout.row()
        rowOPPOSINGAHBARLF.label(text= "Length of Animation A6:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARLF")
        

        
        rowOPPOSINGAHBARG = layout.row()
        rowOPPOSINGAHBARG.label(text= "Start A7:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARG")

        rowOPPOSINGAHBARLG = layout.row()
        rowOPPOSINGAHBARLG.label(text= "Length of Animation A7:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARLG")
        

        
        rowOPPOSINGAHBARH = layout.row()
        rowOPPOSINGAHBARH.label(text= "Start A8:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARH")

        rowOPPOSINGAHBARLH = layout.row()
        rowOPPOSINGAHBARLH.label(text= "Length of Animation A8:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARLH")
        

        
        rowOPPOSINGAHBARI = layout.row()
        rowOPPOSINGAHBARI.label(text= "Start A9:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARI")

        rowOPPOSINGAHBARLI = layout.row()
        rowOPPOSINGAHBARLI.label(text= "Length of Animation A9:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARLI")
        
        rowOPPOSINGBHBARI = layout.row()
        rowOPPOSINGBHBARI.label(text= "Start A10:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARJ")

        rowOPPOSINGBHBARLI = layout.row()
        rowOPPOSINGBHBARLI.label(text= "Length of Animation A10:")
        layout.prop(mytool, "my_floatOPPOSINGAHBARLJ")

class OPPOSING_HORIZONTAL_BAR_GRAPH_PT_panel_5(OPPOSING_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "OPPOSING_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlebgo = layout.row()
        rowtitlebgo.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontbgo_title")

        rowsubtitlebgo = layout.row()
        rowsubtitlebgo.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontbgo_subtitle")
        
        rowvaluebgo = layout.row()
        rowvaluebgo.label(text= "Bar Value Font:")
        layout.prop(mytool, "my_pathfontbgo_barvalue")

        rowvaluebgo = layout.row()
        rowvaluebgo.label(text= "Bar Text Font:")
        layout.prop(mytool, "my_pathfontbgo_bartext")
        
        rowlegendbgo = layout.row()
        rowlegendbgo.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontbgo_rangenumbers")
        
        rowlegendbgo = layout.row()
        rowlegendbgo.label(text= "Legend Font:")
        layout.prop(mytool, "my_pathfontbgo_legend")                 
        layout.operator("addonname.myop_operatorbgofont")
        
        rowresetbgo = layout.row()
        rowresetbgo.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorbgoresfont")

class PROFITLOSS_BAR_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class PROFITLOSS_BAR_GRAPH_PT_panel_1(PROFITLOSS_BAR_GRAPH_panel, bpy.types.Panel):
    bl_idname = "PROFITLOSS_BAR_GRAPH_PT_panel_1"
    bl_label = "Profitloss Bar Graph"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowPL = layout.row()
        rowPL.label(text= "Frames per second:")
        layout.prop(mytool, "my_enumPLpie")

class PROFITLOSS_BAR_GRAPH_PT_panel_2(PROFITLOSS_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "PROFITLOSS_BAR_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowPLcsv = layout.row()
        rowPLcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathplbar")
        layout.operator("mesh.mycubeoperatorplcsv")
        
class PROFITLOSS_BAR_GRAPH_PT_panel_3(PROFITLOSS_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "PROFITLOSS_BAR_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringprofitloss_bar_graph")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorplgsql")
        

class PROFITLOSS_BAR_GRAPH_PT_panel_4(PROFITLOSS_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "PROFITLOSS_BAR_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowPLGA = layout.row()
        rowPLGA.label(text= "Start A:")
        layout.prop(mytool, "my_floatPLGA")
        
        rowPLGLA = layout.row()
        rowPLGLA.label(text= "Length of Animation A:")
        layout.prop(mytool, "my_floatPLGLA")
        
        rowPLGB = layout.row()
        rowPLGB.label(text= "Start B:")
        layout.prop(mytool, "my_floatPLGB")
        
        rowPLGLB = layout.row()
        rowPLGLB.label(text= "Length of Animation B:")
        layout.prop(mytool, "my_floatPLGLB")
        
        rowPLGC = layout.row()
        rowPLGC.label(text= "Start C:")
        layout.prop(mytool, "my_floatPLGC")
        
        rowPLGLC = layout.row()
        rowPLGLC.label(text= "Length of Animation C:")
        layout.prop(mytool, "my_floatPLGLC")
        
        rowPLGD = layout.row()
        rowPLGD.label(text= "Start D:")
        layout.prop(mytool, "my_floatPLGD")
        
        rowPLGLD = layout.row()
        rowPLGLD.label(text= "Length of Animation D:")
        layout.prop(mytool, "my_floatPLGLD")
        
        rowPLGE = layout.row()
        rowPLGE.label(text= "Start E:")
        layout.prop(mytool, "my_floatPLGE")
        
        rowPLGLE = layout.row()
        rowPLGLE.label(text= "Length of Animation E:")
        layout.prop(mytool, "my_floatPLGLE")
        
        rowPLGF = layout.row()
        rowPLGF.label(text= "Start F:")
        layout.prop(mytool, "my_floatPLGF")
        
        rowPLGLF = layout.row()
        rowPLGLF.label(text= "Length of Animation F:")
        layout.prop(mytool, "my_floatPLGLF")
        
        rowPLGG = layout.row()
        rowPLGG.label(text= "Start G:")
        layout.prop(mytool, "my_floatPLGG")
        
        rowPLGLG = layout.row()
        rowPLGLG.label(text= "Length of Animation G:")
        layout.prop(mytool, "my_floatPLGLG")
        
        rowPLGH = layout.row()
        rowPLGH.label(text= "Start H:")
        layout.prop(mytool, "my_floatPLGH")
        
        rowPLGLH = layout.row()
        rowPLGLH.label(text= "Length of Animation H:")
        layout.prop(mytool, "my_floatPLGLH")
        
class PROFITLOSS_BAR_GRAPH_PT_panel_5(PROFITLOSS_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "PROFITLOSS_BAR_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlepl = layout.row()
        rowtitlepl.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontplg_title")

        rowsubtitlepl = layout.row()
        rowsubtitlepl.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontplg_subtitle")
        
        rowvaluepl = layout.row()
        rowvaluepl.label(text= "Bar Value Font:")
        layout.prop(mytool, "my_pathfontplg_barvalue")

        rowvaluepl = layout.row()
        rowvaluepl.label(text= "Bar Text Font:")
        layout.prop(mytool, "my_pathfontplg_bartext")
        
        rowlegendpl = layout.row()
        rowlegendpl.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontplg_rangenumbers")
                         
        layout.operator("addonname.myop_operatorplgfont")
        
        rowresetpl = layout.row()
        rowresetpl.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorplgresfont")

class STACKED_HORIZONTAL_BAR_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class STACKED_HORIZONTAL_BAR_GRAPH_PT_panel_1(STACKED_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_idname = "STACKED_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Horizontal Bar Graph Stacked"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowSHBGFPS = layout.row()
        rowSHBGFPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enumSHBG")

class STACKED_HORIZONTAL_BAR_GRAPH_PT_panel_2(STACKED_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "STACKED_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowSHBGcsv = layout.row()
        rowSHBGcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathhbars")
        layout.operator("mesh.mycubeoperatorshbgcsv")
        
class STACKED_HORIZONTAL_BAR_GRAPH_PT_panel_3(STACKED_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "STACKED_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringhorizontalstacked_bar_graph_comparison")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorhshbgsql")

class STACKED_HORIZONTAL_BAR_GRAPH_PT_panel_4(STACKED_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "STACKED_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowSTACKEDAHBARA = layout.row()
        rowSTACKEDAHBARA.label(text= "Start A1:")
        layout.prop(mytool, "my_floatSTACKEDAHBARA")

        rowSTACKEDAHBARLA = layout.row()
        rowSTACKEDAHBARLA.label(text= "Length of Animation A1:")
        layout.prop(mytool, "my_floatSTACKEDAHBARLA")
                
        rowSTACKEDBHBARA = layout.row()
        rowSTACKEDBHBARA.label(text= "Start A2:")
        layout.prop(mytool, "my_floatSTACKEDAHBARB")

        rowSTACKEDBHBARLA = layout.row()
        rowSTACKEDBHBARLA.label(text= "Length of Animation A2:")
        layout.prop(mytool, "my_floatSTACKEDAHBARLB")
        
        rowSTACKEDAHBARC = layout.row()
        rowSTACKEDAHBARC.label(text= "Start A3:")
        layout.prop(mytool, "my_floatSTACKEDAHBARC")

        rowSTACKEDAHBARLC = layout.row()
        rowSTACKEDAHBARLC.label(text= "Length of Animation A3:")
        layout.prop(mytool, "my_floatSTACKEDAHBARLC")
        


class STACKED_HORIZONTAL_BAR_GRAPH_PT_panel_5(STACKED_HORIZONTAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "STACKED_HORIZONTAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitleshbg = layout.row()
        rowtitleshbg.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontshbg_title")

        rowsubtitleshbg = layout.row()
        rowsubtitleshbg.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontshbg_subtitle")
        
        rowvalueshbg = layout.row()
        rowvalueshbg.label(text= "Bar Value Font:")
        layout.prop(mytool, "my_pathfontshbg_barvalue")

        rowvalueshbg = layout.row()
        rowvalueshbg.label(text= "Bar Text Font:")
        layout.prop(mytool, "my_pathfontshbg_bartext")
        
        rowlegendshbg = layout.row()
        rowlegendshbg.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontshbg_rangenumbers")
        
        rowlegendshbg = layout.row()
        rowlegendshbg.label(text= "Legend Font:")
        layout.prop(mytool, "my_pathfontshbg_legend")                 
        layout.operator("addonname.myop_operatorshbgfont")
        
        rowresetshbg = layout.row()
        rowresetshbg.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorshbgresfont")

class STACKED_VERTICAL_BAR_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class STACKED_VERTICAL_BAR_GRAPH_PT_panel_1(STACKED_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_idname = "STACKED_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Vertical Bar Graph Stacked"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowSVBGFPS = layout.row()
        rowSVBGFPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enumSVBG") 

class STACKED_VERTICAL_BAR_GRAPH_PT_panel_2(STACKED_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "STACKED_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowSVBGcsv = layout.row()
        rowSVBGcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathsvbg")
        layout.operator("mesh.mycubeoperatorsvbgcsv")
        
class STACKED_VERTICAL_BAR_GRAPH_PT_panel_3(STACKED_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "STACKED_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringverticalstacked_bar_graph_comparison")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorhsvbgsql")
        
class STACKED_VERTICAL_BAR_GRAPH_PT_panel_4(STACKED_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "STACKED_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowSTACKEDABARVA = layout.row()
        rowSTACKEDABARVA.label(text= "Start A1:")
        layout.prop(mytool, "my_floatSTACKEDAVBARA")

        rowSTACKEDABARVLA = layout.row()
        rowSTACKEDABARVLA.label(text= "Length of Animation A1:")
        layout.prop(mytool, "my_floatSTACKEDAVBARLA")

        rowSTACKEDABARVB = layout.row()
        rowSTACKEDABARVB.label(text= "Start A2:")
        layout.prop(mytool, "my_floatSTACKEDAVBARB")

        rowSTACKEDABARVLB = layout.row()
        rowSTACKEDABARVLB.label(text= "Length of Animation A2:")
        layout.prop(mytool, "my_floatSTACKEDAVBARLB")

        rowSTACKEDABARVC = layout.row()
        rowSTACKEDABARVC.label(text= "Start A3:")
        layout.prop(mytool, "my_floatSTACKEDAVBARC")

        rowSTACKEDABARVLC = layout.row()
        rowSTACKEDABARVLC.label(text= "Length of Animation A3:")
        layout.prop(mytool, "my_floatSTACKEDAVBARLC")


        
class STACKED_VERTICAL_BAR_GRAPH_PT_panel_5(STACKED_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "STACKED_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlesvbg = layout.row()
        rowtitlesvbg.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontsvbg_title")

        rowsubtitlesvbg = layout.row()
        rowsubtitlesvbg.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontsvbg_subtitle")
        
        rowvaluesvbg = layout.row()
        rowvaluesvbg.label(text= "Bar Value Font:")
        layout.prop(mytool, "my_pathfontsvbg_barvalue")

        rowvaluesvbg = layout.row()
        rowvaluesvbg.label(text= "Bar Text Font:")
        layout.prop(mytool, "my_pathfontsvbg_bartext")
        
        rowlegendsvbg = layout.row()
        rowlegendsvbg.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontsvbg_rangenumbers")
        
        rowlegendsvbg = layout.row()
        rowlegendsvbg.label(text= "Legend Font:")
        layout.prop(mytool, "my_pathfontsvbg_legend")                 
        layout.operator("addonname.myop_operatorsvbgfont")
        
        rowresetsvbg = layout.row()
        rowresetsvbg.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorsvbgresfont")
        

class MULTIPLE_VERTICAL_BAR_GRAPH_panel:
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = 'Renaissance'
    bl_options = {"DEFAULT_CLOSED"}

class MULTIPLE_VERTICAL_BAR_GRAPH_PT_panel_1(MULTIPLE_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_idname = "MULTIPLE_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Vertical Bar Graph Multiple"

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowVBMFPS = layout.row()
        rowVBMFPS.label(text= "Frames per second:")
        layout.prop(mytool, "my_enumVBM") 

class MULTIPLE_VERTICAL_BAR_GRAPH_PT_panel_2(MULTIPLE_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MULTIPLE_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import CSV"
    bl_options = {"DEFAULT_CLOSED"}
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool

        rowVBMcsv = layout.row()
        rowVBMcsv.label(text= "Link to csv file")
        layout.prop(mytool, "my_pathvbm")
        layout.operator("mesh.mycubeoperatorvbmcsv")
        
class MULTIPLE_VERTICAL_BAR_GRAPH_PT_panel_3(MULTIPLE_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MULTIPLE_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Import MySQL Data"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowCGsql = layout.row()
        rowCGsql.label(text= "DATABASE name:")
        layout.prop(mytool, "my_stringvertical_bar_graph_multiple")
        
        layout.label(text="Import data from MySQL database:")
        layout.operator("mesh.mycubeoperatorvbgmsql")

class MULTIPLE_VERTICAL_BAR_GRAPH_PT_panel_4(MULTIPLE_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MULTIPLE_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Duration Control"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowMULTIPLEABARVA = layout.row()
        rowMULTIPLEABARVA.label(text= "Start A1:")
        layout.prop(mytool, "my_floatMULTIPLEABARVA")

        rowMULTIPLEABARVLA = layout.row()
        rowMULTIPLEABARVLA.label(text= "Length of Animation A1:")
        layout.prop(mytool, "my_floatMULTIPLEABARVLA")

        rowMULTIPLEBBARVB = layout.row()
        rowMULTIPLEBBARVB.label(text= "Start B1:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVA")

        rowMULTIPLEBBARVLB = layout.row()
        rowMULTIPLEBBARVLB.label(text= "Length of Animation B1:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVLA")

        rowMULTIPLECBARVA = layout.row()
        rowMULTIPLECBARVA.label(text= "Start C1:")
        layout.prop(mytool, "my_floatMULTIPLECBARVA")

        rowMULTIPLECBARVLA = layout.row()
        rowMULTIPLECBARVLA.label(text= "Length of Animation C1:")
        layout.prop(mytool, "my_floatMULTIPLECBARVLA")

        rowMULTIPLEDBARVB = layout.row()
        rowMULTIPLEDBARVB.label(text= "Start D1:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVA")

        rowMULTIPLEDBARVLB = layout.row()
        rowMULTIPLEDBARVLB.label(text= "Length of Animation D1:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVLA")




        rowMULTIPLEABARVB = layout.row()
        rowMULTIPLEABARVB.label(text= "Start A2:")
        layout.prop(mytool, "my_floatMULTIPLEABARVB")

        rowMULTIPLEABARVLB = layout.row()
        rowMULTIPLEABARVLB.label(text= "Length of Animation A2:")
        layout.prop(mytool, "my_floatMULTIPLEABARVLB")

        rowMULTIPLEBBARVB = layout.row()
        rowMULTIPLEBBARVB.label(text= "Start B2:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVB")

        rowMULTIPLEBBARVLB = layout.row()
        rowMULTIPLEBBARVLB.label(text= "Length of Animation B2:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVLB")

        rowMULTIPLECBARVB = layout.row()
        rowMULTIPLECBARVB.label(text= "Start C2:")
        layout.prop(mytool, "my_floatMULTIPLECBARVB")

        rowMULTIPLECBARVLB = layout.row()
        rowMULTIPLECBARVLB.label(text= "Length of Animation C2:")
        layout.prop(mytool, "my_floatMULTIPLECBARVLB")

        rowMULTIPLEDBARVB = layout.row()
        rowMULTIPLEDBARVB.label(text= "Start D2:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVB")

        rowMULTIPLEDBARVLB = layout.row()
        rowMULTIPLEDBARVLB.label(text= "Length of Animation D2:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVLB")



        rowMULTIPLEABARVC = layout.row()
        rowMULTIPLEABARVC.label(text= "Start A3:")
        layout.prop(mytool, "my_floatMULTIPLEABARVC")

        rowMULTIPLEABARVLC = layout.row()
        rowMULTIPLEABARVLC.label(text= "Length of Animation A3:")
        layout.prop(mytool, "my_floatMULTIPLEABARVLC")

        rowMULTIPLEBBARVC = layout.row()
        rowMULTIPLEBBARVC.label(text= "Start B3:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVC")

        rowMULTIPLEBBARVLC = layout.row()
        rowMULTIPLEBBARVLC.label(text= "Length of Animation B3:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVLC")

        rowMULTIPLECBARVC = layout.row()
        rowMULTIPLECBARVC.label(text= "Start C3:")
        layout.prop(mytool, "my_floatMULTIPLECBARVC")

        rowMULTIPLECBARVLC = layout.row()
        rowMULTIPLECBARVLC.label(text= "Length of Animation C3:")
        layout.prop(mytool, "my_floatMULTIPLECBARVLC")

        rowMULTIPLEDBARVC = layout.row()
        rowMULTIPLEDBARVC.label(text= "Start D3:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVC")

        rowMULTIPLEDBARVLC = layout.row()
        rowMULTIPLEDBARVLC.label(text= "Length of Animation D3:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVLC")





        rowMULTIPLEABARVD = layout.row()
        rowMULTIPLEABARVD.label(text= "Start A4:")
        layout.prop(mytool, "my_floatMULTIPLEABARVD")

        rowMULTIPLEABARVLD = layout.row()
        rowMULTIPLEABARVLD.label(text= "Length of Animation A4:")
        layout.prop(mytool, "my_floatMULTIPLEABARVLD")

        rowMULTIPLEBBARVD = layout.row()
        rowMULTIPLEBBARVD.label(text= "Start B4:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVD")

        rowMULTIPLEBBARVLD = layout.row()
        rowMULTIPLEBBARVLD.label(text= "Length of Animation B4:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVLD")

        rowMULTIPLECBARVD = layout.row()
        rowMULTIPLECBARVD.label(text= "Start C4:")
        layout.prop(mytool, "my_floatMULTIPLECBARVD")

        rowMULTIPLECBARVLD = layout.row()
        rowMULTIPLECBARVLD.label(text= "Length of Animation C4:")
        layout.prop(mytool, "my_floatMULTIPLECBARVLD")

        rowMULTIPLEDBARVD = layout.row()
        rowMULTIPLEDBARVD.label(text= "Start D4:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVD")

        rowMULTIPLEDBARVLD = layout.row()
        rowMULTIPLEDBARVLD.label(text= "Length of Animation D4:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVLD")





        rowMULTIPLEABARVE = layout.row()
        rowMULTIPLEABARVE.label(text= "Start A5:")
        layout.prop(mytool, "my_floatMULTIPLEABARVE")

        rowMULTIPLEABARVLE = layout.row()
        rowMULTIPLEABARVLE.label(text= "Length of Animation A5:")
        layout.prop(mytool, "my_floatMULTIPLEABARVLE")

        rowMULTIPLEBBARVE = layout.row()
        rowMULTIPLEBBARVE.label(text= "Start B5:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVE")

        rowMULTIPLEBBARVLE = layout.row()
        rowMULTIPLEBBARVLE.label(text= "Length of Animation B5:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVLE")

        rowMULTIPLECBARVE = layout.row()
        rowMULTIPLECBARVE.label(text= "Start C5:")
        layout.prop(mytool, "my_floatMULTIPLECBARVE")

        rowMULTIPLECBARVLE = layout.row()
        rowMULTIPLECBARVLE.label(text= "Length of Animation C5:")
        layout.prop(mytool, "my_floatMULTIPLECBARVLE")

        rowMULTIPLEDBARVE = layout.row()
        rowMULTIPLEDBARVE.label(text= "Start D5:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVE")

        rowMULTIPLEDBARVLE = layout.row()
        rowMULTIPLEDBARVLE.label(text= "Length of Animation D5:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVLE")





        rowMULTIPLEABARVF = layout.row()
        rowMULTIPLEABARVF.label(text= "Start A6:")
        layout.prop(mytool, "my_floatMULTIPLEABARVF")

        rowMULTIPLEABARVLF = layout.row()
        rowMULTIPLEABARVLF.label(text= "Length of Animation A6:")
        layout.prop(mytool, "my_floatMULTIPLEABARVLF")

        rowMULTIPLEBBARVF = layout.row()
        rowMULTIPLEBBARVF.label(text= "Start B6:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVF")

        rowMULTIPLEBBARVLF = layout.row()
        rowMULTIPLEBBARVLF.label(text= "Length of Animation B6:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVLF")

        rowMULTIPLECBARVF = layout.row()
        rowMULTIPLECBARVF.label(text= "Start C6:")
        layout.prop(mytool, "my_floatMULTIPLECBARVF")

        rowMULTIPLECBARVLF = layout.row()
        rowMULTIPLECBARVLF.label(text= "Length of Animation C6:")
        layout.prop(mytool, "my_floatMULTIPLECBARVLF")

        rowMULTIPLEDBARVF = layout.row()
        rowMULTIPLEDBARVF.label(text= "Start D6:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVF")

        rowMULTIPLEDBARVLF = layout.row()
        rowMULTIPLEDBARVLF.label(text= "Length of Animation D6:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVLF")





        rowMULTIPLEABARVG = layout.row()
        rowMULTIPLEABARVG.label(text= "Start A7:")
        layout.prop(mytool, "my_floatMULTIPLEABARVG")

        rowMULTIPLEABARVLG = layout.row()
        rowMULTIPLEABARVLG.label(text= "Length of Animation A7:")
        layout.prop(mytool, "my_floatMULTIPLEABARVLG")

        rowMULTIPLEBBARVG = layout.row()
        rowMULTIPLEBBARVG.label(text= "Start B7:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVG")

        rowMULTIPLEBBARVLG = layout.row()
        rowMULTIPLEBBARVLG.label(text= "Length of Animation B7:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVLG")

        rowMULTIPLECBARVG = layout.row()
        rowMULTIPLECBARVG.label(text= "Start C7:")
        layout.prop(mytool, "my_floatMULTIPLECBARVG")

        rowMULTIPLECBARVLG = layout.row()
        rowMULTIPLECBARVLG.label(text= "Length of Animation C7:")
        layout.prop(mytool, "my_floatMULTIPLECBARVLG")

        rowMULTIPLEDBARVG = layout.row()
        rowMULTIPLEDBARVG.label(text= "Start D7:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVG")

        rowMULTIPLEDBARVLG = layout.row()
        rowMULTIPLEDBARVLG.label(text= "Length of Animation D7:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVLG")






        rowMULTIPLEABARVH = layout.row()
        rowMULTIPLEABARVH.label(text= "Start A8:")
        layout.prop(mytool, "my_floatMULTIPLEABARVH")

        rowMULTIPLEABARVLH = layout.row()
        rowMULTIPLEABARVLH.label(text= "Length of Animation A8:")
        layout.prop(mytool, "my_floatMULTIPLEABARVLH")

        rowMULTIPLEBBARVH = layout.row()
        rowMULTIPLEBBARVH.label(text= "Start B8:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVH")

        rowMULTIPLEBBARVLH = layout.row()
        rowMULTIPLEBBARVLH.label(text= "Length of Animation B8:")
        layout.prop(mytool, "my_floatMULTIPLEBBARVLH")

        rowMULTIPLECBARVH = layout.row()
        rowMULTIPLECBARVH.label(text= "Start C8:")
        layout.prop(mytool, "my_floatMULTIPLECBARVH")

        rowMULTIPLECBARVLH = layout.row()
        rowMULTIPLECBARVLH.label(text= "Length of Animation C8:")
        layout.prop(mytool, "my_floatMULTIPLECBARVLH")

        rowMULTIPLEDBARVH = layout.row()
        rowMULTIPLEDBARVH.label(text= "Start D8:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVH")

        rowMULTIPLEDBARVLH = layout.row()
        rowMULTIPLEDBARVLH.label(text= "Length of Animation D8:")
        layout.prop(mytool, "my_floatMULTIPLEDBARVLH")




        
class MULTIPLE_VERTICAL_BAR_GRAPH_PT_panel_5(MULTIPLE_VERTICAL_BAR_GRAPH_panel, bpy.types.Panel):
    bl_parent_id = "MULTIPLE_VERTICAL_BAR_GRAPH_PT_panel_1"
    bl_label = "Font"
    bl_options = {"DEFAULT_CLOSED"}

    def draw(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        rowtitlevbgm = layout.row()
        rowtitlevbgm.label(text= "Title Font:")
        layout.prop(mytool, "my_pathfontvbgm_title")

        rowsubtitlevbgm = layout.row()
        rowsubtitlevbgm.label(text= "Subtitle Font:")
        layout.prop(mytool, "my_pathfontvbgm_subtitle")
        
        rowvalueavbgm = layout.row()
        rowvalueavbgm.label(text= "Bar Value A Font:")
        layout.prop(mytool, "my_pathfontvbgm_barvaluea")
        
        rowvaluebvbgm = layout.row()
        rowvaluebvbgm.label(text= "Bar Value B Font:")
        layout.prop(mytool, "my_pathfontvbgm_barvalueb")
        
        rowvalueavbgm = layout.row()
        rowvalueavbgm.label(text= "Bar Value C Font:")
        layout.prop(mytool, "my_pathfontvbgm_barvaluec")
        
        rowvaluebvbgm = layout.row()
        rowvaluebvbgm.label(text= "Bar Value D Font:")
        layout.prop(mytool, "my_pathfontvbgm_barvalued")

        rowvaluevbgm = layout.row()
        rowvaluevbgm.label(text= "Bar Text Font:")
        layout.prop(mytool, "my_pathfontvbgm_bartext")
        
        rowlegendvbgm = layout.row()
        rowlegendvbgm.label(text= "Range Numbers Font:")
        layout.prop(mytool, "my_pathfontvbgm_rangenumbers")
        
        rowlegendvbgm = layout.row()
        rowlegendvbgm.label(text= "Legend Font:")
        layout.prop(mytool, "my_pathfontvbgm_legend")                 
        layout.operator("addonname.myop_operatorvbgmfont")
        
        rowresetvbgm = layout.row()
        rowresetvbgm.label(text= "Reset all Fonts:")
        layout.operator("addonname.myop_operatorvbgmresfont")
        
class MyoperatorCGsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorcgsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringcirclegraph
        )
            
        mycursor = mydb.cursor()

        mycursor.execute("SELECT `Max Value` FROM circlegtable")
        maxvalue = mycursor.fetchone()
        my_float_maxvalue = float(maxvalue[0])

        mycursor.execute("SELECT `Min Value` FROM circlegtable")
        minvalue = mycursor.fetchone()
        my_float_minvalue = float(minvalue[0])

        mycursor.execute("SELECT `Value` FROM circlegtable")
        value = mycursor.fetchone()
        my_float_value = float(value[0])
        my_float_percentage = my_float_value/my_float_maxvalue

        mycursor.execute("SELECT `TITLE (in caps)` FROM circlegtable")
        my_string_title = mycursor.fetchone()
        my_string_title = str(my_string_title)
        my_string_title = my_string_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM circlegtable")
        my_string_subtitle = mycursor.fetchone()
        my_string_subtitle = str(my_string_subtitle)
        my_string_subtitle = my_string_subtitle.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Text description` FROM circlegtable")
        my_string_description = mycursor.fetchone()
        my_string_description = str(my_string_description)
        my_string_description = my_string_description.strip("(").strip(")").strip(",").strip("'")
            
            # Ensure an object is selected
        if bpy.context.selected_objects:
            selected_obj = bpy.context.active_object  # Get the active (selected) object

            if selected_obj.type == 'MESH':
                mesh_name = selected_obj.name

                # Check if the selected object has modifiers
                if selected_obj.modifiers:
                    modifier_name = selected_obj.modifiers.active.name  # Get the name of the active modifier



                    selected_obj.modifiers[modifier_name]["Input_11"] = my_float_maxvalue
                    selected_obj.modifiers[modifier_name]["Input_10"] = my_float_minvalue
                    selected_obj.modifiers[modifier_name]["Input_2"] = my_float_percentage
                    selected_obj.modifiers[modifier_name]["Input_22"] = str(my_string_title)
                    selected_obj.modifiers[modifier_name]["Input_23"] = str(my_string_subtitle)
                    selected_obj.modifiers[modifier_name]["Input_16"] = str(my_string_description)
        

                    print(f"Set modifier input for object '{mesh_name}' and modifier '{modifier_name}'.")
                else:
                    print(f"Selected object '{mesh_name}' has no modifiers.")
            else:
                print("Selected object is not a mesh.")
        else:
            print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}

class MyoperatorPGsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorpgsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringpiegraph
        )
            
        mycursor = mydb.cursor()

        mycursor.execute("SELECT `Max Value` FROM piegtable")
        maxvalue = mycursor.fetchone()
        my_floatpie_maxvalue = float(maxvalue[0])

        mycursor.execute("SELECT `Min Value` FROM piegtable")
        minvalue = mycursor.fetchone()
        my_floatpie_minvalue = float(minvalue[0])

        mycursor.execute("SELECT `Value` FROM piegtable")
        value = mycursor.fetchone()
        my_floatpie_value = float(value[0])
        my_floatpie_percentage = my_floatpie_value/my_floatpie_maxvalue

        mycursor.execute("SELECT `TITLE (in caps)` FROM piegtable")
        my_stringpie_title = mycursor.fetchone()
        my_stringpie_title = str(my_stringpie_title)
        my_stringpie_title = my_stringpie_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM piegtable")
        my_stringpie_subtitle = mycursor.fetchone()
        my_stringpie_subtitle = str(my_stringpie_subtitle)
        my_stringpie_subtitle = my_stringpie_subtitle.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Text description` FROM piegtable")
        my_stringpie_description = mycursor.fetchone()
        my_stringpie_description = str(my_stringpie_description)
        my_stringpie_description = my_stringpie_description.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_pg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_pg.type == 'MESH':
                        mesh_name_pg = selected_obj_pg.name

                        # Check if the selected object has modifiers
                        if selected_obj_pg.modifiers:
                                modifier_name_pg = selected_obj_pg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_pg.modifiers[modifier_name_pg]["Input_11"] = my_floatpie_maxvalue
                                selected_obj_pg.modifiers[modifier_name_pg]["Input_10"] = my_floatpie_minvalue
                                selected_obj_pg.modifiers[modifier_name_pg]["Input_2"] = my_floatpie_percentage
                                selected_obj_pg.modifiers[modifier_name_pg]["Input_15"] = str(my_stringpie_title)
                                selected_obj_pg.modifiers[modifier_name_pg]["Input_17"] = str(my_stringpie_subtitle)
                                selected_obj_pg.modifiers[modifier_name_pg]["Input_19"] = str(my_stringpie_description)

                                print(f"Set modifier input for object '{mesh_name_pg}' and modifier '{modifier_name_pg}'.")
                        else:
                                print(f"Selected object '{mesh_name_pg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}


    
class Myoperator23CGsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorcg23sql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringcircle23_graph
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of Graphs` FROM circle23gtable")
        numberofgraphs23cg = mycursor.fetchone()
        my_float23cg_numberofgraphs = int(numberofgraphs23cg[0])
        
        mycursor.execute("SELECT `Wheel Text` FROM circle23gtable")
        my_string23cg_wheeltext = mycursor.fetchall()
        my_string23cg_wheeltext1 = str(my_string23cg_wheeltext[0])
        my_string23cg_wheeltext2 = str(my_string23cg_wheeltext[1])
        my_string23cg_wheeltext3 = str(my_string23cg_wheeltext[2])
        my_string23cg_wheeltext1 = my_string23cg_wheeltext1.strip("(").strip(")").strip(",").strip("'")
        my_string23cg_wheeltext2 = my_string23cg_wheeltext2.strip("(").strip(")").strip(",").strip("'")
        my_string23cg_wheeltext3 = my_string23cg_wheeltext3.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Max Value` FROM circle23gtable")
        maxvalue = mycursor.fetchone()
        my_float23cg_maxvalue = float(maxvalue[0])

        mycursor.execute("SELECT `Value` FROM circle23gtable")
        value23cg = mycursor.fetchall()
        value23cg1, value23cg2, value23cg3 = value23cg
        value23cg1 = str(value23cg1)
        value23cg2 = str(value23cg2)
        value23cg3 = str(value23cg3)        
        value23cg1 = value23cg1.strip("(").strip(")").strip(",").strip("'")
        value23cg1 = float(value23cg1)
        value23cg2 = value23cg2.strip("(").strip(")").strip(",").strip("'")
        value23cg2 = float(value23cg2)
        value23cg3 = value23cg3.strip("(").strip(")").strip(",").strip("'")
        value23cg3 = float(value23cg3)
        my_float23cg_value1 = value23cg1/my_float23cg_maxvalue
        my_float23cg_value2 = value23cg2/my_float23cg_maxvalue
        my_float23cg_value3 = value23cg3/my_float23cg_maxvalue

        mycursor.execute("SELECT `Min Value` FROM circle23gtable")
        minvalue = mycursor.fetchone()
        my_float23cg_minvalue = float(minvalue[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM circle23gtable")
        my_string23cg_title = mycursor.fetchone()
        my_string23cg_title = str(my_string23cg_title)
        my_string23cg_title = my_string23cg_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM circle23gtable")
        my_string23cg_subtitle = mycursor.fetchone()
        my_string23cg_subtitle = str(my_string23cg_subtitle)
        my_string23cg_subtitle = my_string23cg_subtitle.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Text description` FROM circle23gtable")
        my_string23cg_textdescription = mycursor.fetchone()
        my_string23cg_textdescription = str(my_string23cg_textdescription)
        my_string23cg_textdescription = my_string23cg_textdescription.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_23cg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_23cg.type == 'MESH':
                        mesh_name_23cg = selected_obj_23cg.name

                        # Check if the selected object has modifiers
                        if selected_obj_23cg.modifiers:
                                modifier_name_23cg = selected_obj_23cg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_31"] = my_float23cg_numberofgraphs
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_39"] = my_string23cg_wheeltext1
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_40"] = my_string23cg_wheeltext2
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_38"] = my_string23cg_wheeltext3
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_2"] = my_float23cg_value1
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_41"] = my_float23cg_value2
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_42"] = my_float23cg_value3
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_10"] = my_float23cg_minvalue
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_11"] = my_float23cg_maxvalue
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_22"] = my_string23cg_title
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_23"] = my_string23cg_subtitle
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_16"] = my_string23cg_textdescription

                                print(f"Set modifier input for object '{mesh_name_23cg}' and modifier '{modifier_name_23cg}'.")
                        else:
                                print(f"Selected object '{mesh_name_23cg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}

    
class Myoperatorcandlesql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorcandlesql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        candle_object = bpy.context.view_layer.objects.active
        candle_object_name = candle_object.name
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringcandlestick_graph
        )
            
        mycursor = mydb.cursor(buffered=True)
        
        mycursor.execute("SELECT `Number of Points` FROM candlestickgtable")
        numberofpointscandleg = mycursor.fetchone()
        my_floatcandleg_numberofpoints = int(numberofpointscandleg[0])

        mycursor.execute("SELECT `Point High` FROM candlestickgtable")
        pointhighvaluecandleg = mycursor.fetchall()
        # Convert the fetched data to a list of floats in one line
        pointhighvaluecandleg = [float(str(point).strip("(), '")) for point in pointhighvaluecandleg]

        mycursor.execute("SELECT `Point Open` FROM candlestickgtable")
        pointopenvaluecandleg = mycursor.fetchall()
        # Convert the fetched data to a list of floats in one line
        pointopenvaluecandleg = [float(str(point).strip("(), '")) for point in pointopenvaluecandleg]

        mycursor.execute("SELECT `Point Close` FROM candlestickgtable")
        pointclosevaluecandleg = mycursor.fetchall()
        # Convert the fetched data to a list of floats in one line
        pointclosevaluecandleg = [float(str(point).strip("(), '")) for point in pointclosevaluecandleg]

        mycursor.execute("SELECT `Point Low` FROM candlestickgtable")
        pointlowvaluecandleg = mycursor.fetchall()
        # Convert the fetched data to a list of floats in one line
        pointlowvaluecandleg = [float(str(point).strip("(), '")) for point in pointlowvaluecandleg]

        mycursor.execute("SELECT `Point Text` FROM candlestickgtable")
        my_stringcandleg_pointtext = mycursor.fetchall()
        pointtext_list = [str(item).strip("(").strip(")").strip(",").strip("'") for item in my_stringcandleg_pointtext]

        mycursor.execute("SELECT `Min Value` FROM candlestickgtable")
        minpointvalue = mycursor.fetchone()
        my_floatcandleg_minpointvalue = float(minpointvalue[0])
        
        mycursor.execute("SELECT `Max Value` FROM candlestickgtable")
        maxpointvalue = mycursor.fetchone()
        my_floatcandleg_maxpointvalue = float(maxpointvalue[0])

        mycursor.execute("SELECT `Decimals` FROM candlestickgtable")
        decvalue = mycursor.fetchone()
        my_floatcandleg_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `Range Numbers` FROM candlestickgtable")
        rangenumber = mycursor.fetchone()
        my_floatcandleg_rangenumber = int(rangenumber[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM candlestickgtable")
        my_stringcandleg_title = mycursor.fetchone()
        my_stringcandleg_title = str(my_stringcandleg_title)
        my_stringcandleg_title = my_stringcandleg_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM candlestickgtable")
        my_stringcandleg_subtitle = mycursor.fetchone()
        my_stringcandleg_subtitle = str(my_stringcandleg_subtitle)
        my_stringcandleg_subtitle = my_stringcandleg_subtitle.strip("(").strip(")").strip(",").strip("'")
            
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_3"] = my_floatcandleg_numberofpoints
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_12"] = my_floatcandleg_minpointvalue
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_13"] = my_floatcandleg_maxpointvalue
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_14"] = my_floatcandleg_decvalue
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_15"] = my_floatcandleg_rangenumber


        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_4"] = pointtext_list[0]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_5"] = pointtext_list[1]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_6"] = pointtext_list[2]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_7"] = pointtext_list[3]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_8"] = pointtext_list[4]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_9"] = pointtext_list[5]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_10"] = pointtext_list[6]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_11"] = pointtext_list[7]
        
        cube_objecttextcandle = bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]
        for i in range(8, 32):
            input_index = i - 8 + 71
            input_name = f"Input_{input_index:02d}"
            cube_objecttextcandle[input_name] = pointtext_list[i]
        
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_38"] = pointhighvaluecandleg[0]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_103"] = pointhighvaluecandleg[1] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_107"] = pointhighvaluecandleg[2]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_168"] = pointhighvaluecandleg[3] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_172"] = pointhighvaluecandleg[4]          
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_176"] = pointhighvaluecandleg[5]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_99"] = pointhighvaluecandleg[6]
        for i in range(7, 32):
            input_numpointhighvaluecandleg = 180 + (i - 7) * 4
            bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_" + str(input_numpointhighvaluecandleg)] = pointhighvaluecandleg[i]  
            
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_97"] = pointopenvaluecandleg[0]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_104"] = pointopenvaluecandleg[1] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_108"] = pointopenvaluecandleg[2]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_169"] = pointopenvaluecandleg[3] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_173"] = pointopenvaluecandleg[4]          
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_177"] = pointopenvaluecandleg[5]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_100"] = pointopenvaluecandleg[6]
        for i in range(7, 32):
            input_numpointopenvaluecandleg = 181 + (i - 7) * 4
            bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_" + str(input_numpointopenvaluecandleg)] = pointopenvaluecandleg[i]
            
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_98"] = pointclosevaluecandleg[0]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_105"] = pointclosevaluecandleg[1] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_109"] = pointclosevaluecandleg[2]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_170"] = pointclosevaluecandleg[3] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_174"] = pointclosevaluecandleg[4]          
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_178"] = pointclosevaluecandleg[5]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_101"] = pointclosevaluecandleg[6]
        for i in range(7, 32):
            input_numpointclosevaluecandleg = 182 + (i - 7) * 4
            bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_" + str(input_numpointclosevaluecandleg)] = pointclosevaluecandleg[i]
            
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_96"] = pointlowvaluecandleg[0]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_106"] = pointlowvaluecandleg[1] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_110"] = pointlowvaluecandleg[2]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_171"] = pointlowvaluecandleg[3] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_175"] = pointlowvaluecandleg[4]          
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_179"] = pointlowvaluecandleg[5]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_102"] = pointlowvaluecandleg[6]
        for i in range(7, 32):
            input_numpointlowvaluecandleg = 183 + (i - 7) * 4
            bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_" + str(input_numpointlowvaluecandleg)] = pointlowvaluecandleg[i]    


        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_23"] = my_stringcandleg_title
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_22"] = my_stringcandleg_subtitle
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class Myoperator23PGsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorpg23sql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringpie23_graph
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of Graphs` FROM pie23gtable")
        numberofgraphs23pg = mycursor.fetchone()
        my_float23pg_numberofgraphs = int(numberofgraphs23pg[0])
        
        mycursor.execute("SELECT `Wheel Text` FROM pie23gtable")
        my_string23pg_wheeltext = mycursor.fetchall()
        my_string23pg_wheeltext1 = str(my_string23pg_wheeltext[0])
        my_string23pg_wheeltext2 = str(my_string23pg_wheeltext[1])
        my_string23pg_wheeltext3 = str(my_string23pg_wheeltext[2])
        my_string23pg_wheeltext1 = my_string23pg_wheeltext1.strip("(").strip(")").strip(",").strip("'")
        my_string23pg_wheeltext2 = my_string23pg_wheeltext2.strip("(").strip(")").strip(",").strip("'")
        my_string23pg_wheeltext3 = my_string23pg_wheeltext3.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Max Value` FROM pie23gtable")
        maxvalue = mycursor.fetchone()
        my_float23pg_maxvalue = float(maxvalue[0])

        mycursor.execute("SELECT `Value` FROM pie23gtable")
        value23pg = mycursor.fetchall()
        value23pg1, value23pg2, value23pg3 = value23pg
        value23pg1 = str(value23pg1)
        value23pg2 = str(value23pg2)
        value23pg3 = str(value23pg3)        
        value23pg1 = value23pg1.strip("(").strip(")").strip(",").strip("'")
        value23pg1 = float(value23pg1)
        value23pg2 = value23pg2.strip("(").strip(")").strip(",").strip("'")
        value23pg2 = float(value23pg2)
        value23pg3 = value23pg3.strip("(").strip(")").strip(",").strip("'")
        value23pg3 = float(value23pg3)
        my_float23pg_value1 = value23pg1/my_float23pg_maxvalue
        my_float23pg_value2 = value23pg2/my_float23pg_maxvalue
        my_float23pg_value3 = value23pg3/my_float23pg_maxvalue

        mycursor.execute("SELECT `Min Value` FROM pie23gtable")
        minvalue = mycursor.fetchone()
        my_float23pg_minvalue = float(minvalue[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM pie23gtable")
        my_string23pg_title = mycursor.fetchone()
        my_string23pg_title = str(my_string23pg_title)
        my_string23pg_title = my_string23pg_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM pie23gtable")
        my_string23pg_subtitle = mycursor.fetchone()
        my_string23pg_subtitle = str(my_string23pg_subtitle)
        my_string23pg_subtitle = my_string23pg_subtitle.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Text description` FROM pie23gtable")
        my_string23pg_textdescription = mycursor.fetchone()
        my_string23pg_textdescription = str(my_string23pg_textdescription)
        my_string23pg_textdescription = my_string23pg_textdescription.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_23pg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_23pg.type == 'MESH':
                        mesh_name_23pg = selected_obj_23pg.name

                        # Check if the selected object has modifiers
                        if selected_obj_23pg.modifiers:
                                modifier_name_23pg = selected_obj_23pg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_26"] = my_float23pg_numberofgraphs
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_31"] = my_string23pg_wheeltext1
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_32"] = my_string23pg_wheeltext2
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_33"] = my_string23pg_wheeltext3
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_2"] = my_float23pg_value1
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_27"] = my_float23pg_value2
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_28"] = my_float23pg_value3
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_10"] = my_float23pg_minvalue
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_11"] = my_float23pg_maxvalue
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_15"] = my_string23pg_title
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_17"] = my_string23pg_subtitle
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_19"] = my_string23pg_textdescription

                                print(f"Set modifier input for object '{mesh_name_23pg}' and modifier '{modifier_name_23pg}'.")
                        else:
                                print(f"Selected object '{mesh_name_23pg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}

    
class MyoperatorHBGsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorhbgsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringhorizontal_bar_graph
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of bars (1-10)` FROM horizontal_bargtable")
        numberofbarshbg = mycursor.fetchone()
        my_floathbg_numberofbars = int(numberofbarshbg[0])
        
        mycursor.execute("SELECT `Bar Text` FROM horizontal_bargtable")
        my_stringhbg_bartext = mycursor.fetchall()
        my_stringhbg_bartext1 = str(my_stringhbg_bartext[0])
        my_stringhbg_bartext2 = str(my_stringhbg_bartext[1])
        my_stringhbg_bartext3 = str(my_stringhbg_bartext[2])
        my_stringhbg_bartext4 = str(my_stringhbg_bartext[3])
        my_stringhbg_bartext5 = str(my_stringhbg_bartext[4])
        my_stringhbg_bartext6 = str(my_stringhbg_bartext[5])
        my_stringhbg_bartext7 = str(my_stringhbg_bartext[6])
        my_stringhbg_bartext8 = str(my_stringhbg_bartext[7])
        my_stringhbg_bartext9 = str(my_stringhbg_bartext[8])
        my_stringhbg_bartext10 = str(my_stringhbg_bartext[9])
        my_stringhbg_bartext1 = my_stringhbg_bartext1.strip("(").strip(")").strip(",").strip("'")
        my_stringhbg_bartext2 = my_stringhbg_bartext2.strip("(").strip(")").strip(",").strip("'")
        my_stringhbg_bartext3 = my_stringhbg_bartext3.strip("(").strip(")").strip(",").strip("'")
        my_stringhbg_bartext4 = my_stringhbg_bartext4.strip("(").strip(")").strip(",").strip("'")
        my_stringhbg_bartext5 = my_stringhbg_bartext5.strip("(").strip(")").strip(",").strip("'")
        my_stringhbg_bartext6 = my_stringhbg_bartext6.strip("(").strip(")").strip(",").strip("'")
        my_stringhbg_bartext7 = my_stringhbg_bartext7.strip("(").strip(")").strip(",").strip("'")
        my_stringhbg_bartext8 = my_stringhbg_bartext8.strip("(").strip(")").strip(",").strip("'")
        my_stringhbg_bartext9 = my_stringhbg_bartext9.strip("(").strip(")").strip(",").strip("'")
        my_stringhbg_bartext10 = my_stringhbg_bartext10.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Max Value` FROM horizontal_bargtable")
        maxvalue = mycursor.fetchone()
        my_floathbg_maxvalue = float(maxvalue[0])

        mycursor.execute("SELECT `Bar Value` FROM horizontal_bargtable")
        valuehbg = mycursor.fetchall()
        valuehbg1, valuehbg2, valuehbg3, valuehbg4, valuehbg5, valuehbg6, valuehbg7, valuehbg8, valuehbg9, valuehbg10 = valuehbg
        valuehbg1 = str(valuehbg1)
        valuehbg2 = str(valuehbg2)
        valuehbg3 = str(valuehbg3)
        valuehbg4 = str(valuehbg4)    
        valuehbg5 = str(valuehbg5)
        valuehbg6 = str(valuehbg6)
        valuehbg7 = str(valuehbg7)
        valuehbg8 = str(valuehbg8)
        valuehbg9 = str(valuehbg9)
        valuehbg10 = str(valuehbg10)         
        valuehbg1 = valuehbg1.strip("(").strip(")").strip(",").strip("'")
        valuehbg1 = float(valuehbg1)
        valuehbg2 = valuehbg2.strip("(").strip(")").strip(",").strip("'")
        valuehbg2 = float(valuehbg2)
        valuehbg3 = valuehbg3.strip("(").strip(")").strip(",").strip("'")
        valuehbg3 = float(valuehbg3)
        valuehbg4 = valuehbg4.strip("(").strip(")").strip(",").strip("'")
        valuehbg4 = float(valuehbg4)
        valuehbg5 = valuehbg5.strip("(").strip(")").strip(",").strip("'")
        valuehbg5 = float(valuehbg5)
        valuehbg6 = valuehbg6.strip("(").strip(")").strip(",").strip("'")
        valuehbg6 = float(valuehbg6)
        valuehbg7 = valuehbg7.strip("(").strip(")").strip(",").strip("'")
        valuehbg7 = float(valuehbg7)
        valuehbg8 = valuehbg8.strip("(").strip(")").strip(",").strip("'")
        valuehbg8 = float(valuehbg8)
        valuehbg9 = valuehbg9.strip("(").strip(")").strip(",").strip("'")
        valuehbg9 = float(valuehbg9)
        valuehbg10 = valuehbg10.strip("(").strip(")").strip(",").strip("'")
        valuehbg10 = float(valuehbg10)


        mycursor.execute("SELECT `Min Value` FROM horizontal_bargtable")
        minvalue = mycursor.fetchone()
        my_floathbg_minvalue = float(minvalue[0])

        mycursor.execute("SELECT `Decimals` FROM horizontal_bargtable")
        decvalue = mycursor.fetchone()
        my_floathbg_decvalue = float(decvalue[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM horizontal_bargtable")
        my_stringhbg_title = mycursor.fetchone()
        my_stringhbg_title = str(my_stringhbg_title)
        my_stringhbg_title = my_stringhbg_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM horizontal_bargtable")
        my_stringhbg_subtitle = mycursor.fetchone()
        my_stringhbg_subtitle = str(my_stringhbg_subtitle)
        my_stringhbg_subtitle = my_stringhbg_subtitle.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Text for total` FROM horizontal_bargtable")
        my_stringhbg_textfortotal = mycursor.fetchone()
        my_stringhbg_textfortotal = str(my_stringhbg_textfortotal)
        my_stringhbg_textfortotal = my_stringhbg_textfortotal.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_hbg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_hbg.type == 'MESH':
                        mesh_name_hbg = selected_obj_hbg.name

                        # Check if the selected object has modifiers
                        if selected_obj_hbg.modifiers:
                                modifier_name_hbg = selected_obj_hbg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_36"] = my_floathbg_numberofbars
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_2"] = my_stringhbg_bartext1
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_3"] = my_stringhbg_bartext2
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_4"] = my_stringhbg_bartext3
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_5"] = my_stringhbg_bartext4
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_10"] = my_stringhbg_bartext5
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_11"] = my_stringhbg_bartext6
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_12"] = my_stringhbg_bartext7
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_13"] = my_stringhbg_bartext8
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_14"] = my_stringhbg_bartext9
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_15"] = my_stringhbg_bartext10
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_14"] = valuehbg1
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_15"] = valuehbg2
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_16"] = valuehbg3
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_17"] = valuehbg4
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_16"] = valuehbg5
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_17"] = valuehbg6
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_18"] = valuehbg7
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_19"] = valuehbg8
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_20"] = valuehbg9
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_21"] = valuehbg10
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_10"] = my_floathbg_minvalue
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_11"] = my_floathbg_maxvalue
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_7"] = my_stringhbg_title
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_8"] = my_stringhbg_subtitle
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_6"] = my_stringhbg_textfortotal

                                print(f"Set modifier input for object '{mesh_name_hbg}' and modifier '{modifier_name_hbg}'.")
                        else:
                                print(f"Selected object '{mesh_name_hbg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}

class MyoperatorHBGOsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorhbgosql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringhorizontal_bar_graph_opposing
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of bars (1-10)` FROM horizontal_bar_opposing_gtable")
        numberofbarshbgo = mycursor.fetchone()
        my_floathbgo_numberofbars = int(numberofbarshbgo[0])
        
        mycursor.execute("SELECT `Bar Text` FROM horizontal_bar_opposing_gtable")
        my_stringhbgo_bartext = mycursor.fetchall()
        my_stringhbgo_bartext1 = str(my_stringhbgo_bartext[0])
        my_stringhbgo_bartext2 = str(my_stringhbgo_bartext[1])
        my_stringhbgo_bartext3 = str(my_stringhbgo_bartext[2])
        my_stringhbgo_bartext4 = str(my_stringhbgo_bartext[3])
        my_stringhbgo_bartext5 = str(my_stringhbgo_bartext[4])
        my_stringhbgo_bartext6 = str(my_stringhbgo_bartext[5])
        my_stringhbgo_bartext7 = str(my_stringhbgo_bartext[6])
        my_stringhbgo_bartext8 = str(my_stringhbgo_bartext[7])
        my_stringhbgo_bartext9 = str(my_stringhbgo_bartext[8])
        my_stringhbgo_bartext10 = str(my_stringhbgo_bartext[9])
        my_stringhbgo_bartext1 = my_stringhbgo_bartext1.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgo_bartext2 = my_stringhbgo_bartext2.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgo_bartext3 = my_stringhbgo_bartext3.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgo_bartext4 = my_stringhbgo_bartext4.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgo_bartext5 = my_stringhbgo_bartext5.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgo_bartext6 = my_stringhbgo_bartext6.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgo_bartext7 = my_stringhbgo_bartext7.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgo_bartext8 = my_stringhbgo_bartext8.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgo_bartext9 = my_stringhbgo_bartext9.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgo_bartext10 = my_stringhbgo_bartext10.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Max Value` FROM horizontal_bar_opposing_gtable")
        maxvalue = mycursor.fetchone()
        my_floathbgo_maxvalue = float(maxvalue[0])

        mycursor.execute("SELECT `Bar Value A` FROM horizontal_bar_opposing_gtable")
        valueahbgo = mycursor.fetchall()
        valueahbgo1, valueahbgo2, valueahbgo3, valueahbgo4, valueahbgo5, valueahbgo6, valueahbgo7, valueahbgo8, valueahbgo9, valueahbgo10  = valueahbgo
        valueahbgo1 = str(valueahbgo1)
        valueahbgo2 = str(valueahbgo2)
        valueahbgo3 = str(valueahbgo3)
        valueahbgo4 = str(valueahbgo4)
        valueahbgo5 = str(valueahbgo5)
        valueahbgo6 = str(valueahbgo6)
        valueahbgo7 = str(valueahbgo7)
        valueahbgo8 = str(valueahbgo8)  
        valueahbgo9 = str(valueahbgo9)    
        valueahbgo10 = str(valueahbgo10)      
        valueahbgo1 = valueahbgo1.strip("(").strip(")").strip(",").strip("'")
        valueahbgo1 = float(valueahbgo1)
        valueahbgo2 = valueahbgo2.strip("(").strip(")").strip(",").strip("'")
        valueahbgo2 = float(valueahbgo2)
        valueahbgo3 = valueahbgo3.strip("(").strip(")").strip(",").strip("'")
        valueahbgo3 = float(valueahbgo3)
        valueahbgo4 = valueahbgo4.strip("(").strip(")").strip(",").strip("'")
        valueahbgo4 = float(valueahbgo4)
        valueahbgo5 = valueahbgo5.strip("(").strip(")").strip(",").strip("'")
        valueahbgo5 = float(valueahbgo5)
        valueahbgo6 = valueahbgo6.strip("(").strip(")").strip(",").strip("'")
        valueahbgo6 = float(valueahbgo6)
        valueahbgo7 = valueahbgo7.strip("(").strip(")").strip(",").strip("'")
        valueahbgo7 = float(valueahbgo7)
        valueahbgo8 = valueahbgo8.strip("(").strip(")").strip(",").strip("'")
        valueahbgo8 = float(valueahbgo8)
        valueahbgo9 = valueahbgo9.strip("(").strip(")").strip(",").strip("'")
        valueahbgo9 = float(valueahbgo9)
        valueahbgo10 = valueahbgo10.strip("(").strip(")").strip(",").strip("'")
        valueahbgo10 = float(valueahbgo10)

        mycursor.execute("SELECT `Bar Value B` FROM horizontal_bar_opposing_gtable")
        valuebhbgo = mycursor.fetchall()
        valuebhbgo1, valuebhbgo2, valuebhbgo3, valuebhbgo4, valuebhbgo5, valuebhbgo6, valuebhbgo7, valuebhbgo8, valuebhbgo9, valuebhbgo10 = valuebhbgo
        valuebhbgo1 = str(valuebhbgo1)
        valuebhbgo2 = str(valuebhbgo2)
        valuebhbgo3 = str(valuebhbgo3)
        valuebhbgo4 = str(valuebhbgo4)  
        valuebhbgo5 = str(valuebhbgo5)
        valuebhbgo6 = str(valuebhbgo6)
        valuebhbgo7 = str(valuebhbgo7)
        valuebhbgo8 = str(valuebhbgo8) 
        valuebhbgo9 = str(valuebhbgo9)
        valuebhbgo10 = str(valuebhbgo10)         
        valuebhbgo1 = valuebhbgo1.strip("(").strip(")").strip(",").strip("'")
        valuebhbgo1 = float(valuebhbgo1)
        valuebhbgo2 = valuebhbgo2.strip("(").strip(")").strip(",").strip("'")
        valuebhbgo2 = float(valuebhbgo2)
        valuebhbgo3 = valuebhbgo3.strip("(").strip(")").strip(",").strip("'")
        valuebhbgo3 = float(valuebhbgo3)
        valuebhbgo4 = valuebhbgo4.strip("(").strip(")").strip(",").strip("'")
        valuebhbgo4 = float(valuebhbgo4)
        valuebhbgo5 = valuebhbgo5.strip("(").strip(")").strip(",").strip("'")
        valuebhbgo5 = float(valuebhbgo5)
        valuebhbgo6 = valuebhbgo6.strip("(").strip(")").strip(",").strip("'")
        valuebhbgo6 = float(valuebhbgo6)
        valuebhbgo7 = valuebhbgo7.strip("(").strip(")").strip(",").strip("'")
        valuebhbgo7 = float(valuebhbgo7)
        valuebhbgo8 = valuebhbgo8.strip("(").strip(")").strip(",").strip("'")
        valuebhbgo8 = float(valuebhbgo8)
        valuebhbgo9 = valuebhbgo9.strip("(").strip(")").strip(",").strip("'")
        valuebhbgo9 = float(valuebhbgo9)
        valuebhbgo10 = valuebhbgo10.strip("(").strip(")").strip(",").strip("'")
        valuebhbgo10 = float(valuebhbgo10)

        mycursor.execute("SELECT `Min Value` FROM horizontal_bar_opposing_gtable")
        minvalue = mycursor.fetchone()
        my_floathbgo_minvalue = float(minvalue[0])

        mycursor.execute("SELECT `Decimals` FROM horizontal_bar_opposing_gtable")
        decvalue = mycursor.fetchone()
        my_floathbgo_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM horizontal_bar_opposing_gtable")
        my_stringhbgo_title = mycursor.fetchone()
        my_stringhbgo_title = str(my_stringhbgo_title)
        my_stringhbgo_title = my_stringhbgo_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM horizontal_bar_opposing_gtable")
        my_stringhbgo_subtitle = mycursor.fetchone()
        my_stringhbgo_subtitle = str(my_stringhbgo_subtitle)
        my_stringhbgo_subtitle = my_stringhbgo_subtitle.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Legend Text` FROM horizontal_bar_opposing_gtable")
        my_stringhbgo_legendtext = mycursor.fetchall()
        my_stringhbgo_legendtext1 = str(my_stringhbgo_legendtext[0])
        my_stringhbgo_legendtext2 = str(my_stringhbgo_legendtext[1])
        my_stringhbgo_legendtext1 = my_stringhbgo_legendtext1.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgo_legendtext2 = my_stringhbgo_legendtext2.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_hbgo = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_hbgo.type == 'MESH':
                        mesh_name_hbgo = selected_obj_hbgo.name

                        # Check if the selected object has modifiers
                        if selected_obj_hbgo.modifiers:
                                modifier_name_hbgo = selected_obj_hbgo.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_36"] = my_floathbgo_numberofbars
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_2"] = my_stringhbgo_bartext1
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_3"] = my_stringhbgo_bartext2
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_4"] = my_stringhbgo_bartext3
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_5"] = my_stringhbgo_bartext4
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_10"] = my_stringhbgo_bartext5
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_11"] = my_stringhbgo_bartext6
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_12"] = my_stringhbgo_bartext7
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_13"] = my_stringhbgo_bartext8
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_14"] = my_stringhbgo_bartext9
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_15"] = my_stringhbgo_bartext10
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_16"] = valueahbgo1
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_17"] = valueahbgo2
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_19"] = valueahbgo3
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_20"] = valueahbgo4
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_21"] = valueahbgo5
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_22"] = valueahbgo6
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_23"] = valueahbgo7
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_24"] = valueahbgo8
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_25"] = valueahbgo9
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_26"] = valueahbgo10
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_14"] = valuebhbgo1
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_15"] = valuebhbgo2
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_16"] = valuebhbgo3
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_17"] = valuebhbgo4
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_28"] = valuebhbgo5
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_29"] = valuebhbgo6
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_18"] = valuebhbgo7
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_30"] = valuebhbgo8
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_31"] = valuebhbgo9
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_27"] = valuebhbgo10
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_10"] = my_floathbgo_minvalue
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_11"] = my_floathbgo_maxvalue
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_12"] = my_floathbgo_decvalue
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_7"] = my_stringhbgo_title
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_8"] = my_stringhbgo_subtitle
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_6"] = my_stringhbgo_legendtext1
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_34"] = my_stringhbgo_legendtext2

                                print(f"Set modifier input for object '{mesh_name_hbgo}' and modifier '{modifier_name_hbgo}'.")
                        else:
                                print(f"Selected object '{mesh_name_hbgo}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorHBGSsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorhshbgsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringhorizontalstacked_bar_graph_comparison
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of bars (1-10)` FROM horizontal_bar_stacked_gtable")
        numberofbarshbgs = mycursor.fetchone()
        my_floathbgs_numberofbars = int(numberofbarshbgs[0])

        mycursor.execute("SELECT `Number of stacks (2-3)` FROM horizontal_bar_stacked_gtable")
        numberofstacksshbgs = mycursor.fetchone()
        my_floathbgs_numberofstacks = int(numberofstacksshbgs[0])
        
        mycursor.execute("SELECT `Bar Text` FROM horizontal_bar_stacked_gtable")
        my_stringhbgs_bartext = mycursor.fetchall()
        my_stringhbgs_bartext1 = str(my_stringhbgs_bartext[0])
        my_stringhbgs_bartext2 = str(my_stringhbgs_bartext[1])
        my_stringhbgs_bartext3 = str(my_stringhbgs_bartext[2])
        my_stringhbgs_bartext4 = str(my_stringhbgs_bartext[3])
        my_stringhbgs_bartext5 = str(my_stringhbgs_bartext[4])
        my_stringhbgs_bartext6 = str(my_stringhbgs_bartext[5])
        my_stringhbgs_bartext7 = str(my_stringhbgs_bartext[6])
        my_stringhbgs_bartext8 = str(my_stringhbgs_bartext[7])
        my_stringhbgs_bartext9 = str(my_stringhbgs_bartext[8])
        my_stringhbgs_bartext10 = str(my_stringhbgs_bartext[9])
        my_stringhbgs_bartext1 = my_stringhbgs_bartext1.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgs_bartext2 = my_stringhbgs_bartext2.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgs_bartext3 = my_stringhbgs_bartext3.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgs_bartext4 = my_stringhbgs_bartext4.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgs_bartext5 = my_stringhbgs_bartext5.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgs_bartext6 = my_stringhbgs_bartext6.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgs_bartext7 = my_stringhbgs_bartext7.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgs_bartext8 = my_stringhbgs_bartext8.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgs_bartext9 = my_stringhbgs_bartext9.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgs_bartext10 = my_stringhbgs_bartext10.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Max Value` FROM horizontal_bar_stacked_gtable")
        maxvalue = mycursor.fetchone()
        my_floathbgs_maxvalue = float(maxvalue[0])

        mycursor.execute("SELECT `Bar Value A` FROM horizontal_bar_stacked_gtable")
        valueahbgs = mycursor.fetchall()
        valueahbgs1, valueahbgs2, valueahbgs3, valueahbgs4, valueahbgs5, valueahbgs6, valueahbgs7, valueahbgs8, valueahbgs9, valueahbgs10  = valueahbgs
        valueahbgs1 = str(valueahbgs1)
        valueahbgs2 = str(valueahbgs2)
        valueahbgs3 = str(valueahbgs3)
        valueahbgs4 = str(valueahbgs4)
        valueahbgs5 = str(valueahbgs5)
        valueahbgs6 = str(valueahbgs6)
        valueahbgs7 = str(valueahbgs7)
        valueahbgs8 = str(valueahbgs8)  
        valueahbgs9 = str(valueahbgs9)
        valueahbgs10 = str(valueahbgs10)            
        valueahbgs1 = valueahbgs1.strip("(").strip(")").strip(",").strip("'")
        valueahbgs1 = float(valueahbgs1)
        valueahbgs2 = valueahbgs2.strip("(").strip(")").strip(",").strip("'")
        valueahbgs2 = float(valueahbgs2)
        valueahbgs3 = valueahbgs3.strip("(").strip(")").strip(",").strip("'")
        valueahbgs3 = float(valueahbgs3)
        valueahbgs4 = valueahbgs4.strip("(").strip(")").strip(",").strip("'")
        valueahbgs4 = float(valueahbgs4)
        valueahbgs5 = valueahbgs5.strip("(").strip(")").strip(",").strip("'")
        valueahbgs5 = float(valueahbgs5)
        valueahbgs6 = valueahbgs6.strip("(").strip(")").strip(",").strip("'")
        valueahbgs6 = float(valueahbgs6)
        valueahbgs7 = valueahbgs7.strip("(").strip(")").strip(",").strip("'")
        valueahbgs7 = float(valueahbgs7)
        valueahbgs8 = valueahbgs8.strip("(").strip(")").strip(",").strip("'")
        valueahbgs8 = float(valueahbgs8)
        valueahbgs9 = valueahbgs9.strip("(").strip(")").strip(",").strip("'")
        valueahbgs9 = float(valueahbgs9)
        valueahbgs10 = valueahbgs10.strip("(").strip(")").strip(",").strip("'")
        valueahbgs10 = float(valueahbgs10)

        mycursor.execute("SELECT `Bar Value B` FROM horizontal_bar_stacked_gtable")
        valuebhbgs = mycursor.fetchall()
        valuebhbgs1, valuebhbgs2, valuebhbgs3, valuebhbgs4, valuebhbgs5, valuebhbgs6, valuebhbgs7, valuebhbgs8, valuebhbgs9, valuebhbgs10 = valuebhbgs
        valuebhbgs1 = str(valuebhbgs1)
        valuebhbgs2 = str(valuebhbgs2)
        valuebhbgs3 = str(valuebhbgs3)
        valuebhbgs4 = str(valuebhbgs4)  
        valuebhbgs5 = str(valuebhbgs5)
        valuebhbgs6 = str(valuebhbgs6)
        valuebhbgs7 = str(valuebhbgs7)
        valuebhbgs8 = str(valuebhbgs8) 
        valuebhbgs9 = str(valuebhbgs9)  
        valuebhbgs10 = str(valuebhbgs10)       
        valuebhbgs1 = valuebhbgs1.strip("(").strip(")").strip(",").strip("'")
        valuebhbgs1 = float(valuebhbgs1)
        valuebhbgs2 = valuebhbgs2.strip("(").strip(")").strip(",").strip("'")
        valuebhbgs2 = float(valuebhbgs2)
        valuebhbgs3 = valuebhbgs3.strip("(").strip(")").strip(",").strip("'")
        valuebhbgs3 = float(valuebhbgs3)
        valuebhbgs4 = valuebhbgs4.strip("(").strip(")").strip(",").strip("'")
        valuebhbgs4 = float(valuebhbgs4)
        valuebhbgs5 = valuebhbgs5.strip("(").strip(")").strip(",").strip("'")
        valuebhbgs5 = float(valuebhbgs5)
        valuebhbgs6 = valuebhbgs6.strip("(").strip(")").strip(",").strip("'")
        valuebhbgs6 = float(valuebhbgs6)
        valuebhbgs7 = valuebhbgs7.strip("(").strip(")").strip(",").strip("'")
        valuebhbgs7 = float(valuebhbgs7)
        valuebhbgs8 = valuebhbgs8.strip("(").strip(")").strip(",").strip("'")
        valuebhbgs8 = float(valuebhbgs8)
        valuebhbgs9 = valuebhbgs9.strip("(").strip(")").strip(",").strip("'")
        valuebhbgs9 = float(valuebhbgs9)
        valuebhbgs10 = valuebhbgs10.strip("(").strip(")").strip(",").strip("'")
        valuebhbgs10 = float(valuebhbgs10)

        mycursor.execute("SELECT `Bar Value C` FROM horizontal_bar_stacked_gtable")
        valuechbgs = mycursor.fetchall()
        valuechbgs1, valuechbgs2, valuechbgs3, valuechbgs4, valuechbgs5, valuechbgs6, valuechbgs7, valuechbgs8, valuechbgs9, valuechbgs10 = valuechbgs
        valuechbgs1 = str(valuechbgs1)
        valuechbgs2 = str(valuechbgs2)
        valuechbgs3 = str(valuechbgs3)
        valuechbgs4 = str(valuechbgs4)  
        valuechbgs5 = str(valuechbgs5)
        valuechbgs6 = str(valuechbgs6)
        valuechbgs7 = str(valuechbgs7)
        valuechbgs8 = str(valuechbgs8) 
        valuechbgs9 = str(valuechbgs9)
        valuechbgs10 = str(valuechbgs10)        
        valuechbgs1 = valuechbgs1.strip("(").strip(")").strip(",").strip("'")
        valuechbgs1 = float(valuechbgs1)
        valuechbgs2 = valuechbgs2.strip("(").strip(")").strip(",").strip("'")
        valuechbgs2 = float(valuechbgs2)
        valuechbgs3 = valuechbgs3.strip("(").strip(")").strip(",").strip("'")
        valuechbgs3 = float(valuechbgs3)
        valuechbgs4 = valuechbgs4.strip("(").strip(")").strip(",").strip("'")
        valuechbgs4 = float(valuechbgs4)
        valuechbgs5 = valuechbgs5.strip("(").strip(")").strip(",").strip("'")
        valuechbgs5 = float(valuechbgs5)
        valuechbgs6 = valuechbgs6.strip("(").strip(")").strip(",").strip("'")
        valuechbgs6 = float(valuechbgs6)
        valuechbgs7 = valuechbgs7.strip("(").strip(")").strip(",").strip("'")
        valuechbgs7 = float(valuechbgs7)
        valuechbgs8 = valuechbgs8.strip("(").strip(")").strip(",").strip("'")
        valuechbgs8 = float(valuechbgs8)
        valuechbgs9 = valuechbgs9.strip("(").strip(")").strip(",").strip("'")
        valuechbgs9 = float(valuechbgs9)
        valuechbgs10 = valuechbgs10.strip("(").strip(")").strip(",").strip("'")
        valuechbgs10 = float(valuechbgs10)

        mycursor.execute("SELECT `Min Value` FROM horizontal_bar_stacked_gtable")
        minvalue = mycursor.fetchone()
        my_floathbgs_minvalue = float(minvalue[0])

        mycursor.execute("SELECT `Decimals` FROM horizontal_bar_stacked_gtable")
        decvalue = mycursor.fetchone()
        my_floathbgs_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM horizontal_bar_stacked_gtable")
        my_stringhbgs_title = mycursor.fetchone()
        my_stringhbgs_title = str(my_stringhbgs_title)
        my_stringhbgs_title = my_stringhbgs_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM horizontal_bar_stacked_gtable")
        my_stringhbgs_subtitle = mycursor.fetchone()
        my_stringhbgs_subtitle = str(my_stringhbgs_subtitle)
        my_stringhbgs_subtitle = my_stringhbgs_subtitle.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Legend Text` FROM horizontal_bar_stacked_gtable")
        my_stringhbgs_legendtext = mycursor.fetchall()
        my_stringhbgs_legendtext1 = str(my_stringhbgs_legendtext[0])
        my_stringhbgs_legendtext2 = str(my_stringhbgs_legendtext[1])
        my_stringhbgs_legendtext3 = str(my_stringhbgs_legendtext[2])
        my_stringhbgs_legendtext1 = my_stringhbgs_legendtext1.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgs_legendtext2 = my_stringhbgs_legendtext2.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgs_legendtext3 = my_stringhbgs_legendtext3.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_hbgs = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_hbgs.type == 'MESH':
                        mesh_name_hbgs = selected_obj_hbgs.name

                        # Check if the selected object has modifiers
                        if selected_obj_hbgs.modifiers:
                                modifier_name_hbgs = selected_obj_hbgs.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Input_36"] = my_floathbgs_numberofbars
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_9"] = my_floathbgs_numberofstacks

                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Input_2"] = my_stringhbgs_bartext1
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Input_3"] = my_stringhbgs_bartext2
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Input_4"] = my_stringhbgs_bartext3
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Input_5"] = my_stringhbgs_bartext4
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_27"] = my_stringhbgs_bartext5
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_28"] = my_stringhbgs_bartext6
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_12"] = my_stringhbgs_bartext7
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_13"] = my_stringhbgs_bartext8
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_14"] = my_stringhbgs_bartext9
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_15"] = my_stringhbgs_bartext10

                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Input_14"] = valueahbgs1
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Input_15"] = valueahbgs2
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Input_16"] = valueahbgs3
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Input_17"] = valueahbgs4
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_16"] = valueahbgs5
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_17"] = valueahbgs6
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_18"] = valueahbgs7
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_19"] = valueahbgs8
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_20"] = valueahbgs9
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_21"] = valueahbgs10

                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_29"] = valuebhbgs1
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_31"] = valuebhbgs2
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_33"] = valuebhbgs3
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_35"] = valuebhbgs4
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_37"] = valuebhbgs5
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_39"] = valuebhbgs6
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_41"] = valuebhbgs7
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_43"] = valuebhbgs8
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_45"] = valuebhbgs9
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_47"] = valuebhbgs10

                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_30"] = valuechbgs1
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_32"] = valuechbgs2
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_34"] = valuechbgs3
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_36"] = valuechbgs4
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_38"] = valuechbgs5
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_40"] = valuechbgs6
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_42"] = valuechbgs7
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_44"] = valuechbgs8
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_46"] = valuechbgs9
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_48"] = valuechbgs10

                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Input_10"] = my_floathbgs_minvalue
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Input_11"] = my_floathbgs_maxvalue
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Input_12"] = my_floathbgs_decvalue
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Input_7"] = my_stringhbgs_title
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Input_8"] = my_stringhbgs_subtitle
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Input_6"] = my_stringhbgs_legendtext1
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_2"] = my_stringhbgs_legendtext2
                                selected_obj_hbgs.modifiers[modifier_name_hbgs]["Socket_8"] = my_stringhbgs_legendtext3

                                print(f"Set modifier input for object '{mesh_name_hbgs}' and modifier '{modifier_name_hbgs}'.")
                        else:
                                print(f"Selected object '{mesh_name_hbgs}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorHBGCsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorhbgcsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringhorizontal_bar_graph_comparison
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of bars (1-9)` FROM horizontal_bar_comparison_gtable")
        numberofbarshbgc = mycursor.fetchone()
        my_floathbgc_numberofbars = int(numberofbarshbgc[0])
        
        mycursor.execute("SELECT `Bar Text` FROM horizontal_bar_comparison_gtable")
        my_stringhbgc_bartext = mycursor.fetchall()
        my_stringhbgc_bartext1 = str(my_stringhbgc_bartext[0])
        my_stringhbgc_bartext2 = str(my_stringhbgc_bartext[1])
        my_stringhbgc_bartext3 = str(my_stringhbgc_bartext[2])
        my_stringhbgc_bartext4 = str(my_stringhbgc_bartext[3])
        my_stringhbgc_bartext5 = str(my_stringhbgc_bartext[4])
        my_stringhbgc_bartext6 = str(my_stringhbgc_bartext[5])
        my_stringhbgc_bartext7 = str(my_stringhbgc_bartext[6])
        my_stringhbgc_bartext8 = str(my_stringhbgc_bartext[7])
        my_stringhbgc_bartext9 = str(my_stringhbgc_bartext[8])
        my_stringhbgc_bartext1 = my_stringhbgc_bartext1.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgc_bartext2 = my_stringhbgc_bartext2.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgc_bartext3 = my_stringhbgc_bartext3.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgc_bartext4 = my_stringhbgc_bartext4.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgc_bartext5 = my_stringhbgc_bartext5.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgc_bartext6 = my_stringhbgc_bartext6.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgc_bartext7 = my_stringhbgc_bartext7.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgc_bartext8 = my_stringhbgc_bartext8.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgc_bartext9 = my_stringhbgc_bartext9.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Max Value` FROM horizontal_bar_comparison_gtable")
        maxvalue = mycursor.fetchone()
        my_floathbgc_maxvalue = float(maxvalue[0])

        mycursor.execute("SELECT `Bar Value A` FROM horizontal_bar_comparison_gtable")
        valueahbgc = mycursor.fetchall()
        valueahbgc1, valueahbgc2, valueahbgc3, valueahbgc4, valueahbgc5, valueahbgc6, valueahbgc7, valueahbgc8, valueahbgc9  = valueahbgc
        valueahbgc1 = str(valueahbgc1)
        valueahbgc2 = str(valueahbgc2)
        valueahbgc3 = str(valueahbgc3)
        valueahbgc4 = str(valueahbgc4)
        valueahbgc5 = str(valueahbgc5)
        valueahbgc6 = str(valueahbgc6)
        valueahbgc7 = str(valueahbgc7)
        valueahbgc8 = str(valueahbgc8)  
        valueahbgc9 = str(valueahbgc9)         
        valueahbgc1 = valueahbgc1.strip("(").strip(")").strip(",").strip("'")
        valueahbgc1 = float(valueahbgc1)
        valueahbgc2 = valueahbgc2.strip("(").strip(")").strip(",").strip("'")
        valueahbgc2 = float(valueahbgc2)
        valueahbgc3 = valueahbgc3.strip("(").strip(")").strip(",").strip("'")
        valueahbgc3 = float(valueahbgc3)
        valueahbgc4 = valueahbgc4.strip("(").strip(")").strip(",").strip("'")
        valueahbgc4 = float(valueahbgc4)
        valueahbgc5 = valueahbgc5.strip("(").strip(")").strip(",").strip("'")
        valueahbgc5 = float(valueahbgc5)
        valueahbgc6 = valueahbgc6.strip("(").strip(")").strip(",").strip("'")
        valueahbgc6 = float(valueahbgc6)
        valueahbgc7 = valueahbgc7.strip("(").strip(")").strip(",").strip("'")
        valueahbgc7 = float(valueahbgc7)
        valueahbgc8 = valueahbgc8.strip("(").strip(")").strip(",").strip("'")
        valueahbgc8 = float(valueahbgc8)
        valueahbgc9 = valueahbgc9.strip("(").strip(")").strip(",").strip("'")
        valueahbgc9 = float(valueahbgc9)

        mycursor.execute("SELECT `Bar Value B` FROM horizontal_bar_comparison_gtable")
        valuebhbgc = mycursor.fetchall()
        valuebhbgc1, valuebhbgc2, valuebhbgc3, valuebhbgc4, valuebhbgc5, valuebhbgc6, valuebhbgc7, valuebhbgc8, valuebhbgc9 = valuebhbgc
        valuebhbgc1 = str(valuebhbgc1)
        valuebhbgc2 = str(valuebhbgc2)
        valuebhbgc3 = str(valuebhbgc3)
        valuebhbgc4 = str(valuebhbgc4)  
        valuebhbgc5 = str(valuebhbgc5)
        valuebhbgc6 = str(valuebhbgc6)
        valuebhbgc7 = str(valuebhbgc7)
        valuebhbgc8 = str(valuebhbgc8) 
        valuebhbgc9 = str(valuebhbgc9)        
        valuebhbgc1 = valuebhbgc1.strip("(").strip(")").strip(",").strip("'")
        valuebhbgc1 = float(valuebhbgc1)
        valuebhbgc2 = valuebhbgc2.strip("(").strip(")").strip(",").strip("'")
        valuebhbgc2 = float(valuebhbgc2)
        valuebhbgc3 = valuebhbgc3.strip("(").strip(")").strip(",").strip("'")
        valuebhbgc3 = float(valuebhbgc3)
        valuebhbgc4 = valuebhbgc4.strip("(").strip(")").strip(",").strip("'")
        valuebhbgc4 = float(valuebhbgc4)
        valuebhbgc5 = valuebhbgc5.strip("(").strip(")").strip(",").strip("'")
        valuebhbgc5 = float(valuebhbgc5)
        valuebhbgc6 = valuebhbgc6.strip("(").strip(")").strip(",").strip("'")
        valuebhbgc6 = float(valuebhbgc6)
        valuebhbgc7 = valuebhbgc7.strip("(").strip(")").strip(",").strip("'")
        valuebhbgc7 = float(valuebhbgc7)
        valuebhbgc8 = valuebhbgc8.strip("(").strip(")").strip(",").strip("'")
        valuebhbgc8 = float(valuebhbgc8)
        valuebhbgc9 = valuebhbgc9.strip("(").strip(")").strip(",").strip("'")
        valuebhbgc9 = float(valuebhbgc9)

        mycursor.execute("SELECT `Min Value` FROM horizontal_bar_comparison_gtable")
        minvalue = mycursor.fetchone()
        my_floathbgc_minvalue = float(minvalue[0])

        mycursor.execute("SELECT `Decimals` FROM horizontal_bar_comparison_gtable")
        decvalue = mycursor.fetchone()
        my_floathbgc_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM horizontal_bar_comparison_gtable")
        my_stringhbgc_title = mycursor.fetchone()
        my_stringhbgc_title = str(my_stringhbgc_title)
        my_stringhbgc_title = my_stringhbgc_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM horizontal_bar_comparison_gtable")
        my_stringhbgc_subtitle = mycursor.fetchone()
        my_stringhbgc_subtitle = str(my_stringhbgc_subtitle)
        my_stringhbgc_subtitle = my_stringhbgc_subtitle.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Legend Text` FROM horizontal_bar_comparison_gtable")
        my_stringhbgc_legendtext = mycursor.fetchall()
        my_stringhbgc_legendtext1 = str(my_stringhbgc_legendtext[0])
        my_stringhbgc_legendtext2 = str(my_stringhbgc_legendtext[1])
        my_stringhbgc_legendtext1 = my_stringhbgc_legendtext1.strip("(").strip(")").strip(",").strip("'")
        my_stringhbgc_legendtext2 = my_stringhbgc_legendtext2.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_hbgc = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_hbgc.type == 'MESH':
                        mesh_name_hbgc = selected_obj_hbgc.name

                        # Check if the selected object has modifiers
                        if selected_obj_hbgc.modifiers:
                                modifier_name_hbgc = selected_obj_hbgc.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_45"] = my_floathbgc_numberofbars
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_2"] = my_stringhbgc_bartext1
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_3"] = my_stringhbgc_bartext2
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_4"] = my_stringhbgc_bartext3
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_5"] = my_stringhbgc_bartext4
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_66"] = my_stringhbgc_bartext5
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_67"] = my_stringhbgc_bartext6
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_68"] = my_stringhbgc_bartext7
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_69"] = my_stringhbgc_bartext8
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_70"] = my_stringhbgc_bartext9
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_14"] = valueahbgc1
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_15"] = valueahbgc2
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_16"] = valueahbgc3
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_17"] = valueahbgc4
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_71"] = valueahbgc5
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_73"] = valueahbgc6
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_75"] = valueahbgc7
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_77"] = valueahbgc8
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_79"] = valueahbgc9
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_36"] = valuebhbgc1
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_37"] = valuebhbgc2
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_38"] = valuebhbgc3
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_39"] = valuebhbgc4
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_72"] = valuebhbgc5
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_74"] = valuebhbgc6
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_76"] = valuebhbgc7
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_78"] = valuebhbgc8
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_80"] = valuebhbgc9
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_10"] = my_floathbgc_minvalue
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_11"] = my_floathbgc_maxvalue
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_12"] = my_floathbgc_decvalue
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_7"] = my_stringhbgc_title
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_8"] = my_stringhbgc_subtitle
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_6"] = my_stringhbgc_legendtext1
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_40"] = my_stringhbgc_legendtext2

                                print(f"Set modifier input for object '{mesh_name_hbgc}' and modifier '{modifier_name_hbgc}'.")
                        else:
                                print(f"Selected object '{mesh_name_hbgc}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorVBGSsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorhsvbgsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringverticalstacked_bar_graph_comparison
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of bars (1-8)` FROM vertical_bar_stacked_gtable")
        numberofbarsvbgs = mycursor.fetchone()
        my_floatvbgs_numberofbars = int(numberofbarsvbgs[0])

        mycursor.execute("SELECT `Number of stacks (2-3)` FROM vertical_bar_stacked_gtable")
        numberofstackssvbgs = mycursor.fetchone()
        my_floatvbgs_numberofstacks = int(numberofstackssvbgs[0])
        
        mycursor.execute("SELECT `Bar Text` FROM vertical_bar_stacked_gtable")
        my_stringvbgs_bartext = mycursor.fetchall()
        my_stringvbgs_bartext1 = str(my_stringvbgs_bartext[0])
        my_stringvbgs_bartext2 = str(my_stringvbgs_bartext[1])
        my_stringvbgs_bartext3 = str(my_stringvbgs_bartext[2])
        my_stringvbgs_bartext4 = str(my_stringvbgs_bartext[3])
        my_stringvbgs_bartext5 = str(my_stringvbgs_bartext[4])
        my_stringvbgs_bartext6 = str(my_stringvbgs_bartext[5])
        my_stringvbgs_bartext7 = str(my_stringvbgs_bartext[6])
        my_stringvbgs_bartext8 = str(my_stringvbgs_bartext[7])

        my_stringvbgs_bartext1 = my_stringvbgs_bartext1.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgs_bartext2 = my_stringvbgs_bartext2.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgs_bartext3 = my_stringvbgs_bartext3.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgs_bartext4 = my_stringvbgs_bartext4.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgs_bartext5 = my_stringvbgs_bartext5.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgs_bartext6 = my_stringvbgs_bartext6.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgs_bartext7 = my_stringvbgs_bartext7.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgs_bartext8 = my_stringvbgs_bartext8.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Max Value` FROM vertical_bar_stacked_gtable")
        maxvalue = mycursor.fetchone()
        my_floatvbgs_maxvalue = float(maxvalue[0])

        mycursor.execute("SELECT `Bar Value A` FROM vertical_bar_stacked_gtable")
        valueavbgs = mycursor.fetchall()
        valueavbgs1, valueavbgs2, valueavbgs3, valueavbgs4, valueavbgs5, valueavbgs6, valueavbgs7, valueavbgs8  = valueavbgs
        valueavbgs1 = str(valueavbgs1)
        valueavbgs2 = str(valueavbgs2)
        valueavbgs3 = str(valueavbgs3)
        valueavbgs4 = str(valueavbgs4)
        valueavbgs5 = str(valueavbgs5)
        valueavbgs6 = str(valueavbgs6)
        valueavbgs7 = str(valueavbgs7)
        valueavbgs8 = str(valueavbgs8)  
            
        valueavbgs1 = valueavbgs1.strip("(").strip(")").strip(",").strip("'")
        valueavbgs1 = float(valueavbgs1)
        valueavbgs2 = valueavbgs2.strip("(").strip(")").strip(",").strip("'")
        valueavbgs2 = float(valueavbgs2)
        valueavbgs3 = valueavbgs3.strip("(").strip(")").strip(",").strip("'")
        valueavbgs3 = float(valueavbgs3)
        valueavbgs4 = valueavbgs4.strip("(").strip(")").strip(",").strip("'")
        valueavbgs4 = float(valueavbgs4)
        valueavbgs5 = valueavbgs5.strip("(").strip(")").strip(",").strip("'")
        valueavbgs5 = float(valueavbgs5)
        valueavbgs6 = valueavbgs6.strip("(").strip(")").strip(",").strip("'")
        valueavbgs6 = float(valueavbgs6)
        valueavbgs7 = valueavbgs7.strip("(").strip(")").strip(",").strip("'")
        valueavbgs7 = float(valueavbgs7)
        valueavbgs8 = valueavbgs8.strip("(").strip(")").strip(",").strip("'")
        valueavbgs8 = float(valueavbgs8)

        mycursor.execute("SELECT `Bar Value B` FROM vertical_bar_stacked_gtable")
        valuebvbgs = mycursor.fetchall()
        valuebvbgs1, valuebvbgs2, valuebvbgs3, valuebvbgs4, valuebvbgs5, valuebvbgs6, valuebvbgs7, valuebvbgs8 = valuebvbgs
        valuebvbgs1 = str(valuebvbgs1)
        valuebvbgs2 = str(valuebvbgs2)
        valuebvbgs3 = str(valuebvbgs3)
        valuebvbgs4 = str(valuebvbgs4)  
        valuebvbgs5 = str(valuebvbgs5)
        valuebvbgs6 = str(valuebvbgs6)
        valuebvbgs7 = str(valuebvbgs7)
        valuebvbgs8 = str(valuebvbgs8) 
     
        valuebvbgs1 = valuebvbgs1.strip("(").strip(")").strip(",").strip("'")
        valuebvbgs1 = float(valuebvbgs1)
        valuebvbgs2 = valuebvbgs2.strip("(").strip(")").strip(",").strip("'")
        valuebvbgs2 = float(valuebvbgs2)
        valuebvbgs3 = valuebvbgs3.strip("(").strip(")").strip(",").strip("'")
        valuebvbgs3 = float(valuebvbgs3)
        valuebvbgs4 = valuebvbgs4.strip("(").strip(")").strip(",").strip("'")
        valuebvbgs4 = float(valuebvbgs4)
        valuebvbgs5 = valuebvbgs5.strip("(").strip(")").strip(",").strip("'")
        valuebvbgs5 = float(valuebvbgs5)
        valuebvbgs6 = valuebvbgs6.strip("(").strip(")").strip(",").strip("'")
        valuebvbgs6 = float(valuebvbgs6)
        valuebvbgs7 = valuebvbgs7.strip("(").strip(")").strip(",").strip("'")
        valuebvbgs7 = float(valuebvbgs7)
        valuebvbgs8 = valuebvbgs8.strip("(").strip(")").strip(",").strip("'")
        valuebvbgs8 = float(valuebvbgs8)

        mycursor.execute("SELECT `Bar Value C` FROM vertical_bar_stacked_gtable")
        valuecvbgs = mycursor.fetchall()
        valuecvbgs1, valuecvbgs2, valuecvbgs3, valuecvbgs4, valuecvbgs5, valuecvbgs6, valuecvbgs7, valuecvbgs8 = valuecvbgs
        valuecvbgs1 = str(valuecvbgs1)
        valuecvbgs2 = str(valuecvbgs2)
        valuecvbgs3 = str(valuecvbgs3)
        valuecvbgs4 = str(valuecvbgs4)  
        valuecvbgs5 = str(valuecvbgs5)
        valuecvbgs6 = str(valuecvbgs6)
        valuecvbgs7 = str(valuecvbgs7)
        valuecvbgs8 = str(valuecvbgs8) 
       
        valuecvbgs1 = valuecvbgs1.strip("(").strip(")").strip(",").strip("'")
        valuecvbgs1 = float(valuecvbgs1)
        valuecvbgs2 = valuecvbgs2.strip("(").strip(")").strip(",").strip("'")
        valuecvbgs2 = float(valuecvbgs2)
        valuecvbgs3 = valuecvbgs3.strip("(").strip(")").strip(",").strip("'")
        valuecvbgs3 = float(valuecvbgs3)
        valuecvbgs4 = valuecvbgs4.strip("(").strip(")").strip(",").strip("'")
        valuecvbgs4 = float(valuecvbgs4)
        valuecvbgs5 = valuecvbgs5.strip("(").strip(")").strip(",").strip("'")
        valuecvbgs5 = float(valuecvbgs5)
        valuecvbgs6 = valuecvbgs6.strip("(").strip(")").strip(",").strip("'")
        valuecvbgs6 = float(valuecvbgs6)
        valuecvbgs7 = valuecvbgs7.strip("(").strip(")").strip(",").strip("'")
        valuecvbgs7 = float(valuecvbgs7)
        valuecvbgs8 = valuecvbgs8.strip("(").strip(")").strip(",").strip("'")
        valuecvbgs8 = float(valuecvbgs8)


        mycursor.execute("SELECT `Min Value` FROM vertical_bar_stacked_gtable")
        minvalue = mycursor.fetchone()
        my_floatvbgs_minvalue = float(minvalue[0])

        mycursor.execute("SELECT `Decimals` FROM vertical_bar_stacked_gtable")
        decvalue = mycursor.fetchone()
        my_floatvbgs_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM vertical_bar_stacked_gtable")
        my_stringvbgs_title = mycursor.fetchone()
        my_stringvbgs_title = str(my_stringvbgs_title)
        my_stringvbgs_title = my_stringvbgs_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM vertical_bar_stacked_gtable")
        my_stringvbgs_subtitle = mycursor.fetchone()
        my_stringvbgs_subtitle = str(my_stringvbgs_subtitle)
        my_stringvbgs_subtitle = my_stringvbgs_subtitle.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Legend Text` FROM vertical_bar_stacked_gtable")
        my_stringvbgs_legendtext = mycursor.fetchall()
        my_stringvbgs_legendtext1 = str(my_stringvbgs_legendtext[0])
        my_stringvbgs_legendtext2 = str(my_stringvbgs_legendtext[1])
        my_stringvbgs_legendtext3 = str(my_stringvbgs_legendtext[2])
        my_stringvbgs_legendtext1 = my_stringvbgs_legendtext1.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgs_legendtext2 = my_stringvbgs_legendtext2.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgs_legendtext3 = my_stringvbgs_legendtext3.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_vbgs = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_vbgs.type == 'MESH':
                        mesh_name_vbgs = selected_obj_vbgs.name

                        # Check if the selected object has modifiers
                        if selected_obj_vbgs.modifiers:
                                modifier_name_vbgs = selected_obj_vbgs.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_57"] = my_floatvbgs_numberofbars
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_31"] = my_floatvbgs_numberofstacks

                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_2"] = my_stringvbgs_bartext1
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_42"] = my_stringvbgs_bartext2
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_3"] = my_stringvbgs_bartext3
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_45"] = my_stringvbgs_bartext4
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_4"] = my_stringvbgs_bartext5
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_47"] = my_stringvbgs_bartext6
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_5"] = my_stringvbgs_bartext7
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_49"] = my_stringvbgs_bartext8

                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_14"] = valueavbgs1
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_41"] = valueavbgs2
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_15"] = valueavbgs3
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_44"] = valueavbgs4
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_16"] = valueavbgs5
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_48"] = valueavbgs6
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_17"] = valueavbgs7
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_50"] = valueavbgs8

                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_13"] = valuebvbgs1
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_15"] = valuebvbgs2
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_17"] = valuebvbgs3
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_19"] = valuebvbgs4
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_21"] = valuebvbgs5
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_23"] = valuebvbgs6
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_25"] = valuebvbgs7
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_29"] = valuebvbgs8

                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_14"] = valuecvbgs1
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_16"] = valuecvbgs2
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_18"] = valuecvbgs3
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_20"] = valuecvbgs4
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_22"] = valuecvbgs5
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_24"] = valuecvbgs6
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_26"] = valuecvbgs7
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_28"] = valuecvbgs8

                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_10"] = my_floatvbgs_minvalue
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_11"] = my_floatvbgs_maxvalue
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_12"] = my_floatvbgs_decvalue
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_7"] = my_stringvbgs_title
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_8"] = my_stringvbgs_subtitle
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Input_6"] = my_stringvbgs_legendtext1
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_34"] = my_stringvbgs_legendtext2
                                selected_obj_vbgs.modifiers[modifier_name_vbgs]["Socket_35"] = my_stringvbgs_legendtext3

                                print(f"Set modifier input for object '{mesh_name_vbgs}' and modifier '{modifier_name_vbgs}'.")
                        else:
                                print(f"Selected object '{mesh_name_vbgs}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}

class MyoperatorMCGsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatormcgsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringmultiple_circle_graph
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of sliders (1-8)` FROM multiple_circlegtable")
        numberofslidersmcg = mycursor.fetchone()
        my_floatmcg_numberofsliders = int(numberofslidersmcg[0])
        
        mycursor.execute("SELECT `Bar Text` FROM multiple_circlegtable")
        my_stringmcg_bartext = mycursor.fetchall()
        my_stringmcg_bartext1 = str(my_stringmcg_bartext[0])
        my_stringmcg_bartext2 = str(my_stringmcg_bartext[1])
        my_stringmcg_bartext3 = str(my_stringmcg_bartext[2])
        my_stringmcg_bartext4 = str(my_stringmcg_bartext[3])
        my_stringmcg_bartext5 = str(my_stringmcg_bartext[4])
        my_stringmcg_bartext6 = str(my_stringmcg_bartext[5])
        my_stringmcg_bartext7 = str(my_stringmcg_bartext[6])
        my_stringmcg_bartext8 = str(my_stringmcg_bartext[7])
        my_stringmcg_bartext1 = my_stringmcg_bartext1.strip("(").strip(")").strip(",").strip("'")
        my_stringmcg_bartext2 = my_stringmcg_bartext2.strip("(").strip(")").strip(",").strip("'")
        my_stringmcg_bartext3 = my_stringmcg_bartext3.strip("(").strip(")").strip(",").strip("'")
        my_stringmcg_bartext4 = my_stringmcg_bartext4.strip("(").strip(")").strip(",").strip("'")
        my_stringmcg_bartext5 = my_stringmcg_bartext5.strip("(").strip(")").strip(",").strip("'")
        my_stringmcg_bartext6 = my_stringmcg_bartext6.strip("(").strip(")").strip(",").strip("'")
        my_stringmcg_bartext7 = my_stringmcg_bartext7.strip("(").strip(")").strip(",").strip("'")
        my_stringmcg_bartext8 = my_stringmcg_bartext8.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Max Value` FROM multiple_circlegtable")
        maxbarvalue = mycursor.fetchone()
        my_floatmcg_maxbarvalue = float(maxbarvalue[0])

        mycursor.execute("SELECT `Bar Value` FROM multiple_circlegtable")
        barvaluemcg = mycursor.fetchall()
        barvaluemcg1, barvaluemcg2, barvaluemcg3, barvaluemcg4, barvaluemcg5, barvaluemcg6, barvaluemcg7, barvaluemcg8 = barvaluemcg
        barvaluemcg1 = str(barvaluemcg1)
        barvaluemcg2 = str(barvaluemcg2)
        barvaluemcg3 = str(barvaluemcg3)
        barvaluemcg4 = str(barvaluemcg4)
        barvaluemcg5 = str(barvaluemcg5)
        barvaluemcg6 = str(barvaluemcg6)
        barvaluemcg7 = str(barvaluemcg7)
        barvaluemcg8 = str(barvaluemcg8)            
        barvaluemcg1 = barvaluemcg1.strip("(").strip(")").strip(",").strip("'")
        barvaluemcg1 = float(barvaluemcg1)
        barvaluemcg2 = barvaluemcg2.strip("(").strip(")").strip(",").strip("'")
        barvaluemcg2 = float(barvaluemcg2)
        barvaluemcg3 = barvaluemcg3.strip("(").strip(")").strip(",").strip("'")
        barvaluemcg3 = float(barvaluemcg3)
        barvaluemcg4 = barvaluemcg4.strip("(").strip(")").strip(",").strip("'")
        barvaluemcg4 = float(barvaluemcg4)
        barvaluemcg5 = barvaluemcg5.strip("(").strip(")").strip(",").strip("'")
        barvaluemcg5 = float(barvaluemcg5)
        barvaluemcg6 = barvaluemcg6.strip("(").strip(")").strip(",").strip("'")
        barvaluemcg6 = float(barvaluemcg6)
        barvaluemcg7 = barvaluemcg7.strip("(").strip(")").strip(",").strip("'")
        barvaluemcg7 = float(barvaluemcg7)
        barvaluemcg8 = barvaluemcg8.strip("(").strip(")").strip(",").strip("'")
        barvaluemcg8 = float(barvaluemcg8)
        my_floatmcg_barvalue1 = barvaluemcg1/my_floatmcg_maxbarvalue
        my_floatmcg_barvalue2 = barvaluemcg2/my_floatmcg_maxbarvalue
        my_floatmcg_barvalue3 = barvaluemcg3/my_floatmcg_maxbarvalue
        my_floatmcg_barvalue4 = barvaluemcg4/my_floatmcg_maxbarvalue
        my_floatmcg_barvalue5 = barvaluemcg5/my_floatmcg_maxbarvalue
        my_floatmcg_barvalue6 = barvaluemcg6/my_floatmcg_maxbarvalue
        my_floatmcg_barvalue7 = barvaluemcg7/my_floatmcg_maxbarvalue
        my_floatmcg_barvalue8 = barvaluemcg8/my_floatmcg_maxbarvalue

        mycursor.execute("SELECT `Min Value` FROM multiple_circlegtable")
        minbarvalue = mycursor.fetchone()
        my_floatmcg_minbarvalue = float(minbarvalue[0])

        mycursor.execute("SELECT `Decimals` FROM multiple_circlegtable")
        decvalue = mycursor.fetchone()
        my_floatmcg_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM multiple_circlegtable")
        my_stringmcg_title = mycursor.fetchone()
        my_stringmcg_title = str(my_stringmcg_title)
        my_stringmcg_title = my_stringmcg_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM multiple_circlegtable")
        my_stringmcg_subtitle = mycursor.fetchone()
        my_stringmcg_subtitle = str(my_stringmcg_subtitle)
        my_stringmcg_subtitle = my_stringmcg_subtitle.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_mcg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_mcg.type == 'MESH':
                        mesh_name_mcg = selected_obj_mcg.name

                        # Check if the selected object has modifiers
                        if selected_obj_mcg.modifiers:
                                modifier_name_mcg = selected_obj_mcg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_55"] = my_floatmcg_numberofsliders
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_42"] = my_stringmcg_bartext1
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_43"] = my_stringmcg_bartext2
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_44"] = my_stringmcg_bartext3
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_46"] = my_stringmcg_bartext4
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_45"] = my_stringmcg_bartext5
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_13"] = my_stringmcg_bartext6
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_18"] = my_stringmcg_bartext7
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_23"] = my_stringmcg_bartext8
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_2"] = my_floatmcg_barvalue1
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_12"] = my_floatmcg_barvalue2
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_14"] = my_floatmcg_barvalue3
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_15"] = my_floatmcg_barvalue4
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_16"] = my_floatmcg_barvalue5
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_7"] = my_floatmcg_barvalue6
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_8"] = my_floatmcg_barvalue7
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_9"] = my_floatmcg_barvalue8
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_10"] = my_floatmcg_minbarvalue
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_11"] = my_floatmcg_maxbarvalue
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_18"] = my_floatmcg_decvalue
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_40"] = my_stringmcg_title
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_41"] = my_stringmcg_subtitle

                                print(f"Set modifier input for object '{mesh_name_mcg}' and modifier '{modifier_name_mcg}'.")
                        else:
                                print(f"Selected object '{mesh_name_mcg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
       
class MyoperatorMPGsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatormpgsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringmultiple_pie_graph
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of sliders (1-8)` FROM multiple_piegtable")
        numberofslidersmpg = mycursor.fetchone()
        my_floatmpg_numberofsliders = int(numberofslidersmpg[0])
        
        mycursor.execute("SELECT `Bar Text` FROM multiple_piegtable")
        my_stringmpg_bartext = mycursor.fetchall()
        my_stringmpg_bartext1 = str(my_stringmpg_bartext[0])
        my_stringmpg_bartext2 = str(my_stringmpg_bartext[1])
        my_stringmpg_bartext3 = str(my_stringmpg_bartext[2])
        my_stringmpg_bartext4 = str(my_stringmpg_bartext[3])
        my_stringmpg_bartext5 = str(my_stringmpg_bartext[4])
        my_stringmpg_bartext6 = str(my_stringmpg_bartext[5])
        my_stringmpg_bartext7 = str(my_stringmpg_bartext[6])
        my_stringmpg_bartext8 = str(my_stringmpg_bartext[7])
        my_stringmpg_bartext1 = my_stringmpg_bartext1.strip("(").strip(")").strip(",").strip("'")
        my_stringmpg_bartext2 = my_stringmpg_bartext2.strip("(").strip(")").strip(",").strip("'")
        my_stringmpg_bartext3 = my_stringmpg_bartext3.strip("(").strip(")").strip(",").strip("'")
        my_stringmpg_bartext4 = my_stringmpg_bartext4.strip("(").strip(")").strip(",").strip("'")
        my_stringmpg_bartext5 = my_stringmpg_bartext5.strip("(").strip(")").strip(",").strip("'")
        my_stringmpg_bartext6 = my_stringmpg_bartext6.strip("(").strip(")").strip(",").strip("'")
        my_stringmpg_bartext7 = my_stringmpg_bartext7.strip("(").strip(")").strip(",").strip("'")
        my_stringmpg_bartext8 = my_stringmpg_bartext8.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Max Value` FROM multiple_piegtable")
        maxbarvalue = mycursor.fetchone()
        my_floatmpg_maxbarvalue = float(maxbarvalue[0])

        mycursor.execute("SELECT `Bar Value` FROM multiple_piegtable")
        barvaluempg = mycursor.fetchall()
        barvaluempg1, barvaluempg2, barvaluempg3, barvaluempg4, barvaluempg5, barvaluempg6, barvaluempg7, barvaluempg8 = barvaluempg
        barvaluempg1 = str(barvaluempg1)
        barvaluempg2 = str(barvaluempg2)
        barvaluempg3 = str(barvaluempg3)
        barvaluempg4 = str(barvaluempg4)
        barvaluempg5 = str(barvaluempg5)   
        barvaluempg6 = str(barvaluempg6)  
        barvaluempg7 = str(barvaluempg7) 
        barvaluempg8 = str(barvaluempg8)      
        barvaluempg1 = barvaluempg1.strip("(").strip(")").strip(",").strip("'")
        barvaluempg1 = float(barvaluempg1)
        barvaluempg2 = barvaluempg2.strip("(").strip(")").strip(",").strip("'")
        barvaluempg2 = float(barvaluempg2)
        barvaluempg3 = barvaluempg3.strip("(").strip(")").strip(",").strip("'")
        barvaluempg3 = float(barvaluempg3)
        barvaluempg4 = barvaluempg4.strip("(").strip(")").strip(",").strip("'")
        barvaluempg4 = float(barvaluempg4)
        barvaluempg5 = barvaluempg5.strip("(").strip(")").strip(",").strip("'")
        barvaluempg5 = float(barvaluempg5)
        barvaluempg6 = barvaluempg6.strip("(").strip(")").strip(",").strip("'")
        barvaluempg6 = float(barvaluempg6)
        barvaluempg7 = barvaluempg7.strip("(").strip(")").strip(",").strip("'")
        barvaluempg7 = float(barvaluempg7)
        barvaluempg8 = barvaluempg8.strip("(").strip(")").strip(",").strip("'")
        barvaluempg8 = float(barvaluempg8)
        my_floatmpg_barvalue1 = barvaluempg1/my_floatmpg_maxbarvalue
        my_floatmpg_barvalue2 = barvaluempg2/my_floatmpg_maxbarvalue
        my_floatmpg_barvalue3 = barvaluempg3/my_floatmpg_maxbarvalue
        my_floatmpg_barvalue4 = barvaluempg4/my_floatmpg_maxbarvalue
        my_floatmpg_barvalue5 = barvaluempg5/my_floatmpg_maxbarvalue
        my_floatmpg_barvalue6 = barvaluempg6/my_floatmpg_maxbarvalue
        my_floatmpg_barvalue7 = barvaluempg7/my_floatmpg_maxbarvalue
        my_floatmpg_barvalue8 = barvaluempg8/my_floatmpg_maxbarvalue

        mycursor.execute("SELECT `Min Value` FROM multiple_piegtable")
        minbarvalue = mycursor.fetchone()
        my_floatmpg_minbarvalue = float(minbarvalue[0])

        mycursor.execute("SELECT `Decimals` FROM multiple_piegtable")
        decvalue = mycursor.fetchone()
        my_floatmpg_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM multiple_piegtable")
        my_stringmpg_title = mycursor.fetchone()
        my_stringmpg_title = str(my_stringmpg_title)
        my_stringmpg_title = my_stringmpg_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM multiple_piegtable")
        my_stringmpg_subtitle = mycursor.fetchone()
        my_stringmpg_subtitle = str(my_stringmpg_subtitle)
        my_stringmpg_subtitle = my_stringmpg_subtitle.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_mpg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_mpg.type == 'MESH':
                        mesh_name_mpg = selected_obj_mpg.name

                        # Check if the selected object has modifiers
                        if selected_obj_mpg.modifiers:
                                modifier_name_mpg = selected_obj_mpg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_54"] = my_floatmpg_numberofsliders
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_42"] = my_stringmpg_bartext1
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_43"] = my_stringmpg_bartext2
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_44"] = my_stringmpg_bartext3
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_46"] = my_stringmpg_bartext4
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_45"] = my_stringmpg_bartext5
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_88"] = my_stringmpg_bartext6
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Socket_4"] = my_stringmpg_bartext7
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Socket_9"] = my_stringmpg_bartext8
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_2"] = my_floatmpg_barvalue1
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_12"] = my_floatmpg_barvalue2
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_14"] = my_floatmpg_barvalue3
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_15"] = my_floatmpg_barvalue4
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_16"] = my_floatmpg_barvalue5
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_93"] = my_floatmpg_barvalue6
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Socket_0"] = my_floatmpg_barvalue7
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Socket_1"] = my_floatmpg_barvalue8
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_10"] = my_floatmpg_minbarvalue
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_11"] = my_floatmpg_maxbarvalue
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_18"] = my_floatmpg_decvalue
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_40"] = my_stringmpg_title
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_41"] = my_stringmpg_subtitle

                                print(f"Set modifier input for object '{mesh_name_mpg}' and modifier '{modifier_name_mpg}'.")
                        else:
                                print(f"Selected object '{mesh_name_mpg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorHBGgenai(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorhbggenai"
    bl_label = "Import Gen AI Data"

    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        api_key_file_path = bpy.path.abspath(mytool.my_pathapi_key)
        filepath_fullhbgaisiteurl = bpy.path.abspath(mytool.my_stringsiteurl)
        filepath_fullhbgaiappname = bpy.path.abspath(mytool.my_stringappname)
        filepath_fullhbgaiapikey = read_api_key(api_key_file_path)
        
        if not filepath_fullhbgaiapikey:
            print("Failed to read API key. Aborting operation.")
            return {'CANCELLED'}
        filepath_fullhbgaimodelname1 = bpy.path.abspath(mytool.my_stringmodelname1)
        filepath_fullhbgaimodelname2 = bpy.path.abspath(mytool.my_stringmodelname2)        
        filepath_fullhbgaiinput1 = bpy.path.abspath(mytool.my_stringhorizontal_bar_gengraph1)
        filepath_fullhbgaiinput2 = bpy.path.abspath(mytool.my_stringhorizontal_bar_gengraph2)
        filepath_fullhbgaiinput3 = bpy.path.abspath(mytool.my_stringhorizontal_bar_gengraph3)
        filepath_fullurl = bpy.path.abspath(mytool.my_stringresponseurl)

        sub_questionhbg = filepath_fullhbgaiinput1
        main_questionhbg = filepath_fullhbgaiinput2.format(sub_questionhbg)

        questionhbg = f"{main_questionhbg} {sub_questionhbg}"

        # Replace with your actual values
        YOUR_SITE_URL = filepath_fullhbgaisiteurl
        YOUR_APP_NAME = filepath_fullhbgaiappname
        YOUR_API_KEY = filepath_fullhbgaiapikey

        response = requests.post(
            url=filepath_fullurl,
            headers={
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": YOUR_APP_NAME,
                "Authorization": f"Bearer {YOUR_API_KEY}",  # Include your API key in the Authorization header
            },
            data=json.dumps({
                "model": filepath_fullhbgaimodelname1,
                "messages": [
                    {"role": "user", "content": questionhbg}
                ]
            })
        )

        # Parse the JSON response
        response_jsonhbga = response.json()
        
        # Print the response for debugging
        print("Response JSON:", response_jsonhbga)

        # Extract the answer if available
        answer_hbg = response_jsonhbga.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

        # Print the answer for debugging
        print("Answer Circle:", answer_hbg)
        
                
        relevant_infohbg = answer_hbg
        
        if relevant_infohbg:
            # Extract necessary details from relevant_info
            # Modify the construction of the new question based on the extracted information
            new_questionhbg = f"{filepath_fullhbgaiinput3}. Here's the text: {relevant_infohbg}"

            # Make another API request with the new question
            new_response = requests.post(
                url=filepath_fullurl,
                headers={
                    "HTTP-Referer": YOUR_SITE_URL,
                    "X-Title": YOUR_APP_NAME,
                    "Authorization": f"Bearer {YOUR_API_KEY}",
                },
                data=json.dumps({
                    "model": filepath_fullhbgaimodelname2,
                    "messages": [
                        {"role": "user", "content": new_questionhbg}
                    ]
                })
            )

            # Parse the JSON response for the new question
            new_response_jsonhbgb = new_response.json()
            
            # Extract the answer if available
            answer_hbg1 = new_response_jsonhbgb.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

            # Print the answer for debugging
            print("Answer Circle1:", answer_hbg1)

            # Split the answer into variables based on commas
            answer_variables_hbg = answer_hbg1.split(';')
            
            # Split the answer further
            float_valueshbg = [value for value in answer_variables_hbg[2].split(',')]
            float_nameshbg = [value for value in answer_variables_hbg[3].split(',')]
            
            # Remove letters and symbols except period
            cleaned_valueshbg = ["".join(char for char in value if char.isdigit() or char == '.') for value in float_valueshbg]

            hbgfloat_values = [float(cleaned_value) for cleaned_value in cleaned_valueshbg]

            # Find the maximum value
            float_valuesmaxhbg = max(hbgfloat_values)
            print(float_valuesmaxhbg)
        
            range_maxhbg = 1.1 * float(float_valuesmaxhbg)
            print("range_maxhbg:", range_maxhbg)

            # Now you can use the individual variables as needed
            title_variable_hbg = answer_variables_hbg[0].replace("Step A:", "").strip().upper()
            subtitle_variable_hbg = answer_variables_hbg[1].replace("Step B:", "").strip()
            value_variable_hbg1 = re.sub(r"[^0-9.]", "", float_valueshbg[0].replace("Step C:", "").strip())

            # Check if float_valueshbg[1] is not empty
            if float_valueshbg and len(float_valueshbg) > 1:
                value_variable_hbg2 = re.sub(r"[^0-9.]", "", float_valueshbg[1].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueshbg[1] is empty or not provided
                value_variable_hbg2 = None  # or any default value you want

            # Check if float_valueshbg[2] is not empty
            if float_valueshbg and len(float_valueshbg) > 2:
                value_variable_hbg3 = re.sub(r"[^0-9.]", "", float_valueshbg[2].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueshbg[2] is empty or not provided
                value_variable_hbg3 = None  # or any default value you want

            # Check if float_valueshbg[3] is not empty
            if float_valueshbg and len(float_valueshbg) > 3:
                value_variable_hbg4 = re.sub(r"[^0-9.]", "", float_valueshbg[3].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueshbg[3] is empty or not provided
                value_variable_hbg4 = None  # or any default value you want

            # Check if float_valueshbg[4] is not empty
            if float_valueshbg and len(float_valueshbg) > 4:
                value_variable_hbg5 = re.sub(r"[^0-9.]", "", float_valueshbg[4].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueshbg[4] is empty or not provided
                value_variable_hbg5 = None  # or any default value you want

            # Check if float_valueshbg[5] is not empty
            if float_valueshbg and len(float_valueshbg) > 5:
                value_variable_hbg6 = re.sub(r"[^0-9.]", "", float_valueshbg[5].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueshbg[5] is empty or not provided
                value_variable_hbg6 = None  # or any default value you want

            # Check if float_valueshbg[6] is not empty
            if float_valueshbg and len(float_valueshbg) > 6:
                value_variable_hbg7 = re.sub(r"[^0-9.]", "", float_valueshbg[6].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueshbg[6] is empty or not provided
                value_variable_hbg7 = None  # or any default value you want

            # Check if float_valueshbg[7] is not empty
            if float_valueshbg and len(float_valueshbg) > 7:
                value_variable_hbg8 = re.sub(r"[^0-9.]", "", float_valueshbg[7].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueshbg[7] is empty or not provided
                value_variable_hbg8 = None  # or any default value you want

            # Check if float_valueshbg[8] is not empty
            if float_valueshbg and len(float_valueshbg) > 8:
                value_variable_hbg9 = re.sub(r"[^0-9.]", "", float_valueshbg[8].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueshbg[8] is empty or not provided
                value_variable_hbg9 = None  # or any default value you want

            # Check if float_valueshbg[9] is not empty
            if float_valueshbg and len(float_valueshbg) > 9:
                value_variable_hbg10 = re.sub(r"[^0-9.]", "", float_valueshbg[9].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueshbg[9] is empty or not provided
                value_variable_hbg10 = None  # or any default value you want

                       
            
            name_variable_hbg1 = float_nameshbg[0].replace("Step D:", "").strip()

            # Check if float_nameshbg[1] is not empty
            if float_nameshbg and len(float_nameshbg) > 1:
                name_variable_hbg2 = float_nameshbg[1].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameshbg[1] is empty or not provided
                name_variable_hbg2 = None  # or any default name you want

            # Check if float_nameshbg[2] is not empty
            if float_nameshbg and len(float_nameshbg) > 2:
                name_variable_hbg3 = float_nameshbg[2].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameshbg[2] is empty or not provided
                name_variable_hbg3 = None  # or any default name you want

            # Check if float_nameshbg[3] is not empty
            if float_nameshbg and len(float_nameshbg) > 3:
                name_variable_hbg4 = float_nameshbg[3].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameshbg[3] is empty or not provided
                name_variable_hbg4 = None  # or any default name you want

            # Check if float_nameshbg[4] is not empty
            if float_nameshbg and len(float_nameshbg) > 4:
                name_variable_hbg5 = float_nameshbg[4].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameshbg[4] is empty or not provided
                name_variable_hbg5 = None  # or any default name you want

            # Check if float_nameshbg[5] is not empty
            if float_nameshbg and len(float_nameshbg) > 5:
                name_variable_hbg6 = float_nameshbg[5].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameshbg[5] is empty or not provided
                name_variable_hbg6 = None  # or any default name you want

            # Check if float_nameshbg[6] is not empty
            if float_nameshbg and len(float_nameshbg) > 6:
                name_variable_hbg7 = float_nameshbg[6].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameshbg[6] is empty or not provided
                name_variable_hbg7 = None  # or any default name you want

            # Check if float_nameshbg[7] is not empty
            if float_nameshbg and len(float_nameshbg) > 7:
                name_variable_hbg8 = float_nameshbg[7].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameshbg[7] is empty or not provided
                name_variable_hbg8 = None  # or any default name you want

            # Check if float_nameshbg[8] is not empty
            if float_nameshbg and len(float_nameshbg) > 8:
                name_variable_hbg9 = float_nameshbg[8].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameshbg[8] is empty or not provided
                name_variable_hbg9 = None  # or any default name you want

            # Check if float_nameshbg[9] is not empty
            if float_nameshbg and len(float_nameshbg) > 9:
                name_variable_hbg10 = float_nameshbg[9].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameshbg[9] is empty or not provided
                name_variable_hbg10 = None  # or any default name you want



            if value_variable_hbg1.endswith('.'):
                value_variable_hbg1 = value_variable_hbg1[:-1]
            if value_variable_hbg1.startswith('.'):
                value_variable_hbg1 = value_variable_hbg1[1:]

            if value_variable_hbg2 is not None:
                if value_variable_hbg2.endswith('.'):
                    value_variable_hbg2 = value_variable_hbg2[:-1]
                if value_variable_hbg2.startswith('.'):
                    value_variable_hbg2 = value_variable_hbg2[1:]

            if value_variable_hbg3 is not None:
                if value_variable_hbg3.endswith('.'):
                    value_variable_hbg3 = value_variable_hbg3[:-1]
                if value_variable_hbg3.startswith('.'):
                    value_variable_hbg3 = value_variable_hbg3[1:]

            if value_variable_hbg4 is not None:
                if value_variable_hbg4.endswith('.'):
                    value_variable_hbg4 = value_variable_hbg4[:-1]
                if value_variable_hbg4.startswith('.'):
                    value_variable_hbg4 = value_variable_hbg4[1:]

            if value_variable_hbg5 is not None:
                if value_variable_hbg5.endswith('.'):
                    value_variable_hbg5 = value_variable_hbg5[:-1]
                if value_variable_hbg5.startswith('.'):
                    value_variable_hbg5 = value_variable_hbg5[1:]

            if value_variable_hbg6 is not None:
                if value_variable_hbg6.endswith('.'):
                    value_variable_hbg6 = value_variable_hbg6[:-1]
                if value_variable_hbg6.startswith('.'):
                    value_variable_hbg6 = value_variable_hbg6[1:]

            if value_variable_hbg7 is not None:
                if value_variable_hbg7.endswith('.'):
                    value_variable_hbg7 = value_variable_hbg7[:-1]
                if value_variable_hbg7.startswith('.'):
                    value_variable_hbg7 = value_variable_hbg7[1:]

            if value_variable_hbg8 is not None:
                if value_variable_hbg8.endswith('.'):
                    value_variable_hbg8 = value_variable_hbg8[:-1]
                if value_variable_hbg8.startswith('.'):
                    value_variable_hbg8 = value_variable_hbg8[1:]

            if value_variable_hbg9 is not None:
                if value_variable_hbg9.endswith('.'):
                    value_variable_hbg9 = value_variable_hbg9[:-1]
                if value_variable_hbg9.startswith('.'):
                    value_variable_hbg9 = value_variable_hbg9[1:]

            if value_variable_hbg10 is not None:
                if value_variable_hbg10.endswith('.'):
                    value_variable_hbg10 = value_variable_hbg10[:-1]
                if value_variable_hbg10.startswith('.'):
                    value_variable_hbg10 = value_variable_hbg10[1:]


            # Ensure an object is selected
            if bpy.context.selected_objects:
                    selected_obj_hbg = bpy.context.active_object  # Get the active (selected) object

                    if selected_obj_hbg.type == 'MESH':
                            mesh_name_hbg = selected_obj_hbg.name

                            # Check if the selected object has modifiers
                            if selected_obj_hbg.modifiers:
                                    modifier_name_hbg = selected_obj_hbg.modifiers.active.name  # Get the name of the active modifier
                                    
                                    # Check if float_valueshbg has 1 to 8 elements and assign the length directly
                                    num_elementshbg = len(float_valueshbg)
                                    if 1 <= num_elementshbg <= 10:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Input_36"] = num_elementshbg


                                    selected_obj_hbg.modifiers[modifier_name_hbg]["Input_7"] = title_variable_hbg
                                    selected_obj_hbg.modifiers[modifier_name_hbg]["Input_8"] = subtitle_variable_hbg
                                    selected_obj_hbg.modifiers[modifier_name_hbg]["Input_11"] = float(range_maxhbg)
                                    selected_obj_hbg.modifiers[modifier_name_hbg]["Input_14"] = float(value_variable_hbg1)

                                    # Check if value_variable_hbg2 is not empty
                                    if value_variable_hbg2:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Input_15"] = float(value_variable_hbg2)
                                    else:
                                        print("Value for Input_15 is empty or not provided.")

                                    # Check if value_variable_hbg3 is not empty
                                    if value_variable_hbg3:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Input_16"] = float(value_variable_hbg3)
                                    else:
                                        print("Value for Input_16 is empty or not provided.")

                                    # Check if value_variable_hbg4 is not empty
                                    if value_variable_hbg4:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Input_17"] = float(value_variable_hbg4)
                                    else:
                                        print("Value for Input_17 is empty or not provided.")

                                    # Check if value_variable_hbg5 is not empty
                                    if value_variable_hbg5:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_16"] = float(value_variable_hbg5)
                                    else:
                                        print("Value for Socket_16 is empty or not provided.")

                                    # Check if value_variable_hbg6 is not empty
                                    if value_variable_hbg6:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_17"] = float(value_variable_hbg6)
                                    else:
                                        print("Value for Socket_17 is empty or not provided.")

                                    # Check if value_variable_hbg7 is not empty
                                    if value_variable_hbg7:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_18"] = float(value_variable_hbg7)
                                    else:
                                        print("Value for Socket_18 is empty or not provided.")

                                    # Check if value_variable_hbg8 is not empty
                                    if value_variable_hbg8:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_19"] = float(value_variable_hbg8)
                                    else:
                                        print("Value for Socket_19 is empty or not provided.")

                                    # Check if value_variable_hbg9 is not empty
                                    if value_variable_hbg9:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_20"] = float(value_variable_hbg9)
                                    else:
                                        print("Value for Socket_20 is empty or not provided.")

                                    # Check if value_variable_hbg10 is not empty
                                    if value_variable_hbg10:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_21"] = float(value_variable_hbg10)
                                    else:
                                        print("Value for Socket_21 is empty or not provided.")


                                    selected_obj_hbg.modifiers[modifier_name_hbg]["Input_2"] = name_variable_hbg1

                                    # Check if name_variable_hbg2 is not empty before setting the input
                                    if name_variable_hbg2:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Input_3"] = name_variable_hbg2
                                    else:
                                        print("Name for Input_3 is empty or not provided.")     

                                    # Check if name_variable_hbg3 is not empty before setting the input
                                    if name_variable_hbg3:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Input_4"] = name_variable_hbg3
                                    else:
                                        print("Name for Input_4 is empty or not provided.")    

                                    # Check if name_variable_hbg4 is not empty before setting the input
                                    if name_variable_hbg4:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Input_5"] = name_variable_hbg4
                                    else:
                                        print("Name for Input_5 is empty or not provided.")    

                                    # Check if name_variable_hbg5 is not empty before setting the input
                                    if name_variable_hbg5:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_10"] = name_variable_hbg5
                                    else:
                                        print("Name for Socket_10 is empty or not provided.")    

                                    # Check if name_variable_hbg6 is not empty before setting the input
                                    if name_variable_hbg6:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_11"] = name_variable_hbg6
                                    else:
                                        print("Name for Socket_11 is empty or not provided.")  

                                    # Check if name_variable_hbg7 is not empty before setting the input
                                    if name_variable_hbg7:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_12"] = name_variable_hbg7
                                    else:
                                        print("Name for Socket_12 is empty or not provided.")  

                                    # Check if name_variable_hbg8 is not empty before setting the input
                                    if name_variable_hbg8:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_13"] = name_variable_hbg8
                                    else:
                                        print("Name for Socket_13 is empty or not provided.")

                                    # Check if name_variable_hbg9 is not empty before setting the input
                                    if name_variable_hbg9:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_14"] = name_variable_hbg9
                                    else:
                                        print("Name for Socket_14 is empty or not provided.")

                                    # Check if name_variable_hbg10 is not empty before setting the input
                                    if name_variable_hbg10:
                                        selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_15"] = name_variable_hbg10
                                    else:
                                        print("Name for Socket_15 is empty or not provided.")                                         



                                    print(f"Set modifier input for object '{mesh_name_hbg}' and modifier '{modifier_name_hbg}'.")
                            else:
                                    print(f"Selected object '{mesh_name_hbg}' has no modifiers.")
                    else:
                            print("Selected object is not a mesh.")
            else:
                    print("No object selected.")
            bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorHBGCgenai(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorhbgcgenai"
    bl_label = "Import Gen AI Data"

    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        api_key_file_path = bpy.path.abspath(mytool.my_pathapi_key)
        filepath_fullhbgcaisiteurl = bpy.path.abspath(mytool.my_stringsiteurl)
        filepath_fullhbgcaiappname = bpy.path.abspath(mytool.my_stringappname)
        filepath_fullhbgcaiapikey = read_api_key(api_key_file_path)
        
        if not filepath_fullhbgcaiapikey:
            print("Failed to read API key. Aborting operation.")
            return {'CANCELLED'}
        filepath_fullhbgcaimodelname1 = bpy.path.abspath(mytool.my_stringmodelname1)
        filepath_fullhbgcaimodelname2 = bpy.path.abspath(mytool.my_stringmodelname2)        
        filepath_fullhbgcaiinput1 = bpy.path.abspath(mytool.my_stringhorizontal_bar_gengraph_comparison1)
        filepath_fullhbgcaiinput2 = bpy.path.abspath(mytool.my_stringhorizontal_bar_gengraph_comparison2)
        filepath_fullhbgcaiinput3 = bpy.path.abspath(mytool.my_stringhorizontal_bar_gengraph_comparison3)
        filepath_fullurl = bpy.path.abspath(mytool.my_stringresponseurl)

        sub_questionhbgc = filepath_fullhbgcaiinput1
        main_questionhbgc = filepath_fullhbgcaiinput2.format(sub_questionhbgc)

        questionhbgc = f"{main_questionhbgc} {sub_questionhbgc}"

        # Replace with your actual values
        YOUR_SITE_URL = filepath_fullhbgcaisiteurl
        YOUR_APP_NAME = filepath_fullhbgcaiappname
        YOUR_API_KEY = filepath_fullhbgcaiapikey

        response = requests.post(
            url=filepath_fullurl,
            headers={
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": YOUR_APP_NAME,
                "Authorization": f"Bearer {YOUR_API_KEY}",  # Include your API key in the Authorization header
            },
            data=json.dumps({
                "model": filepath_fullhbgcaimodelname1,
                "messages": [
                    {"role": "user", "content": questionhbgc}
                ]
            })
        )

        # Parse the JSON response
        response_jsonhbgca = response.json()
        
        # Print the response for debugging
        print("Response JSON:", response_jsonhbgca)

        # Extract the answer if available
        answer_hbgc = response_jsonhbgca.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

        # Print the answer for debugging
        print("Answer Circle:", answer_hbgc)
        
                
        relevant_infohbgc = answer_hbgc
        
        if relevant_infohbgc:
            # Extract necessary details from relevant_info
            # Modify the construction of the new question based on the extracted information
            new_questionhbgc = f"{filepath_fullhbgcaiinput3}. Here's the text: {relevant_infohbgc}"

            # Make another API request with the new question
            new_response = requests.post(
                url=filepath_fullurl,
                headers={
                    "HTTP-Referer": YOUR_SITE_URL,
                    "X-Title": YOUR_APP_NAME,
                    "Authorization": f"Bearer {YOUR_API_KEY}",
                },
                data=json.dumps({
                    "model": filepath_fullhbgcaimodelname2,
                    "messages": [
                        {"role": "user", "content": new_questionhbgc}
                    ]
                })
            )

            # Parse the JSON response for the new question
            new_response_jsonhbgcb = new_response.json()
            
            # Extract the answer if available
            answer_hbgc1 = new_response_jsonhbgcb.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

            # Print the answer for debugging
            print("Answer Circle1:", answer_hbgc1)

            # Split the answer into variables based on commas
            answer_variables_hbgc = answer_hbgc1.split(';')
            
            # Split the answer further
            float_valuesahbgc = [value for value in answer_variables_hbgc[2].split('|')]
            float_valuesbhbgc = [value for value in answer_variables_hbgc[3].split('|')]
            float_namesahbgc = [value for value in answer_variables_hbgc[4].split(',')]
            float_legendhbgc = [value for value in answer_variables_hbgc[5].split(',')]
            
            # Remove letters and symbols except period
            cleaned_valuesahbgc = ["".join(char for char in value if char.isdigit() or char == '.') for value in float_valuesahbgc]

            hbgcfloat_avalues = []
            for cleaned_value in cleaned_valuesahbgc:
                if cleaned_value:  # Check if the cleaned value is not empty
                    hbgcfloat_avalues.append(float(cleaned_value))
                else:
                    hbgcfloat_avalues.append(0.0)  # or any default value you prefer

            # Remove letters and symbols except period
            cleaned_valuesbhbgc = ["".join(char for char in value if char.isdigit() or char == '.') for value in float_valuesbhbgc]

            hbgcfloat_bvalues = []
            for cleaned_value in cleaned_valuesbhbgc:
                if cleaned_value:  # Check if the cleaned value is not empty
                    hbgcfloat_bvalues.append(float(cleaned_value))
                else:
                    hbgcfloat_bvalues.append(0.0)  # or any default value you prefer
            

            # Find the maximum value
            float_valuesmaxhbgc = max(hbgcfloat_avalues + hbgcfloat_bvalues)
            print(float_valuesmaxhbgc)
        
            range_maxhbgc = 1.1 * float(float_valuesmaxhbgc)
            print("range_maxhbgc:", range_maxhbgc)

            # Now you can use the individual variables as needed
            title_variable_hbgc = answer_variables_hbgc[0].replace("Step A:", "").strip().upper()
            subtitle_variable_hbgc = answer_variables_hbgc[1].replace("Step B:", "").strip()
            legend_variable_hbgc = answer_variables_hbgc[5].replace("Step F:", "").strip()
            value_variable_ahbgc1 = re.sub(r"[^0-9.]", "", float_valuesahbgc[0].replace("Step C:", "").strip())

            # Check if float_valueshbgc[1] is not empty
            if float_valuesahbgc and len(float_valuesahbgc) > 1:
                value_variable_ahbgc2 = re.sub(r"[^0-9.]", "", float_valuesahbgc[1].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesahbgc[1] is empty or not provided
                value_variable_ahbgc2 = None  # or any default value you want

            # Check if float_valueshbgc[2] is not empty
            if float_valuesahbgc and len(float_valuesahbgc) > 2:
                value_variable_ahbgc3 = re.sub(r"[^0-9.]", "", float_valuesahbgc[2].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesahbgc[2] is empty or not provided
                value_variable_ahbgc3 = None  # or any default value you want

            # Check if float_valueshbgc[3] is not empty
            if float_valuesahbgc and len(float_valuesahbgc) > 3:
                value_variable_ahbgc4 = re.sub(r"[^0-9.]", "", float_valuesahbgc[3].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesahbgc[3] is empty or not provided
                value_variable_ahbgc4 = None  # or any default value you want

            # Check if float_valueshbgc[4] is not empty
            if float_valuesahbgc and len(float_valuesahbgc) > 4:
                value_variable_ahbgc5 = re.sub(r"[^0-9.]", "", float_valuesahbgc[4].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesahbgc[4] is empty or not provided
                value_variable_ahbgc5 = None  # or any default value you want

            # Check if float_valueshbgc[5] is not empty
            if float_valuesahbgc and len(float_valuesahbgc) > 5:
                value_variable_ahbgc6 = re.sub(r"[^0-9.]", "", float_valuesahbgc[5].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesahbgc[5] is empty or not provided
                value_variable_ahbgc6 = None  # or any default value you want

            # Check if float_valueshbgc[6] is not empty
            if float_valuesahbgc and len(float_valuesahbgc) > 6:
                value_variable_ahbgc7 = re.sub(r"[^0-9.]", "", float_valuesahbgc[6].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesahbgc[6] is empty or not provided
                value_variable_ahbgc7 = None  # or any default value you want

            # Check if float_valuesahbgc[7] is not empty
            if float_valuesahbgc and len(float_valuesahbgc) > 7:
                value_variable_ahbgc8 = re.sub(r"[^0-9.]", "", float_valuesahbgc[7].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesahbgc[7] is empty or not provided
                value_variable_ahbgc8 = None  # or any default value you want
                
            # Check if float_valuesahbgc[8] is not empty
            if float_valuesahbgc and len(float_valuesahbgc) > 8:
                value_variable_ahbgc9 = re.sub(r"[^0-9.]", "", float_valuesahbgc[8].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesahbgc[8] is empty or not provided
                value_variable_ahbgc9 = None  # or any default value you want

            # Check if float_valuesbhbgc[0] is not empty
            if float_valuesbhbgc and len(float_valuesbhbgc) > 0:
                value_variable_bhbgc1 = re.sub(r"[^0-9.]", "", float_valuesbhbgc[0].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbhbgc[0] is empty or not provided
                value_variable_bhbgc1= None  # or any default value you want

            # Check if float_valuesbhbgc[1] is not empty
            if float_valuesbhbgc and len(float_valuesbhbgc) > 1:
                value_variable_bhbgc2 = re.sub(r"[^0-9.]", "", float_valuesbhbgc[1].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbhbgc[1] is empty or not provided
                value_variable_bhbgc2= None  # or any default value you want

            # Check if float_valuesbhbgc[2] is not empty
            if float_valuesbhbgc and len(float_valuesbhbgc) > 2:
                value_variable_bhbgc3 = re.sub(r"[^0-9.]", "", float_valuesbhbgc[2].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbhbgc[2] is empty or not provided
                value_variable_bhbgc3= None  # or any default value you want

            # Check if float_valuesbhbgc[3] is not empty
            if float_valuesbhbgc and len(float_valuesbhbgc) > 3:
                value_variable_bhbgc4 = re.sub(r"[^0-9.]", "", float_valuesbhbgc[3].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbhbgc[3] is empty or not provided
                value_variable_bhbgc4= None  # or any default value you want

            # Check if float_valuesbhbgc[4] is not empty
            if float_valuesbhbgc and len(float_valuesbhbgc) > 4:
                value_variable_bhbgc5 = re.sub(r"[^0-9.]", "", float_valuesbhbgc[4].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbhbgc[4] is empty or not provided
                value_variable_bhbgc5= None  # or any default value you want

            # Check if float_valuesbhbgc[5] is not empty
            if float_valuesbhbgc and len(float_valuesbhbgc) > 5:
                value_variable_bhbgc6 = re.sub(r"[^0-9.]", "", float_valuesbhbgc[5].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbhbgc[5] is empty or not provided
                value_variable_bhbgc6= None  # or any default value you want

            # Check if float_valuesbhbgc[6] is not empty
            if float_valuesbhbgc and len(float_valuesbhbgc) > 6:
                value_variable_bhbgc7 = re.sub(r"[^0-9.]", "", float_valuesbhbgc[6].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbhbgc[6] is empty or not provided
                value_variable_bhbgc7= None  # or any default value you want

            # Check if float_valuesbhbgc[7] is not empty
            if float_valuesbhbgc and len(float_valuesbhbgc) > 7:
                value_variable_bhbgc8 = re.sub(r"[^0-9.]", "", float_valuesbhbgc[7].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbhbgc[7] is empty or not provided
                value_variable_bhbgc8= None  # or any default value you want
                
            # Check if float_valuesbhbgc[8] is not empty
            if float_valuesbhbgc and len(float_valuesbhbgc) > 8:
                value_variable_bhbgc9= re.sub(r"[^0-9.]", "", float_valuesbhbgc[8].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbhbgc[8] is empty or not provided
                value_variable_bhbgc9= None  # or any default value you want

                       
            
            name_variable_ahbgc1 = float_namesahbgc[0].replace("Step E:", "").strip()

            # Check if float_nameshbgc[1] is not empty
            if float_namesahbgc and len(float_namesahbgc) > 1:
                name_variable_ahbgc2 = float_namesahbgc[1].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesahbgc[1] is empty or not provided
                name_variable_ahbgc2 = None  # or any default name you want

            # Check if float_nameshbgc[2] is not empty
            if float_namesahbgc and len(float_namesahbgc) > 2:
                name_variable_ahbgc3 = float_namesahbgc[2].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesahbgc[2] is empty or not provided
                name_variable_ahbgc3 = None  # or any default name you want

            # Check if float_nameshbgc[3] is not empty
            if float_namesahbgc and len(float_namesahbgc) > 3:
                name_variable_ahbgc4 = float_namesahbgc[3].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesahbgc[3] is empty or not provided
                name_variable_ahbgc4 = None  # or any default name you want

            # Check if float_nameshbgc[4] is not empty
            if float_namesahbgc and len(float_namesahbgc) > 4:
                name_variable_ahbgc5 = float_namesahbgc[4].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesahbgc[4] is empty or not provided
                name_variable_ahbgc5 = None  # or any default name you want

            # Check if float_nameshbgc[5] is not empty
            if float_namesahbgc and len(float_namesahbgc) > 5:
                name_variable_ahbgc6 = float_namesahbgc[5].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesahbgc[5] is empty or not provided
                name_variable_ahbgc6 = None  # or any default name you want

            # Check if float_nameshbgc[6] is not empty
            if float_namesahbgc and len(float_namesahbgc) > 6:
                name_variable_ahbgc7 = float_namesahbgc[6].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesahbgc[6] is empty or not provided
                name_variable_ahbgc7 = None  # or any default name you want

            # Check if float_nameshbgc[7] is not empty
            if float_namesahbgc and len(float_namesahbgc) > 7:
                name_variable_ahbgc8 = float_namesahbgc[7].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesahbgc[7] is empty or not provided
                name_variable_ahbgc8 = None  # or any default name you want
                
            # Check if float_nameshbgc[8] is not empty
            if float_namesahbgc and len(float_namesahbgc) > 8:
                name_variable_ahbgc9 = float_namesahbgc[8].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesahbgc[8] is empty or not provided
                name_variable_ahbgc9 = None  # or any default name you want





            if value_variable_ahbgc1.endswith('.'):
                value_variable_ahbgc1 = value_variable_ahbgc1[:-1]
            if value_variable_ahbgc1.startswith('.'):
                value_variable_ahbgc1 = value_variable_ahbgc1[1:]

            if value_variable_ahbgc2 is not None:
                if value_variable_ahbgc2.endswith('.'):
                    value_variable_ahbgc2 = value_variable_ahbgc2[:-1]
                if value_variable_ahbgc2.startswith('.'):
                    value_variable_ahbgc2 = value_variable_ahbgc2[1:]

            if value_variable_ahbgc3 is not None:
                if value_variable_ahbgc3.endswith('.'):
                    value_variable_ahbgc3 = value_variable_ahbgc3[:-1]
                if value_variable_ahbgc3.startswith('.'):
                    value_variable_ahbgc3 = value_variable_ahbgc3[1:]

            if value_variable_ahbgc4 is not None:
                if value_variable_ahbgc4.endswith('.'):
                    value_variable_ahbgc4 = value_variable_ahbgc4[:-1]
                if value_variable_ahbgc4.startswith('.'):
                    value_variable_ahbgc4 = value_variable_ahbgc4[1:]

            if value_variable_ahbgc5 is not None:
                if value_variable_ahbgc5.endswith('.'):
                    value_variable_ahbgc5 = value_variable_ahbgc5[:-1]
                if value_variable_ahbgc5.startswith('.'):
                    value_variable_ahbgc5 = value_variable_ahbgc5[1:]

            if value_variable_ahbgc6 is not None:
                if value_variable_ahbgc6.endswith('.'):
                    value_variable_ahbgc6 = value_variable_ahbgc6[:-1]
                if value_variable_ahbgc6.startswith('.'):
                    value_variable_ahbgc6 = value_variable_ahbgc6[1:]

            if value_variable_ahbgc7 is not None:
                if value_variable_ahbgc7.endswith('.'):
                    value_variable_ahbgc7 = value_variable_ahbgc7[:-1]
                if value_variable_ahbgc7.startswith('.'):
                    value_variable_ahbgc7 = value_variable_ahbgc7[1:]

            if value_variable_ahbgc8 is not None:
                if value_variable_ahbgc8.endswith('.'):
                    value_variable_ahbgc8 = value_variable_ahbgc8[:-1]
                if value_variable_ahbgc8.startswith('.'):
                    value_variable_ahbgc8 = value_variable_ahbgc8[1:]
                    
            if value_variable_ahbgc9 is not None:
                if value_variable_ahbgc9.endswith('.'):
                    value_variable_ahbgc9 = value_variable_ahbgc9[:-1]
                if value_variable_ahbgc9.startswith('.'):
                    value_variable_ahbgc9 = value_variable_ahbgc9[1:]

            if value_variable_bhbgc1.endswith('.'):
                value_variable_bhbgc1 = value_variable_bhbgc1[:-1]
            if value_variable_bhbgc1.startswith('.'):
                value_variable_bhbgc1 = value_variable_bhbgc1[1:]

            if value_variable_bhbgc2 is not None:
                if value_variable_bhbgc2.endswith('.'):
                    value_variable_bhbgc2 = value_variable_bhbgc2[:-1]
                if value_variable_bhbgc2.startswith('.'):
                    value_variable_bhbgc2 = value_variable_bhbgc2[1:]

            if value_variable_bhbgc3 is not None:
                if value_variable_bhbgc3.endswith('.'):
                    value_variable_bhbgc3 = value_variable_bhbgc3[:-1]
                if value_variable_bhbgc3.startswith('.'):
                    value_variable_bhbgc3 = value_variable_bhbgc3[1:]

            if value_variable_bhbgc4 is not None:
                if value_variable_bhbgc4.endswith('.'):
                    value_variable_bhbgc4 = value_variable_bhbgc4[:-1]
                if value_variable_bhbgc4.startswith('.'):
                    value_variable_bhbgc4 = value_variable_bhbgc4[1:]

            if value_variable_bhbgc5 is not None:
                if value_variable_bhbgc5.endswith('.'):
                    value_variable_bhbgc5 = value_variable_bhbgc5[:-1]
                if value_variable_bhbgc5.startswith('.'):
                    value_variable_bhbgc5 = value_variable_bhbgc5[1:]

            if value_variable_bhbgc6 is not None:
                if value_variable_bhbgc6.endswith('.'):
                    value_variable_bhbgc6 = value_variable_bhbgc6[:-1]
                if value_variable_bhbgc6.startswith('.'):
                    value_variable_bhbgc6 = value_variable_bhbgc6[1:]

            if value_variable_bhbgc7 is not None:
                if value_variable_bhbgc7.endswith('.'):
                    value_variable_bhbgc7 = value_variable_bhbgc7[:-1]
                if value_variable_bhbgc7.startswith('.'):
                    value_variable_bhbgc7 = value_variable_bhbgc7[1:]

            if value_variable_bhbgc8 is not None:
                if value_variable_bhbgc8.endswith('.'):
                    value_variable_bhbgc8 = value_variable_bhbgc8[:-1]
                if value_variable_bhbgc8.startswith('.'):
                    value_variable_bhbgc8 = value_variable_bhbgc8[1:]
                    
            if value_variable_bhbgc9 is not None:
                if value_variable_bhbgc9.endswith('.'):
                    value_variable_bhbgc9 = value_variable_bhbgc9[:-1]
                if value_variable_bhbgc9.startswith('.'):
                    value_variable_bhbgc9 = value_variable_bhbgc9[1:]



            # Ensure an object is selected
            if bpy.context.selected_objects:
                    selected_obj_hbgc = bpy.context.active_object  # Get the active (selected) object

                    if selected_obj_hbgc.type == 'MESH':
                            mesh_name_hbgc = selected_obj_hbgc.name

                            # Check if the selected object has modifiers
                            if selected_obj_hbgc.modifiers:
                                    modifier_name_hbgc = selected_obj_hbgc.modifiers.active.name  # Get the name of the active modifier
                                    
                                    # Check if float_valueshbgc has 1 to 9 elements and assign the length directly
                                    num_elementshbgc = len(float_valuesahbgc)
                                    if 1 <= num_elementshbgc <= 9:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_45"] = num_elementshbgc


                                    selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_7"] = title_variable_hbgc
                                    selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_8"] = subtitle_variable_hbgc
                                    selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_11"] = float(range_maxhbgc)
                                    selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_6"] = float_legendhbgc[0]
                                    selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_40"] = float_legendhbgc[1] 
                                    selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_14"] = float(value_variable_ahbgc1)

                                    # Check if value_variable_ahbgc2 is not empty
                                    if value_variable_ahbgc2:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_15"] = float(value_variable_ahbgc2)
                                    else:
                                        print("Value for Input_15 is empty or not provided.")

                                    # Check if value_variable_ahbgc3 is not empty
                                    if value_variable_ahbgc3:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_16"] = float(value_variable_ahbgc3)
                                    else:
                                        print("Value for Input_16 is empty or not provided.")

                                    # Check if value_variable_ahbgc4 is not empty
                                    if value_variable_ahbgc4:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_17"] = float(value_variable_ahbgc4)
                                    else:
                                        print("Value for Input_17 is empty or not provided.")

                                    # Check if value_variable_ahbgc5 is not empty
                                    if value_variable_ahbgc5:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_71"] = float(value_variable_ahbgc5)
                                    else:
                                        print("Value for Input_71 is empty or not provided.")

                                    # Check if value_variable_ahbgc6 is not empty
                                    if value_variable_ahbgc6:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_73"] = float(value_variable_ahbgc6)
                                    else:
                                        print("Value for Input_73 is empty or not provided.")

                                    # Check if value_variable_ahbgc7 is not empty
                                    if value_variable_ahbgc7:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_75"] = float(value_variable_ahbgc7)
                                    else:
                                        print("Value for Input_75 is empty or not provided.")

                                    # Check if value_variable_ahbgc8 is not empty
                                    if value_variable_ahbgc8:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_77"] = float(value_variable_ahbgc8)
                                    else:
                                        print("Value for Input_77 is empty or not provided.")
                                        
                                    # Check if value_variable_ahbgc9 is not empty
                                    if value_variable_ahbgc9:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_79"] = float(value_variable_ahbgc9)
                                    else:
                                        print("Value for Input_79 is empty or not provided.")





                                    # Check if value_variable_bhbgc1 is not empty
                                    if value_variable_bhbgc1:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_36"] = float(value_variable_bhbgc1)
                                    else:
                                        print("Value for Input_36 is empty or not provided.")

                                    # Check if value_variable_bhbgc2 is not empty
                                    if value_variable_bhbgc2:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_37"] = float(value_variable_bhbgc2)
                                    else:
                                        print("Value for Input_37 is empty or not provided.")

                                    # Check if value_variable_bhbgc3 is not empty
                                    if value_variable_bhbgc3:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_38"] = float(value_variable_bhbgc3)
                                    else:
                                        print("Value for Input_38 is empty or not provided.")

                                    # Check if value_variable_bhbgc4 is not empty
                                    if value_variable_bhbgc4:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_39"] = float(value_variable_bhbgc4)
                                    else:
                                        print("Value for Input_39 is empty or not provided.")

                                    # Check if value_variable_bhbgc5 is not empty
                                    if value_variable_bhbgc5:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_72"] = float(value_variable_bhbgc5)
                                    else:
                                        print("Value for Input_72 is empty or not provided.")

                                    # Check if value_variable_bhbgc6 is not empty
                                    if value_variable_bhbgc6:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_74"] = float(value_variable_bhbgc6)
                                    else:
                                        print("Value for Input_74 is empty or not provided.")

                                    # Check if value_variable_bhbgc7 is not empty
                                    if value_variable_bhbgc7:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_76"] = float(value_variable_bhbgc7)
                                    else:
                                        print("Value for Input_76 is empty or not provided.")

                                    # Check if value_variable_bhbgc8 is not empty
                                    if value_variable_bhbgc8:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_78"] = float(value_variable_bhbgc8)
                                    else:
                                        print("Value for Input_78 is empty or not provided.")
                                        
                                    # Check if value_variable_bhbgc9 is not empty
                                    if value_variable_bhbgc9:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_80"] = float(value_variable_bhbgc9)
                                    else:
                                        print("Value for Input_80 is empty or not provided.")



                                    selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_2"] = name_variable_ahbgc1

                                    # Check if name_variable_ahbgc2 is not empty before setting the input
                                    if name_variable_ahbgc2:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_3"] = name_variable_ahbgc2
                                    else:
                                        print("Name for Input_3 is empty or not provided.")     

                                    # Check if name_variable_ahbgc3 is not empty before setting the input
                                    if name_variable_ahbgc3:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_4"] = name_variable_ahbgc3
                                    else:
                                        print("Name for Input_4 is empty or not provided.")    

                                    # Check if name_variable_ahbgc4 is not empty before setting the input
                                    if name_variable_ahbgc4:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_5"] = name_variable_ahbgc4
                                    else:
                                        print("Name for Input_5 is empty or not provided.")    

                                    # Check if name_variable_ahbgc5 is not empty before setting the input
                                    if name_variable_ahbgc5:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_66"] = name_variable_ahbgc5
                                    else:
                                        print("Name for Input_66 is empty or not provided.")    

                                    # Check if name_variable_ahbgc6 is not empty before setting the input
                                    if name_variable_ahbgc6:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_67"] = name_variable_ahbgc6
                                    else:
                                        print("Name for Input_67 is empty or not provided.")  

                                    # Check if name_variable_ahbgc7 is not empty before setting the input
                                    if name_variable_ahbgc7:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_68"] = name_variable_ahbgc7
                                    else:
                                        print("Name for Input_68 is empty or not provided.")  

                                    # Check if name_variable_ahbgc8 is not empty before setting the input
                                    if name_variable_ahbgc8:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_69"] = name_variable_ahbgc8
                                    else:
                                        print("Name for Input_69 is empty or not provided.")
                                        
                                    # Check if name_variable_ahbgc9 is not empty before setting the input
                                    if name_variable_ahbgc9:
                                        selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_70"] = name_variable_ahbgc9
                                    else:
                                        print("Name for Input_70 is empty or not provided.")

                                       



                                    print(f"Set modifier input for object '{mesh_name_hbgc}' and modifier '{modifier_name_hbgc}'.")
                            else:
                                    print(f"Selected object '{mesh_name_hbgc}' has no modifiers.")
                    else:
                            print("Selected object is not a mesh.")
            else:
                    print("No object selected.")
            bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorVBGCgenai(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorvbgcgenai"
    bl_label = "Import Gen AI Data"

    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        api_key_file_path = bpy.path.abspath(mytool.my_pathapi_key)
        filepath_fullvbgcaisiteurl = bpy.path.abspath(mytool.my_stringsiteurl)
        filepath_fullvbgcaiappname = bpy.path.abspath(mytool.my_stringappname)
        filepath_fullvbgcaiapikey = read_api_key(api_key_file_path)
        
        if not filepath_fullvbgcaiapikey:
            print("Failed to read API key. Aborting operation.")
            return {'CANCELLED'}
        filepath_fullvbgcaimodelname1 = bpy.path.abspath(mytool.my_stringmodelname1)
        filepath_fullvbgcaimodelname2 = bpy.path.abspath(mytool.my_stringmodelname2)        
        filepath_fullvbgcaiinput1 = bpy.path.abspath(mytool.my_stringvertical_bar_gengraph_comparison1)
        filepath_fullvbgcaiinput2 = bpy.path.abspath(mytool.my_stringvertical_bar_gengraph_comparison2)
        filepath_fullvbgcaiinput3 = bpy.path.abspath(mytool.my_stringvertical_bar_gengraph_comparison3)
        filepath_fullurl = bpy.path.abspath(mytool.my_stringresponseurl)

        sub_questionvbgc = filepath_fullvbgcaiinput1
        main_questionvbgc = filepath_fullvbgcaiinput2.format(sub_questionvbgc)

        questionvbgc = f"{main_questionvbgc} {sub_questionvbgc}"

        # Replace with your actual values
        YOUR_SITE_URL = filepath_fullvbgcaisiteurl
        YOUR_APP_NAME = filepath_fullvbgcaiappname
        YOUR_API_KEY = filepath_fullvbgcaiapikey

        response = requests.post(
            url=filepath_fullurl,
            headers={
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": YOUR_APP_NAME,
                "Authorization": f"Bearer {YOUR_API_KEY}",  # Include your API key in the Authorization header
            },
            data=json.dumps({
                "model": filepath_fullvbgcaimodelname1,
                "messages": [
                    {"role": "user", "content": questionvbgc}
                ]
            })
        )

        # Parse the JSON response
        response_jsonvbgca = response.json()
        
        # Print the response for debugging
        print("Response JSON:", response_jsonvbgca)

        # Extract the answer if available
        answer_vbgc = response_jsonvbgca.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

        # Print the answer for debugging
        print("Answer Circle:", answer_vbgc)
        
                
        relevant_infovbgc = answer_vbgc
        
        if relevant_infovbgc:
            # Extract necessary details from relevant_info
            # Modify the construction of the new question based on the extracted information
            new_questionvbgc = f"{filepath_fullvbgcaiinput3}. Here's the text: {relevant_infovbgc}"

            # Make another API request with the new question
            new_response = requests.post(
                url=filepath_fullurl,
                headers={
                    "HTTP-Referer": YOUR_SITE_URL,
                    "X-Title": YOUR_APP_NAME,
                    "Authorization": f"Bearer {YOUR_API_KEY}",
                },
                data=json.dumps({
                    "model": filepath_fullvbgcaimodelname2,
                    "messages": [
                        {"role": "user", "content": new_questionvbgc}
                    ]
                })
            )

            # Parse the JSON response for the new question
            new_response_jsonvbgcb = new_response.json()
            
            # Extract the answer if available
            answer_vbgc1 = new_response_jsonvbgcb.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

            # Print the answer for debugging
            print("Answer Circle1:", answer_vbgc1)

            # Split the answer into variables based on commas
            answer_variables_vbgc = answer_vbgc1.split(';')
            
            # Split the answer further
            float_valuesavbgc = [value for value in answer_variables_vbgc[2].split('|')]
            float_valuesbvbgc = [value for value in answer_variables_vbgc[3].split('|')]
            float_namesavbgc = [value for value in answer_variables_vbgc[4].split(',')]
            float_legendvbgc = [value for value in answer_variables_vbgc[5].split(',')]
            
            # Remove letters and symbols except period
            cleaned_valuesavbgc = ["".join(char for char in value if char.isdigit() or char == '.') for value in float_valuesavbgc]

            vbgcfloat_avalues = []
            for cleaned_value in cleaned_valuesavbgc:
                if cleaned_value:  # Check if the cleaned value is not empty
                    vbgcfloat_avalues.append(float(cleaned_value))
                else:
                    vbgcfloat_avalues.append(0.0)  # or any default value you prefer

            # Remove letters and symbols except period
            cleaned_valuesbvbgc = ["".join(char for char in value if char.isdigit() or char == '.') for value in float_valuesbvbgc]

            vbgcfloat_bvalues = []
            for cleaned_value in cleaned_valuesbvbgc:
                if cleaned_value:  # Check if the cleaned value is not empty
                    vbgcfloat_bvalues.append(float(cleaned_value))
                else:
                    vbgcfloat_bvalues.append(0.0)  # or any default value you prefer
            

            # Find the maximum value
            float_valuesmaxvbgc = max(vbgcfloat_avalues + vbgcfloat_bvalues)
            print(float_valuesmaxvbgc)
        
            range_maxvbgc = 1.1 * float(float_valuesmaxvbgc)
            print("range_maxvbgc:", range_maxvbgc)

            # Now you can use the individual variables as needed
            title_variable_vbgc = answer_variables_vbgc[0].replace("Step A:", "").strip().upper()
            subtitle_variable_vbgc = answer_variables_vbgc[1].replace("Step B:", "").strip()
            legend_variable_vbgc = answer_variables_vbgc[5].replace("Step F:", "").strip()
            value_variable_avbgc1 = re.sub(r"[^0-9.]", "", float_valuesavbgc[0].replace("Step C:", "").strip())

            # Check if float_valuesvbgc[1] is not empty
            if float_valuesavbgc and len(float_valuesavbgc) > 1:
                value_variable_avbgc2 = re.sub(r"[^0-9.]", "", float_valuesavbgc[1].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesavbgc[1] is empty or not provided
                value_variable_avbgc2 = None  # or any default value you want

            # Check if float_valuesvbgc[2] is not empty
            if float_valuesavbgc and len(float_valuesavbgc) > 2:
                value_variable_avbgc3 = re.sub(r"[^0-9.]", "", float_valuesavbgc[2].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesavbgc[2] is empty or not provided
                value_variable_avbgc3 = None  # or any default value you want

            # Check if float_valuesvbgc[3] is not empty
            if float_valuesavbgc and len(float_valuesavbgc) > 3:
                value_variable_avbgc4 = re.sub(r"[^0-9.]", "", float_valuesavbgc[3].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesavbgc[3] is empty or not provided
                value_variable_avbgc4 = None  # or any default value you want

            # Check if float_valuesvbgc[4] is not empty
            if float_valuesavbgc and len(float_valuesavbgc) > 4:
                value_variable_avbgc5 = re.sub(r"[^0-9.]", "", float_valuesavbgc[4].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesavbgc[4] is empty or not provided
                value_variable_avbgc5 = None  # or any default value you want

            # Check if float_valuesvbgc[5] is not empty
            if float_valuesavbgc and len(float_valuesavbgc) > 5:
                value_variable_avbgc6 = re.sub(r"[^0-9.]", "", float_valuesavbgc[5].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesavbgc[5] is empty or not provided
                value_variable_avbgc6 = None  # or any default value you want

            # Check if float_valuesvbgc[6] is not empty
            if float_valuesavbgc and len(float_valuesavbgc) > 6:
                value_variable_avbgc7 = re.sub(r"[^0-9.]", "", float_valuesavbgc[6].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesavbgc[6] is empty or not provided
                value_variable_avbgc7 = None  # or any default value you want

            # Check if float_valuesavbgc[7] is not empty
            if float_valuesavbgc and len(float_valuesavbgc) > 7:
                value_variable_avbgc8 = re.sub(r"[^0-9.]", "", float_valuesavbgc[7].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesavbgc[7] is empty or not provided
                value_variable_avbgc8 = None  # or any default value you want
                


            # Check if float_valuesbvbgc[0] is not empty
            if float_valuesbvbgc and len(float_valuesbvbgc) > 0:
                value_variable_bvbgc1 = re.sub(r"[^0-9.]", "", float_valuesbvbgc[0].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbvbgc[0] is empty or not provided
                value_variable_bvbgc1= None  # or any default value you want

            # Check if float_valuesbvbgc[1] is not empty
            if float_valuesbvbgc and len(float_valuesbvbgc) > 1:
                value_variable_bvbgc2 = re.sub(r"[^0-9.]", "", float_valuesbvbgc[1].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbvbgc[1] is empty or not provided
                value_variable_bvbgc2= None  # or any default value you want

            # Check if float_valuesbvbgc[2] is not empty
            if float_valuesbvbgc and len(float_valuesbvbgc) > 2:
                value_variable_bvbgc3 = re.sub(r"[^0-9.]", "", float_valuesbvbgc[2].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbvbgc[2] is empty or not provided
                value_variable_bvbgc3= None  # or any default value you want

            # Check if float_valuesbvbgc[3] is not empty
            if float_valuesbvbgc and len(float_valuesbvbgc) > 3:
                value_variable_bvbgc4 = re.sub(r"[^0-9.]", "", float_valuesbvbgc[3].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbvbgc[3] is empty or not provided
                value_variable_bvbgc4= None  # or any default value you want

            # Check if float_valuesbvbgc[4] is not empty
            if float_valuesbvbgc and len(float_valuesbvbgc) > 4:
                value_variable_bvbgc5 = re.sub(r"[^0-9.]", "", float_valuesbvbgc[4].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbvbgc[4] is empty or not provided
                value_variable_bvbgc5= None  # or any default value you want

            # Check if float_valuesbvbgc[5] is not empty
            if float_valuesbvbgc and len(float_valuesbvbgc) > 5:
                value_variable_bvbgc6 = re.sub(r"[^0-9.]", "", float_valuesbvbgc[5].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbvbgc[5] is empty or not provided
                value_variable_bvbgc6= None  # or any default value you want

            # Check if float_valuesbvbgc[6] is not empty
            if float_valuesbvbgc and len(float_valuesbvbgc) > 6:
                value_variable_bvbgc7 = re.sub(r"[^0-9.]", "", float_valuesbvbgc[6].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbvbgc[6] is empty or not provided
                value_variable_bvbgc7= None  # or any default value you want

            # Check if float_valuesbvbgc[7] is not empty
            if float_valuesbvbgc and len(float_valuesbvbgc) > 7:
                value_variable_bvbgc8 = re.sub(r"[^0-9.]", "", float_valuesbvbgc[7].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbvbgc[7] is empty or not provided
                value_variable_bvbgc8= None  # or any default value you want
                


                       
            
            name_variable_avbgc1 = float_namesavbgc[0].replace("Step E:", "").strip()

            # Check if float_namesvbgc[1] is not empty
            if float_namesavbgc and len(float_namesavbgc) > 1:
                name_variable_avbgc2 = float_namesavbgc[1].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesavbgc[1] is empty or not provided
                name_variable_avbgc2 = None  # or any default name you want

            # Check if float_namesvbgc[2] is not empty
            if float_namesavbgc and len(float_namesavbgc) > 2:
                name_variable_avbgc3 = float_namesavbgc[2].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesavbgc[2] is empty or not provided
                name_variable_avbgc3 = None  # or any default name you want

            # Check if float_namesvbgc[3] is not empty
            if float_namesavbgc and len(float_namesavbgc) > 3:
                name_variable_avbgc4 = float_namesavbgc[3].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesavbgc[3] is empty or not provided
                name_variable_avbgc4 = None  # or any default name you want

            # Check if float_namesvbgc[4] is not empty
            if float_namesavbgc and len(float_namesavbgc) > 4:
                name_variable_avbgc5 = float_namesavbgc[4].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesavbgc[4] is empty or not provided
                name_variable_avbgc5 = None  # or any default name you want

            # Check if float_namesvbgc[5] is not empty
            if float_namesavbgc and len(float_namesavbgc) > 5:
                name_variable_avbgc6 = float_namesavbgc[5].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesavbgc[5] is empty or not provided
                name_variable_avbgc6 = None  # or any default name you want

            # Check if float_namesvbgc[6] is not empty
            if float_namesavbgc and len(float_namesavbgc) > 6:
                name_variable_avbgc7 = float_namesavbgc[6].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesavbgc[6] is empty or not provided
                name_variable_avbgc7 = None  # or any default name you want

            # Check if float_namesvbgc[7] is not empty
            if float_namesavbgc and len(float_namesavbgc) > 7:
                name_variable_avbgc8 = float_namesavbgc[7].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesavbgc[7] is empty or not provided
                name_variable_avbgc8 = None  # or any default name you want
                






            if value_variable_avbgc1.endswith('.'):
                value_variable_avbgc1 = value_variable_avbgc1[:-1]
            if value_variable_avbgc1.startswith('.'):
                value_variable_avbgc1 = value_variable_avbgc1[1:]

            if value_variable_avbgc2 is not None:
                if value_variable_avbgc2.endswith('.'):
                    value_variable_avbgc2 = value_variable_avbgc2[:-1]
                if value_variable_avbgc2.startswith('.'):
                    value_variable_avbgc2 = value_variable_avbgc2[1:]

            if value_variable_avbgc3 is not None:
                if value_variable_avbgc3.endswith('.'):
                    value_variable_avbgc3 = value_variable_avbgc3[:-1]
                if value_variable_avbgc3.startswith('.'):
                    value_variable_avbgc3 = value_variable_avbgc3[1:]

            if value_variable_avbgc4 is not None:
                if value_variable_avbgc4.endswith('.'):
                    value_variable_avbgc4 = value_variable_avbgc4[:-1]
                if value_variable_avbgc4.startswith('.'):
                    value_variable_avbgc4 = value_variable_avbgc4[1:]

            if value_variable_avbgc5 is not None:
                if value_variable_avbgc5.endswith('.'):
                    value_variable_avbgc5 = value_variable_avbgc5[:-1]
                if value_variable_avbgc5.startswith('.'):
                    value_variable_avbgc5 = value_variable_avbgc5[1:]

            if value_variable_avbgc6 is not None:
                if value_variable_avbgc6.endswith('.'):
                    value_variable_avbgc6 = value_variable_avbgc6[:-1]
                if value_variable_avbgc6.startswith('.'):
                    value_variable_avbgc6 = value_variable_avbgc6[1:]

            if value_variable_avbgc7 is not None:
                if value_variable_avbgc7.endswith('.'):
                    value_variable_avbgc7 = value_variable_avbgc7[:-1]
                if value_variable_avbgc7.startswith('.'):
                    value_variable_avbgc7 = value_variable_avbgc7[1:]

            if value_variable_avbgc8 is not None:
                if value_variable_avbgc8.endswith('.'):
                    value_variable_avbgc8 = value_variable_avbgc8[:-1]
                if value_variable_avbgc8.startswith('.'):
                    value_variable_avbgc8 = value_variable_avbgc8[1:]
                    


            if value_variable_bvbgc1.endswith('.'):
                value_variable_bvbgc1 = value_variable_bvbgc1[:-1]
            if value_variable_bvbgc1.startswith('.'):
                value_variable_bvbgc1 = value_variable_bvbgc1[1:]

            if value_variable_bvbgc2 is not None:
                if value_variable_bvbgc2.endswith('.'):
                    value_variable_bvbgc2 = value_variable_bvbgc2[:-1]
                if value_variable_bvbgc2.startswith('.'):
                    value_variable_bvbgc2 = value_variable_bvbgc2[1:]

            if value_variable_bvbgc3 is not None:
                if value_variable_bvbgc3.endswith('.'):
                    value_variable_bvbgc3 = value_variable_bvbgc3[:-1]
                if value_variable_bvbgc3.startswith('.'):
                    value_variable_bvbgc3 = value_variable_bvbgc3[1:]

            if value_variable_bvbgc4 is not None:
                if value_variable_bvbgc4.endswith('.'):
                    value_variable_bvbgc4 = value_variable_bvbgc4[:-1]
                if value_variable_bvbgc4.startswith('.'):
                    value_variable_bvbgc4 = value_variable_bvbgc4[1:]

            if value_variable_bvbgc5 is not None:
                if value_variable_bvbgc5.endswith('.'):
                    value_variable_bvbgc5 = value_variable_bvbgc5[:-1]
                if value_variable_bvbgc5.startswith('.'):
                    value_variable_bvbgc5 = value_variable_bvbgc5[1:]

            if value_variable_bvbgc6 is not None:
                if value_variable_bvbgc6.endswith('.'):
                    value_variable_bvbgc6 = value_variable_bvbgc6[:-1]
                if value_variable_bvbgc6.startswith('.'):
                    value_variable_bvbgc6 = value_variable_bvbgc6[1:]

            if value_variable_bvbgc7 is not None:
                if value_variable_bvbgc7.endswith('.'):
                    value_variable_bvbgc7 = value_variable_bvbgc7[:-1]
                if value_variable_bvbgc7.startswith('.'):
                    value_variable_bvbgc7 = value_variable_bvbgc7[1:]

            if value_variable_bvbgc8 is not None:
                if value_variable_bvbgc8.endswith('.'):
                    value_variable_bvbgc8 = value_variable_bvbgc8[:-1]
                if value_variable_bvbgc8.startswith('.'):
                    value_variable_bvbgc8 = value_variable_bvbgc8[1:]
                    




            # Ensure an object is selected
            if bpy.context.selected_objects:
                    selected_obj_vbgc = bpy.context.active_object  # Get the active (selected) object

                    if selected_obj_vbgc.type == 'MESH':
                            mesh_name_vbgc = selected_obj_vbgc.name

                            # Check if the selected object has modifiers
                            if selected_obj_vbgc.modifiers:
                                    modifier_name_vbgc = selected_obj_vbgc.modifiers.active.name  # Get the name of the active modifier
                                    
                                    # Check if float_valuesvbgc has 1 to 9 elements and assign the length directly
                                    num_elementsvbgc = len(float_valuesavbgc)
                                    if 1 <= num_elementsvbgc <= 9:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_45"] = num_elementsvbgc


                                    selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_7"] = title_variable_vbgc
                                    selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_8"] = subtitle_variable_vbgc
                                    selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_11"] = float(range_maxvbgc)
                                    selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_70"] = float_legendvbgc[0]
                                    selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_69"] = float_legendvbgc[1] 
                                    selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_14"] = float(value_variable_avbgc1)

                                    # Check if value_variable_avbgc2 is not empty
                                    if value_variable_avbgc2:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_41"] = float(value_variable_avbgc2)
                                    else:
                                        print("Value for Input_41 is empty or not provided.")

                                    # Check if value_variable_avbgc3 is not empty
                                    if value_variable_avbgc3:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_15"] = float(value_variable_avbgc3)
                                    else:
                                        print("Value for Input_15 is empty or not provided.")

                                    # Check if value_variable_avbgc4 is not empty
                                    if value_variable_avbgc4:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_44"] = float(value_variable_avbgc4)
                                    else:
                                        print("Value for Input_44 is empty or not provided.")

                                    # Check if value_variable_avbgc5 is not empty
                                    if value_variable_avbgc5:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_16"] = float(value_variable_avbgc5)
                                    else:
                                        print("Value for Input_16 is empty or not provided.")

                                    # Check if value_variable_avbgc6 is not empty
                                    if value_variable_avbgc6:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_48"] = float(value_variable_avbgc6)
                                    else:
                                        print("Value for Input_48 is empty or not provided.")

                                    # Check if value_variable_avbgc7 is not empty
                                    if value_variable_avbgc7:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_17"] = float(value_variable_avbgc7)
                                    else:
                                        print("Value for Input_17 is empty or not provided.")

                                    # Check if value_variable_avbgc8 is not empty
                                    if value_variable_avbgc8:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_50"] = float(value_variable_avbgc8)
                                    else:
                                        print("Value for Input_50 is empty or not provided.")
                                        






                                    # Check if value_variable_bvbgc1 is not empty
                                    if value_variable_bvbgc1:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_57"] = float(value_variable_bvbgc1)
                                    else:
                                        print("Value for Input_57 is empty or not provided.")

                                    # Check if value_variable_bvbgc2 is not empty
                                    if value_variable_bvbgc2:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_58"] = float(value_variable_bvbgc2)
                                    else:
                                        print("Value for Input_58 is empty or not provided.")

                                    # Check if value_variable_bvbgc3 is not empty
                                    if value_variable_bvbgc3:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_59"] = float(value_variable_bvbgc3)
                                    else:
                                        print("Value for Input_59 is empty or not provided.")

                                    # Check if value_variable_bvbgc4 is not empty
                                    if value_variable_bvbgc4:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_64"] = float(value_variable_bvbgc4)
                                    else:
                                        print("Value for Input_64 is empty or not provided.")

                                    # Check if value_variable_bvbgc5 is not empty
                                    if value_variable_bvbgc5:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_60"] = float(value_variable_bvbgc5)
                                    else:
                                        print("Value for Input_60 is empty or not provided.")

                                    # Check if value_variable_bvbgc6 is not empty
                                    if value_variable_bvbgc6:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_61"] = float(value_variable_bvbgc6)
                                    else:
                                        print("Value for Input_61 is empty or not provided.")

                                    # Check if value_variable_bvbgc7 is not empty
                                    if value_variable_bvbgc7:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_62"] = float(value_variable_bvbgc7)
                                    else:
                                        print("Value for Input_62 is empty or not provided.")

                                    # Check if value_variable_bvbgc8 is not empty
                                    if value_variable_bvbgc8:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_63"] = float(value_variable_bvbgc8)
                                    else:
                                        print("Value for Input_63 is empty or not provided.")
                                        




                                    selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_2"] = name_variable_avbgc1

                                    # Check if name_variable_avbgc2 is not empty before setting the input
                                    if name_variable_avbgc2:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_42"] = name_variable_avbgc2
                                    else:
                                        print("Name for Input_42 is empty or not provided.")     

                                    # Check if name_variable_avbgc3 is not empty before setting the input
                                    if name_variable_avbgc3:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_3"] = name_variable_avbgc3
                                    else:
                                        print("Name for Input_3 is empty or not provided.")    

                                    # Check if name_variable_avbgc4 is not empty before setting the input
                                    if name_variable_avbgc4:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_45"] = name_variable_avbgc4
                                    else:
                                        print("Name for Input_45 is empty or not provided.")    

                                    # Check if name_variable_avbgc5 is not empty before setting the input
                                    if name_variable_avbgc5:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_4"] = name_variable_avbgc5
                                    else:
                                        print("Name for Input_4 is empty or not provided.")    

                                    # Check if name_variable_avbgc6 is not empty before setting the input
                                    if name_variable_avbgc6:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_47"] = name_variable_avbgc6
                                    else:
                                        print("Name for Input_47 is empty or not provided.")  

                                    # Check if name_variable_avbgc7 is not empty before setting the input
                                    if name_variable_avbgc7:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_5"] = name_variable_avbgc7
                                    else:
                                        print("Name for Input_5 is empty or not provided.")  

                                    # Check if name_variable_avbgc8 is not empty before setting the input
                                    if name_variable_avbgc8:
                                        selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_49"] = name_variable_avbgc8
                                    else:
                                        print("Name for Input_49 is empty or not provided.")
                                        


                                       



                                    print(f"Set modifier input for object '{mesh_name_vbgc}' and modifier '{modifier_name_vbgc}'.")
                            else:
                                    print(f"Selected object '{mesh_name_vbgc}' has no modifiers.")
                    else:
                            print("Selected object is not a mesh.")
            else:
                    print("No object selected.")
            bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorMGgenai(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatormggenai"
    bl_label = "Import Gen AI Data"

    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        api_key_file_path = bpy.path.abspath(mytool.my_pathapi_key)
        filepath_fullmgaisiteurl = bpy.path.abspath(mytool.my_stringsiteurl)
        filepath_fullmgaiappname = bpy.path.abspath(mytool.my_stringappname)
        filepath_fullmgaiapikey = read_api_key(api_key_file_path)
        
        if not filepath_fullmgaiapikey:
            print("Failed to read API key. Aborting operation.")
            return {'CANCELLED'}
        filepath_fullmgaimodelname1 = bpy.path.abspath(mytool.my_stringmodelname1)
        filepath_fullmgaimodelname2 = bpy.path.abspath(mytool.my_stringmodelname2)        
        filepath_fullmgaiinput1 = bpy.path.abspath(mytool.my_stringmountain_gengraph1)
        filepath_fullmgaiinput2 = bpy.path.abspath(mytool.my_stringmountain_gengraph2)
        filepath_fullmgaiinput3 = bpy.path.abspath(mytool.my_stringmountain_gengraph3)
        filepath_fullurl = bpy.path.abspath(mytool.my_stringresponseurl)

        sub_questionmg = filepath_fullmgaiinput1
        main_questionmg = filepath_fullmgaiinput2.format(sub_questionmg)

        questionmg = f"{main_questionmg} {sub_questionmg}"

        # Replace with your actual values
        YOUR_SITE_URL = filepath_fullmgaisiteurl
        YOUR_APP_NAME = filepath_fullmgaiappname
        YOUR_API_KEY = filepath_fullmgaiapikey

        response = requests.post(
            url=filepath_fullurl,
            headers={
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": YOUR_APP_NAME,
                "Authorization": f"Bearer {YOUR_API_KEY}",  # Include your API key in the Authorization header
            },
            data=json.dumps({
                "model": filepath_fullmgaimodelname1,
                "messages": [
                    {"role": "user", "content": questionmg}
                ]
            })
        )

        # Parse the JSON response
        response_jsonmga = response.json()
        
        # Print the response for debugging
        print("Response JSON:", response_jsonmga)

        # Extract the answer if available
        answer_mg = response_jsonmga.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

        # Print the answer for debugging
        print("Answer Circle:", answer_mg)
        
                
        relevant_infomg = answer_mg
        
        if relevant_infomg:
            # Extract necessary details from relevant_info
            # Modify the construction of the new question based on the extracted information
            new_questionmg = f"{filepath_fullmgaiinput3}. Here's the text: {relevant_infomg}"

            # Make another API request with the new question
            new_response = requests.post(
                url=filepath_fullurl,
                headers={
                    "HTTP-Referer": YOUR_SITE_URL,
                    "X-Title": YOUR_APP_NAME,
                    "Authorization": f"Bearer {YOUR_API_KEY}",
                },
                data=json.dumps({
                    "model": filepath_fullmgaimodelname2,
                    "messages": [
                        {"role": "user", "content": new_questionmg}
                    ]
                })
            )

            # Parse the JSON response for the new question
            new_response_jsonmgb = new_response.json()
            
            # Extract the answer if available
            answer_mg1 = new_response_jsonmgb.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

            # Print the answer for debugging
            print("Answer Circle1:", answer_mg1)

            # Split the answer into variables based on commas
            answer_variables_mg = answer_mg1.split(';')
            
            # Split the answer further
            float_valuesmg = [value for value in answer_variables_mg[2].split(',')]
            float_namesmg = [value for value in answer_variables_mg[3].split(',')]
            
            # Remove letters and symbols except period
            cleaned_valuesmg = ["".join(char for char in value if char.isdigit() or char == '.') for value in float_valuesmg]

            mgfloat_values = [float(cleaned_value) for cleaned_value in cleaned_valuesmg]

            # Find the maximum value
            float_valuesmaxmg = max(mgfloat_values)
            print(float_valuesmaxmg)
        
            range_maxmg = 1.1 * float(float_valuesmaxmg)
            print("range_maxmg:", range_maxmg)

            # Now you can use the individual variables as needed
            title_variable_mg = answer_variables_mg[0].replace("Step A:", "").strip().upper()
            subtitle_variable_mg = answer_variables_mg[1].replace("Step B:", "").strip()
            value_variable_mg1 = re.sub(r"[^0-9.]", "", float_valuesmg[0].replace("Step C:", "").strip())

            # Check if float_valuesmg[1] is not empty
            if float_valuesmg and len(float_valuesmg) > 1:
                value_variable_mg2 = re.sub(r"[^0-9.]", "", float_valuesmg[1].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmg[1] is empty or not provided
                value_variable_mg2 = None  # or any default value you want

            # Check if float_valuesmg[2] is not empty
            if float_valuesmg and len(float_valuesmg) > 2:
                value_variable_mg3 = re.sub(r"[^0-9.]", "", float_valuesmg[2].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmg[2] is empty or not provided
                value_variable_mg3 = None  # or any default value you want

            # Check if float_valuesmg[3] is not empty
            if float_valuesmg and len(float_valuesmg) > 3:
                value_variable_mg4 = re.sub(r"[^0-9.]", "", float_valuesmg[3].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmg[3] is empty or not provided
                value_variable_mg4 = None  # or any default value you want

            # Check if float_valuesmg[4] is not empty
            if float_valuesmg and len(float_valuesmg) > 4:
                value_variable_mg5 = re.sub(r"[^0-9.]", "", float_valuesmg[4].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmg[4] is empty or not provided
                value_variable_mg5 = None  # or any default value you want

            # Check if float_valuesmg[5] is not empty
            if float_valuesmg and len(float_valuesmg) > 5:
                value_variable_mg6 = re.sub(r"[^0-9.]", "", float_valuesmg[5].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmg[5] is empty or not provided
                value_variable_mg6 = None  # or any default value you want

            # Check if float_valuesmg[6] is not empty
            if float_valuesmg and len(float_valuesmg) > 6:
                value_variable_mg7 = re.sub(r"[^0-9.]", "", float_valuesmg[6].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmg[6] is empty or not provided
                value_variable_mg7 = None  # or any default value you want

            # Check if float_valuesmg[7] is not empty
            if float_valuesmg and len(float_valuesmg) > 7:
                value_variable_mg8 = re.sub(r"[^0-9.]", "", float_valuesmg[7].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmg[7] is empty or not provided
                value_variable_mg8 = None  # or any default value you want



                       
            
            name_variable_mg1 = float_namesmg[0].replace("Step D:", "").strip()

            # Check if float_namesmg[1] is not empty
            if float_namesmg and len(float_namesmg) > 1:
                name_variable_mg2 = float_namesmg[1].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmg[1] is empty or not provided
                name_variable_mg2 = None  # or any default name you want

            # Check if float_namesmg[2] is not empty
            if float_namesmg and len(float_namesmg) > 2:
                name_variable_mg3 = float_namesmg[2].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmg[2] is empty or not provided
                name_variable_mg3 = None  # or any default name you want

            # Check if float_namesmg[3] is not empty
            if float_namesmg and len(float_namesmg) > 3:
                name_variable_mg4 = float_namesmg[3].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmg[3] is empty or not provided
                name_variable_mg4 = None  # or any default name you want

            # Check if float_namesmg[4] is not empty
            if float_namesmg and len(float_namesmg) > 4:
                name_variable_mg5 = float_namesmg[4].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmg[4] is empty or not provided
                name_variable_mg5 = None  # or any default name you want

            # Check if float_namesmg[5] is not empty
            if float_namesmg and len(float_namesmg) > 5:
                name_variable_mg6 = float_namesmg[5].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmg[5] is empty or not provided
                name_variable_mg6 = None  # or any default name you want

            # Check if float_namesmg[6] is not empty
            if float_namesmg and len(float_namesmg) > 6:
                name_variable_mg7 = float_namesmg[6].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmg[6] is empty or not provided
                name_variable_mg7 = None  # or any default name you want

            # Check if float_namesmg[7] is not empty
            if float_namesmg and len(float_namesmg) > 7:
                name_variable_mg8 = float_namesmg[7].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmg[7] is empty or not provided
                name_variable_mg8 = None  # or any default name you want





            if value_variable_mg1.endswith('.'):
                value_variable_mg1 = value_variable_mg1[:-1]
            if value_variable_mg1.startswith('.'):
                value_variable_mg1 = value_variable_mg1[1:]

            if value_variable_mg2 is not None:
                if value_variable_mg2.endswith('.'):
                    value_variable_mg2 = value_variable_mg2[:-1]
                if value_variable_mg2.startswith('.'):
                    value_variable_mg2 = value_variable_mg2[1:]

            if value_variable_mg3 is not None:
                if value_variable_mg3.endswith('.'):
                    value_variable_mg3 = value_variable_mg3[:-1]
                if value_variable_mg3.startswith('.'):
                    value_variable_mg3 = value_variable_mg3[1:]

            if value_variable_mg4 is not None:
                if value_variable_mg4.endswith('.'):
                    value_variable_mg4 = value_variable_mg4[:-1]
                if value_variable_mg4.startswith('.'):
                    value_variable_mg4 = value_variable_mg4[1:]

            if value_variable_mg5 is not None:
                if value_variable_mg5.endswith('.'):
                    value_variable_mg5 = value_variable_mg5[:-1]
                if value_variable_mg5.startswith('.'):
                    value_variable_mg5 = value_variable_mg5[1:]

            if value_variable_mg6 is not None:
                if value_variable_mg6.endswith('.'):
                    value_variable_mg6 = value_variable_mg6[:-1]
                if value_variable_mg6.startswith('.'):
                    value_variable_mg6 = value_variable_mg6[1:]

            if value_variable_mg7 is not None:
                if value_variable_mg7.endswith('.'):
                    value_variable_mg7 = value_variable_mg7[:-1]
                if value_variable_mg7.startswith('.'):
                    value_variable_mg7 = value_variable_mg7[1:]

            if value_variable_mg8 is not None:
                if value_variable_mg8.endswith('.'):
                    value_variable_mg8 = value_variable_mg8[:-1]
                if value_variable_mg8.startswith('.'):
                    value_variable_mg8 = value_variable_mg8[1:]




            # Ensure an object is selected
            if bpy.context.selected_objects:
                    selected_obj_mg = bpy.context.active_object  # Get the active (selected) object

                    if selected_obj_mg.type == 'MESH':
                            mesh_name_mg = selected_obj_mg.name

                            # Check if the selected object has modifiers
                            if selected_obj_mg.modifiers:
                                    modifier_name_mg = selected_obj_mg.modifiers.active.name  # Get the name of the active modifier
                                    
                                    # Check if float_valuesmg has 1 to 8 elements and assign the length directly
                                    num_elementsmg = len(float_valuesmg)
                                    if 1 <= num_elementsmg <= 10:
                                        selected_obj_mg.modifiers[modifier_name_mg]["Input_2"] = num_elementsmg


                                    selected_obj_mg.modifiers[modifier_name_mg]["Input_38"] = title_variable_mg
                                    selected_obj_mg.modifiers[modifier_name_mg]["Input_39"] = subtitle_variable_mg
                                    selected_obj_mg.modifiers[modifier_name_mg]["Input_24"] = float(range_maxmg)
                                    selected_obj_mg.modifiers[modifier_name_mg]["Input_3"] = float(value_variable_mg1)

                                    # Check if value_variable_mg2 is not empty
                                    if value_variable_mg2:
                                        selected_obj_mg.modifiers[modifier_name_mg]["Input_4"] = float(value_variable_mg2)
                                    else:
                                        print("Value for Input_4 is empty or not provided.")

                                    # Check if value_variable_mg3 is not empty
                                    if value_variable_mg3:
                                        selected_obj_mg.modifiers[modifier_name_mg]["Input_5"] = float(value_variable_mg3)
                                    else:
                                        print("Value for Input_5 is empty or not provided.")

                                    # Check if value_variable_mg4 is not empty
                                    if value_variable_mg4:
                                        selected_obj_mg.modifiers[modifier_name_mg]["Input_6"] = float(value_variable_mg4)
                                    else:
                                        print("Value for Input_6 is empty or not provided.")

                                    # Check if value_variable_mg5 is not empty
                                    if value_variable_mg5:
                                        selected_obj_mg.modifiers[modifier_name_mg]["Input_7"] = float(value_variable_mg5)
                                    else:
                                        print("Value for Input_7 is empty or not provided.")

                                    # Check if value_variable_mg6 is not empty
                                    if value_variable_mg6:
                                        selected_obj_mg.modifiers[modifier_name_mg]["Input_8"] = float(value_variable_mg6)
                                    else:
                                        print("Value for Input_8 is empty or not provided.")

                                    # Check if value_variable_mg7 is not empty
                                    if value_variable_mg7:
                                        selected_obj_mg.modifiers[modifier_name_mg]["Input_9"] = float(value_variable_mg7)
                                    else:
                                        print("Value for Input_9 is empty or not provided.")

                                    # Check if value_variable_mg8 is not empty
                                    if value_variable_mg8:
                                        selected_obj_mg.modifiers[modifier_name_mg]["Input_10"] = float(value_variable_mg8)
                                    else:
                                        print("Value for Input_10 is empty or not provided.")




                                    selected_obj_mg.modifiers[modifier_name_mg]["Input_13"] = name_variable_mg1

                                    # Check if name_variable_mg2 is not empty before setting the input
                                    if name_variable_mg2:
                                        selected_obj_mg.modifiers[modifier_name_mg]["Input_14"] = name_variable_mg2
                                    else:
                                        print("Name for Input_14 is empty or not provided.")     

                                    # Check if name_variable_mg3 is not empty before setting the input
                                    if name_variable_mg3:
                                        selected_obj_mg.modifiers[modifier_name_mg]["Input_15"] = name_variable_mg3
                                    else:
                                        print("Name for Input_15 is empty or not provided.")    

                                    # Check if name_variable_mg4 is not empty before setting the input
                                    if name_variable_mg4:
                                        selected_obj_mg.modifiers[modifier_name_mg]["Input_16"] = name_variable_mg4
                                    else:
                                        print("Name for Input_16 is empty or not provided.")    

                                    # Check if name_variable_mg5 is not empty before setting the input
                                    if name_variable_mg5:
                                        selected_obj_mg.modifiers[modifier_name_mg]["Input_17"] = name_variable_mg5
                                    else:
                                        print("Name for Input_17 is empty or not provided.")    

                                    # Check if name_variable_mg6 is not empty before setting the input
                                    if name_variable_mg6:
                                        selected_obj_mg.modifiers[modifier_name_mg]["Input_18"] = name_variable_mg6
                                    else:
                                        print("Name for Input_18 is empty or not provided.")  

                                    # Check if name_variable_mg7 is not empty before setting the input
                                    if name_variable_mg7:
                                        selected_obj_mg.modifiers[modifier_name_mg]["Input_19"] = name_variable_mg7
                                    else:
                                        print("Name for Input_19 is empty or not provided.")  

                                    # Check if name_variable_mg8 is not empty before setting the input
                                    if name_variable_mg8:
                                        selected_obj_mg.modifiers[modifier_name_mg]["Input_20"] = name_variable_mg8
                                    else:
                                        print("Name for Input_20 is empty or not provided.")

                                     



                                    print(f"Set modifier input for object '{mesh_name_mg}' and modifier '{modifier_name_mg}'.")
                            else:
                                    print(f"Selected object '{mesh_name_mg}' has no modifiers.")
                    else:
                            print("Selected object is not a mesh.")
            else:
                    print("No object selected.")
            bpy.context.object.data.update()
        return {'FINISHED'}

class MyoperatorMGCgenai(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatormgcgenai"
    bl_label = "Import Gen AI Data"

    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        api_key_file_path = bpy.path.abspath(mytool.my_pathapi_key)
        filepath_fullmgcaisiteurl = bpy.path.abspath(mytool.my_stringsiteurl)
        filepath_fullmgcaiappname = bpy.path.abspath(mytool.my_stringappname)
        filepath_fullmgcaiapikey = read_api_key(api_key_file_path)
        
        if not filepath_fullmgcaiapikey:
            print("Failed to read API key. Aborting operation.")
            return {'CANCELLED'}
        filepath_fullmgcaimodelname1 = bpy.path.abspath(mytool.my_stringmodelname1)
        filepath_fullmgcaimodelname2 = bpy.path.abspath(mytool.my_stringmodelname2)        
        filepath_fullmgcaiinput1 = bpy.path.abspath(mytool.my_stringmountain_gengraph_comparison1)
        filepath_fullmgcaiinput2 = bpy.path.abspath(mytool.my_stringmountain_gengraph_comparison2)
        filepath_fullmgcaiinput3 = bpy.path.abspath(mytool.my_stringmountain_gengraph_comparison3)
        filepath_fullurl = bpy.path.abspath(mytool.my_stringresponseurl)

        sub_questionmgc = filepath_fullmgcaiinput1
        main_questionmgc = filepath_fullmgcaiinput2.format(sub_questionmgc)

        questionmgc = f"{main_questionmgc} {sub_questionmgc}"

        # Replace with your actual values
        YOUR_SITE_URL = filepath_fullmgcaisiteurl
        YOUR_APP_NAME = filepath_fullmgcaiappname
        YOUR_API_KEY = filepath_fullmgcaiapikey

        response = requests.post(
            url=filepath_fullurl,
            headers={
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": YOUR_APP_NAME,
                "Authorization": f"Bearer {YOUR_API_KEY}",  # Include your API key in the Authorization header
            },
            data=json.dumps({
                "model": filepath_fullmgcaimodelname1,
                "messages": [
                    {"role": "user", "content": questionmgc}
                ]
            })
        )

        # Parse the JSON response
        response_jsonmgca = response.json()
        
        # Print the response for debugging
        print("Response JSON:", response_jsonmgca)

        # Extract the answer if available
        answer_mgc = response_jsonmgca.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

        # Print the answer for debugging
        print("Answer Circle:", answer_mgc)
        
                
        relevant_infomgc = answer_mgc
        
        if relevant_infomgc:
            # Extract necessary details from relevant_info
            # Modify the construction of the new question based on the extracted information
            new_questionmgc = f"{filepath_fullmgcaiinput3}. Here's the text: {relevant_infomgc}"

            # Make another API request with the new question
            new_response = requests.post(
                url=filepath_fullurl,
                headers={
                    "HTTP-Referer": YOUR_SITE_URL,
                    "X-Title": YOUR_APP_NAME,
                    "Authorization": f"Bearer {YOUR_API_KEY}",
                },
                data=json.dumps({
                    "model": filepath_fullmgcaimodelname2,
                    "messages": [
                        {"role": "user", "content": new_questionmgc}
                    ]
                })
            )

            # Parse the JSON response for the new question
            new_response_jsonmgcb = new_response.json()
            
            # Extract the answer if available
            answer_mgc1 = new_response_jsonmgcb.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

            # Print the answer for debugging
            print("Answer Circle1:", answer_mgc1)

            # Split the answer into variables based on commas
            answer_variables_mgc = answer_mgc1.split(';')
            
            # Split the answer further
            float_valuesamgc = [value for value in answer_variables_mgc[2].split('|')]
            float_valuesbmgc = [value for value in answer_variables_mgc[3].split('|')]
            float_namesamgc = [value for value in answer_variables_mgc[4].split(',')]
            float_legendmgc = [value for value in answer_variables_mgc[5].split(',')]
            
            # Remove letters and symbols except period
            cleaned_valuesamgc = ["".join(char for char in value if char.isdigit() or char == '.') for value in float_valuesamgc]

            mgcfloat_avalues = []
            for cleaned_value in cleaned_valuesamgc:
                if cleaned_value:  # Check if the cleaned value is not empty
                    mgcfloat_avalues.append(float(cleaned_value))
                else:
                    mgcfloat_avalues.append(0.0)  # or any default value you prefer

            # Remove letters and symbols except period
            cleaned_valuesbmgc = ["".join(char for char in value if char.isdigit() or char == '.') for value in float_valuesbmgc]

            mgcfloat_bvalues = []
            for cleaned_value in cleaned_valuesbmgc:
                if cleaned_value:  # Check if the cleaned value is not empty
                    mgcfloat_bvalues.append(float(cleaned_value))
                else:
                    mgcfloat_bvalues.append(0.0)  # or any default value you prefer
            

            # Find the maximum value
            float_valuesmaxmgc = max(mgcfloat_avalues + mgcfloat_bvalues)
            print(float_valuesmaxmgc)
        
            range_maxmgc = 1.1 * float(float_valuesmaxmgc)
            print("range_maxmgc:", range_maxmgc)

            # Now you can use the individual variables as needed
            title_variable_mgc = answer_variables_mgc[0].replace("Step A:", "").strip().upper()
            subtitle_variable_mgc = answer_variables_mgc[1].replace("Step B:", "").strip()
            legend_variable_mgc = answer_variables_mgc[5].replace("Step F:", "").strip()
            value_variable_amgc1 = re.sub(r"[^0-9.]", "", float_valuesamgc[0].replace("Step C:", "").strip())

            # Check if float_valuesmgc[1] is not empty
            if float_valuesamgc and len(float_valuesamgc) > 1:
                value_variable_amgc2 = re.sub(r"[^0-9.]", "", float_valuesamgc[1].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesamgc[1] is empty or not provided
                value_variable_amgc2 = None  # or any default value you want

            # Check if float_valuesmgc[2] is not empty
            if float_valuesamgc and len(float_valuesamgc) > 2:
                value_variable_amgc3 = re.sub(r"[^0-9.]", "", float_valuesamgc[2].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesamgc[2] is empty or not provided
                value_variable_amgc3 = None  # or any default value you want

            # Check if float_valuesmgc[3] is not empty
            if float_valuesamgc and len(float_valuesamgc) > 3:
                value_variable_amgc4 = re.sub(r"[^0-9.]", "", float_valuesamgc[3].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesamgc[3] is empty or not provided
                value_variable_amgc4 = None  # or any default value you want

            # Check if float_valuesmgc[4] is not empty
            if float_valuesamgc and len(float_valuesamgc) > 4:
                value_variable_amgc5 = re.sub(r"[^0-9.]", "", float_valuesamgc[4].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesamgc[4] is empty or not provided
                value_variable_amgc5 = None  # or any default value you want

            # Check if float_valuesmgc[5] is not empty
            if float_valuesamgc and len(float_valuesamgc) > 5:
                value_variable_amgc6 = re.sub(r"[^0-9.]", "", float_valuesamgc[5].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesamgc[5] is empty or not provided
                value_variable_amgc6 = None  # or any default value you want

            # Check if float_valuesmgc[6] is not empty
            if float_valuesamgc and len(float_valuesamgc) > 6:
                value_variable_amgc7 = re.sub(r"[^0-9.]", "", float_valuesamgc[6].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesamgc[6] is empty or not provided
                value_variable_amgc7 = None  # or any default value you want

            # Check if float_valuesamgc[7] is not empty
            if float_valuesamgc and len(float_valuesamgc) > 7:
                value_variable_amgc8 = re.sub(r"[^0-9.]", "", float_valuesamgc[7].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesamgc[7] is empty or not provided
                value_variable_amgc8 = None  # or any default value you want
                


            # Check if float_valuesbmgc[0] is not empty
            if float_valuesbmgc and len(float_valuesbmgc) > 0:
                value_variable_bmgc1 = re.sub(r"[^0-9.]", "", float_valuesbmgc[0].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbmgc[0] is empty or not provided
                value_variable_bmgc1= None  # or any default value you want

            # Check if float_valuesbmgc[1] is not empty
            if float_valuesbmgc and len(float_valuesbmgc) > 1:
                value_variable_bmgc2 = re.sub(r"[^0-9.]", "", float_valuesbmgc[1].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbmgc[1] is empty or not provided
                value_variable_bmgc2= None  # or any default value you want

            # Check if float_valuesbmgc[2] is not empty
            if float_valuesbmgc and len(float_valuesbmgc) > 2:
                value_variable_bmgc3 = re.sub(r"[^0-9.]", "", float_valuesbmgc[2].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbmgc[2] is empty or not provided
                value_variable_bmgc3= None  # or any default value you want

            # Check if float_valuesbmgc[3] is not empty
            if float_valuesbmgc and len(float_valuesbmgc) > 3:
                value_variable_bmgc4 = re.sub(r"[^0-9.]", "", float_valuesbmgc[3].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbmgc[3] is empty or not provided
                value_variable_bmgc4= None  # or any default value you want

            # Check if float_valuesbmgc[4] is not empty
            if float_valuesbmgc and len(float_valuesbmgc) > 4:
                value_variable_bmgc5 = re.sub(r"[^0-9.]", "", float_valuesbmgc[4].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbmgc[4] is empty or not provided
                value_variable_bmgc5= None  # or any default value you want

            # Check if float_valuesbmgc[5] is not empty
            if float_valuesbmgc and len(float_valuesbmgc) > 5:
                value_variable_bmgc6 = re.sub(r"[^0-9.]", "", float_valuesbmgc[5].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbmgc[5] is empty or not provided
                value_variable_bmgc6= None  # or any default value you want

            # Check if float_valuesbmgc[6] is not empty
            if float_valuesbmgc and len(float_valuesbmgc) > 6:
                value_variable_bmgc7 = re.sub(r"[^0-9.]", "", float_valuesbmgc[6].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbmgc[6] is empty or not provided
                value_variable_bmgc7= None  # or any default value you want

            # Check if float_valuesbmgc[7] is not empty
            if float_valuesbmgc and len(float_valuesbmgc) > 7:
                value_variable_bmgc8 = re.sub(r"[^0-9.]", "", float_valuesbmgc[7].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesbmgc[7] is empty or not provided
                value_variable_bmgc8= None  # or any default value you want
                


                       
            
            name_variable_amgc1 = float_namesamgc[0].replace("Step E:", "").strip()

            # Check if float_namesmgc[1] is not empty
            if float_namesamgc and len(float_namesamgc) > 1:
                name_variable_amgc2 = float_namesamgc[1].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesamgc[1] is empty or not provided
                name_variable_amgc2 = None  # or any default name you want

            # Check if float_namesmgc[2] is not empty
            if float_namesamgc and len(float_namesamgc) > 2:
                name_variable_amgc3 = float_namesamgc[2].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesamgc[2] is empty or not provided
                name_variable_amgc3 = None  # or any default name you want

            # Check if float_namesmgc[3] is not empty
            if float_namesamgc and len(float_namesamgc) > 3:
                name_variable_amgc4 = float_namesamgc[3].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesamgc[3] is empty or not provided
                name_variable_amgc4 = None  # or any default name you want

            # Check if float_namesmgc[4] is not empty
            if float_namesamgc and len(float_namesamgc) > 4:
                name_variable_amgc5 = float_namesamgc[4].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesamgc[4] is empty or not provided
                name_variable_amgc5 = None  # or any default name you want

            # Check if float_namesmgc[5] is not empty
            if float_namesamgc and len(float_namesamgc) > 5:
                name_variable_amgc6 = float_namesamgc[5].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesamgc[5] is empty or not provided
                name_variable_amgc6 = None  # or any default name you want

            # Check if float_namesmgc[6] is not empty
            if float_namesamgc and len(float_namesamgc) > 6:
                name_variable_amgc7 = float_namesamgc[6].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesamgc[6] is empty or not provided
                name_variable_amgc7 = None  # or any default name you want

            # Check if float_namesmgc[7] is not empty
            if float_namesamgc and len(float_namesamgc) > 7:
                name_variable_amgc8 = float_namesamgc[7].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesamgc[7] is empty or not provided
                name_variable_amgc8 = None  # or any default name you want
                






            if value_variable_amgc1.endswith('.'):
                value_variable_amgc1 = value_variable_amgc1[:-1]
            if value_variable_amgc1.startswith('.'):
                value_variable_amgc1 = value_variable_amgc1[1:]

            if value_variable_amgc2 is not None:
                if value_variable_amgc2.endswith('.'):
                    value_variable_amgc2 = value_variable_amgc2[:-1]
                if value_variable_amgc2.startswith('.'):
                    value_variable_amgc2 = value_variable_amgc2[1:]

            if value_variable_amgc3 is not None:
                if value_variable_amgc3.endswith('.'):
                    value_variable_amgc3 = value_variable_amgc3[:-1]
                if value_variable_amgc3.startswith('.'):
                    value_variable_amgc3 = value_variable_amgc3[1:]

            if value_variable_amgc4 is not None:
                if value_variable_amgc4.endswith('.'):
                    value_variable_amgc4 = value_variable_amgc4[:-1]
                if value_variable_amgc4.startswith('.'):
                    value_variable_amgc4 = value_variable_amgc4[1:]

            if value_variable_amgc5 is not None:
                if value_variable_amgc5.endswith('.'):
                    value_variable_amgc5 = value_variable_amgc5[:-1]
                if value_variable_amgc5.startswith('.'):
                    value_variable_amgc5 = value_variable_amgc5[1:]

            if value_variable_amgc6 is not None:
                if value_variable_amgc6.endswith('.'):
                    value_variable_amgc6 = value_variable_amgc6[:-1]
                if value_variable_amgc6.startswith('.'):
                    value_variable_amgc6 = value_variable_amgc6[1:]

            if value_variable_amgc7 is not None:
                if value_variable_amgc7.endswith('.'):
                    value_variable_amgc7 = value_variable_amgc7[:-1]
                if value_variable_amgc7.startswith('.'):
                    value_variable_amgc7 = value_variable_amgc7[1:]

            if value_variable_amgc8 is not None:
                if value_variable_amgc8.endswith('.'):
                    value_variable_amgc8 = value_variable_amgc8[:-1]
                if value_variable_amgc8.startswith('.'):
                    value_variable_amgc8 = value_variable_amgc8[1:]
                    


            if value_variable_bmgc1.endswith('.'):
                value_variable_bmgc1 = value_variable_bmgc1[:-1]
            if value_variable_bmgc1.startswith('.'):
                value_variable_bmgc1 = value_variable_bmgc1[1:]

            if value_variable_bmgc2 is not None:
                if value_variable_bmgc2.endswith('.'):
                    value_variable_bmgc2 = value_variable_bmgc2[:-1]
                if value_variable_bmgc2.startswith('.'):
                    value_variable_bmgc2 = value_variable_bmgc2[1:]

            if value_variable_bmgc3 is not None:
                if value_variable_bmgc3.endswith('.'):
                    value_variable_bmgc3 = value_variable_bmgc3[:-1]
                if value_variable_bmgc3.startswith('.'):
                    value_variable_bmgc3 = value_variable_bmgc3[1:]

            if value_variable_bmgc4 is not None:
                if value_variable_bmgc4.endswith('.'):
                    value_variable_bmgc4 = value_variable_bmgc4[:-1]
                if value_variable_bmgc4.startswith('.'):
                    value_variable_bmgc4 = value_variable_bmgc4[1:]

            if value_variable_bmgc5 is not None:
                if value_variable_bmgc5.endswith('.'):
                    value_variable_bmgc5 = value_variable_bmgc5[:-1]
                if value_variable_bmgc5.startswith('.'):
                    value_variable_bmgc5 = value_variable_bmgc5[1:]

            if value_variable_bmgc6 is not None:
                if value_variable_bmgc6.endswith('.'):
                    value_variable_bmgc6 = value_variable_bmgc6[:-1]
                if value_variable_bmgc6.startswith('.'):
                    value_variable_bmgc6 = value_variable_bmgc6[1:]

            if value_variable_bmgc7 is not None:
                if value_variable_bmgc7.endswith('.'):
                    value_variable_bmgc7 = value_variable_bmgc7[:-1]
                if value_variable_bmgc7.startswith('.'):
                    value_variable_bmgc7 = value_variable_bmgc7[1:]

            if value_variable_bmgc8 is not None:
                if value_variable_bmgc8.endswith('.'):
                    value_variable_bmgc8 = value_variable_bmgc8[:-1]
                if value_variable_bmgc8.startswith('.'):
                    value_variable_bmgc8 = value_variable_bmgc8[1:]
                    




            # Ensure an object is selected
            if bpy.context.selected_objects:
                    selected_obj_mgc = bpy.context.active_object  # Get the active (selected) object

                    if selected_obj_mgc.type == 'MESH':
                            mesh_name_mgc = selected_obj_mgc.name

                            # Check if the selected object has modifiers
                            if selected_obj_mgc.modifiers:
                                    modifier_name_mgc = selected_obj_mgc.modifiers.active.name  # Get the name of the active modifier
                                    
                                    # Check if float_valuesmgc has 1 to 9 elements and assign the length directly
                                    num_elementsmgc = len(float_valuesamgc)
                                    if 1 <= num_elementsmgc <= 9:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_2"] = num_elementsmgc


                                    selected_obj_mgc.modifiers[modifier_name_mgc]["Input_54"] = title_variable_mgc
                                    selected_obj_mgc.modifiers[modifier_name_mgc]["Input_55"] = subtitle_variable_mgc
                                    selected_obj_mgc.modifiers[modifier_name_mgc]["Input_24"] = float(range_maxmgc)
                                    selected_obj_mgc.modifiers[modifier_name_mgc]["Input_57"] = float_legendmgc[0]
                                    selected_obj_mgc.modifiers[modifier_name_mgc]["Input_56"] = float_legendmgc[1] 
                                    selected_obj_mgc.modifiers[modifier_name_mgc]["Input_3"] = float(value_variable_amgc1)

                                    # Check if value_variable_amgc2 is not empty
                                    if value_variable_amgc2:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_4"] = float(value_variable_amgc2)
                                    else:
                                        print("Value for Input_4 is empty or not provided.")

                                    # Check if value_variable_amgc3 is not empty
                                    if value_variable_amgc3:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_67"] = float(value_variable_amgc3)
                                    else:
                                        print("Value for Input_67 is empty or not provided.")

                                    # Check if value_variable_amgc4 is not empty
                                    if value_variable_amgc4:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_6"] = float(value_variable_amgc4)
                                    else:
                                        print("Value for Input_6 is empty or not provided.")

                                    # Check if value_variable_amgc5 is not empty
                                    if value_variable_amgc5:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_7"] = float(value_variable_amgc5)
                                    else:
                                        print("Value for Input_7 is empty or not provided.")

                                    # Check if value_variable_amgc6 is not empty
                                    if value_variable_amgc6:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_8"] = float(value_variable_amgc6)
                                    else:
                                        print("Value for Input_8 is empty or not provided.")

                                    # Check if value_variable_amgc7 is not empty
                                    if value_variable_amgc7:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_9"] = float(value_variable_amgc7)
                                    else:
                                        print("Value for Input_9 is empty or not provided.")

                                    # Check if value_variable_amgc8 is not empty
                                    if value_variable_amgc8:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_10"] = float(value_variable_amgc8)
                                    else:
                                        print("Value for Input_10 is empty or not provided.")
                                        






                                    # Check if value_variable_bmgc1 is not empty
                                    if value_variable_bmgc1:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_30"] = float(value_variable_bmgc1)
                                    else:
                                        print("Value for Input_30 is empty or not provided.")

                                    # Check if value_variable_bmgc2 is not empty
                                    if value_variable_bmgc2:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_39"] = float(value_variable_bmgc2)
                                    else:
                                        print("Value for Input_39 is empty or not provided.")

                                    # Check if value_variable_bmgc3 is not empty
                                    if value_variable_bmgc3:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_40"] = float(value_variable_bmgc3)
                                    else:
                                        print("Value for Input_40 is empty or not provided.")

                                    # Check if value_variable_bmgc4 is not empty
                                    if value_variable_bmgc4:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_41"] = float(value_variable_bmgc4)
                                    else:
                                        print("Value for Input_41 is empty or not provided.")

                                    # Check if value_variable_bmgc5 is not empty
                                    if value_variable_bmgc5:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_42"] = float(value_variable_bmgc5)
                                    else:
                                        print("Value for Input_42 is empty or not provided.")

                                    # Check if value_variable_bmgc6 is not empty
                                    if value_variable_bmgc6:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_43"] = float(value_variable_bmgc6)
                                    else:
                                        print("Value for Input_43 is empty or not provided.")

                                    # Check if value_variable_bmgc7 is not empty
                                    if value_variable_bmgc7:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_44"] = float(value_variable_bmgc7)
                                    else:
                                        print("Value for Input_44 is empty or not provided.")

                                    # Check if value_variable_bmgc8 is not empty
                                    if value_variable_bmgc8:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_45"] = float(value_variable_bmgc8)
                                    else:
                                        print("Value for Input_45 is empty or not provided.")
                                        




                                    selected_obj_mgc.modifiers[modifier_name_mgc]["Input_13"] = name_variable_amgc1

                                    # Check if name_variable_amgc2 is not empty before setting the input
                                    if name_variable_amgc2:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_14"] = name_variable_amgc2
                                    else:
                                        print("Name for Input_14 is empty or not provided.")     

                                    # Check if name_variable_amgc3 is not empty before setting the input
                                    if name_variable_amgc3:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_15"] = name_variable_amgc3
                                    else:
                                        print("Name for Input_15 is empty or not provided.")    

                                    # Check if name_variable_amgc4 is not empty before setting the input
                                    if name_variable_amgc4:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_16"] = name_variable_amgc4
                                    else:
                                        print("Name for Input_16 is empty or not provided.")    

                                    # Check if name_variable_amgc5 is not empty before setting the input
                                    if name_variable_amgc5:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_17"] = name_variable_amgc5
                                    else:
                                        print("Name for Input_17 is empty or not provided.")    

                                    # Check if name_variable_amgc6 is not empty before setting the input
                                    if name_variable_amgc6:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_18"] = name_variable_amgc6
                                    else:
                                        print("Name for Input_18 is empty or not provided.")  

                                    # Check if name_variable_amgc7 is not empty before setting the input
                                    if name_variable_amgc7:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_19"] = name_variable_amgc7
                                    else:
                                        print("Name for Input_19 is empty or not provided.")  

                                    # Check if name_variable_amgc8 is not empty before setting the input
                                    if name_variable_amgc8:
                                        selected_obj_mgc.modifiers[modifier_name_mgc]["Input_20"] = name_variable_amgc8
                                    else:
                                        print("Name for Input_20 is empty or not provided.")
                                        


                                       



                                    print(f"Set modifier input for object '{mesh_name_mgc}' and modifier '{modifier_name_mgc}'.")
                            else:
                                    print(f"Selected object '{mesh_name_mgc}' has no modifiers.")
                    else:
                            print("Selected object is not a mesh.")
            else:
                    print("No object selected.")
            bpy.context.object.data.update()
        return {'FINISHED'}
    


class MyoperatorVBGgenai(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorvbggenai"
    bl_label = "Import Gen AI Data"

    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        api_key_file_path = bpy.path.abspath(mytool.my_pathapi_key)
        filepath_fullvbgaisiteurl = bpy.path.abspath(mytool.my_stringsiteurl)
        filepath_fullvbgaiappname = bpy.path.abspath(mytool.my_stringappname)
        filepath_fullvbgaiapikey = read_api_key(api_key_file_path)
        
        if not filepath_fullvbgaiapikey:
            print("Failed to read API key. Aborting operation.")
            return {'CANCELLED'}
        filepath_fullvbgaimodelname1 = bpy.path.abspath(mytool.my_stringmodelname1)
        filepath_fullvbgaimodelname2 = bpy.path.abspath(mytool.my_stringmodelname2)        
        filepath_fullvbgaiinput1 = bpy.path.abspath(mytool.my_stringvertical_bar_gengraph1)
        filepath_fullvbgaiinput2 = bpy.path.abspath(mytool.my_stringvertical_bar_gengraph2)
        filepath_fullvbgaiinput3 = bpy.path.abspath(mytool.my_stringvertical_bar_gengraph3)
        filepath_fullurl = bpy.path.abspath(mytool.my_stringresponseurl)

        sub_questionvbg = filepath_fullvbgaiinput1
        main_questionvbg = filepath_fullvbgaiinput2.format(sub_questionvbg)

        questionvbg = f"{main_questionvbg} {sub_questionvbg}"

        # Replace with your actual values
        YOUR_SITE_URL = filepath_fullvbgaisiteurl
        YOUR_APP_NAME = filepath_fullvbgaiappname
        YOUR_API_KEY = filepath_fullvbgaiapikey

        response = requests.post(
            url=filepath_fullurl,
            headers={
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": YOUR_APP_NAME,
                "Authorization": f"Bearer {YOUR_API_KEY}",  # Include your API key in the Authorization header
            },
            data=json.dumps({
                "model": filepath_fullvbgaimodelname1,
                "messages": [
                    {"role": "user", "content": questionvbg}
                ]
            })
        )

        # Parse the JSON response
        response_jsonvbga = response.json()
        
        # Print the response for debugging
        print("Response JSON:", response_jsonvbga)

        # Extract the answer if available
        answer_vbg = response_jsonvbga.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

        # Print the answer for debugging
        print("Answer Circle:", answer_vbg)
        
                
        relevant_infovbg = answer_vbg
        
        if relevant_infovbg:
            # Extract necessary details from relevant_info
            # Modify the construction of the new question based on the extracted information
            new_questionvbg = f"{filepath_fullvbgaiinput3}. Here's the text: {relevant_infovbg}"

            # Make another API request with the new question
            new_response = requests.post(
                url=filepath_fullurl,
                headers={
                    "HTTP-Referer": YOUR_SITE_URL,
                    "X-Title": YOUR_APP_NAME,
                    "Authorization": f"Bearer {YOUR_API_KEY}",
                },
                data=json.dumps({
                    "model": filepath_fullvbgaimodelname2,
                    "messages": [
                        {"role": "user", "content": new_questionvbg}
                    ]
                })
            )

            # Parse the JSON response for the new question
            new_response_jsonvbgb = new_response.json()
            
            # Extract the answer if available
            answer_vbg1 = new_response_jsonvbgb.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

            # Print the answer for debugging
            print("Answer Circle1:", answer_vbg1)

            # Split the answer into variables based on commas
            answer_variables_vbg = answer_vbg1.split(';')
            
            # Split the answer further
            float_valuesvbg = [value for value in answer_variables_vbg[2].split(',')]
            float_namesvbg = [value for value in answer_variables_vbg[3].split(',')]
            
            # Remove letters and symbols except period
            cleaned_valuesvbg = ["".join(char for char in value if char.isdigit() or char == '.') for value in float_valuesvbg]

            vbgfloat_values = [float(cleaned_value) for cleaned_value in cleaned_valuesvbg]

            # Find the maximum value
            float_valuesmaxvbg = max(vbgfloat_values)
            print(float_valuesmaxvbg)
        
            range_maxvbg = 1.1 * float(float_valuesmaxvbg)
            print("range_maxvbg:", range_maxvbg)

            # Now you can use the individual variables as needed
            title_variable_vbg = answer_variables_vbg[0].replace("Step A:", "").strip().upper()
            subtitle_variable_vbg = answer_variables_vbg[1].replace("Step B:", "").strip()
            value_variable_vbg1 = re.sub(r"[^0-9.]", "", float_valuesvbg[0].replace("Step C:", "").strip())

            # Check if float_valuesvbg[1] is not empty
            if float_valuesvbg and len(float_valuesvbg) > 1:
                value_variable_vbg2 = re.sub(r"[^0-9.]", "", float_valuesvbg[1].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesvbg[1] is empty or not provided
                value_variable_vbg2 = None  # or any default value you want

            # Check if float_valuesvbg[2] is not empty
            if float_valuesvbg and len(float_valuesvbg) > 2:
                value_variable_vbg3 = re.sub(r"[^0-9.]", "", float_valuesvbg[2].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesvbg[2] is empty or not provided
                value_variable_vbg3 = None  # or any default value you want

            # Check if float_valuesvbg[3] is not empty
            if float_valuesvbg and len(float_valuesvbg) > 3:
                value_variable_vbg4 = re.sub(r"[^0-9.]", "", float_valuesvbg[3].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesvbg[3] is empty or not provided
                value_variable_vbg4 = None  # or any default value you want

            # Check if float_valuesvbg[4] is not empty
            if float_valuesvbg and len(float_valuesvbg) > 4:
                value_variable_vbg5 = re.sub(r"[^0-9.]", "", float_valuesvbg[4].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesvbg[4] is empty or not provided
                value_variable_vbg5 = None  # or any default value you want

            # Check if float_valuesvbg[5] is not empty
            if float_valuesvbg and len(float_valuesvbg) > 5:
                value_variable_vbg6 = re.sub(r"[^0-9.]", "", float_valuesvbg[5].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesvbg[5] is empty or not provided
                value_variable_vbg6 = None  # or any default value you want

            # Check if float_valuesvbg[6] is not empty
            if float_valuesvbg and len(float_valuesvbg) > 6:
                value_variable_vbg7 = re.sub(r"[^0-9.]", "", float_valuesvbg[6].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesvbg[6] is empty or not provided
                value_variable_vbg7 = None  # or any default value you want

            # Check if float_valuesvbg[7] is not empty
            if float_valuesvbg and len(float_valuesvbg) > 7:
                value_variable_vbg8 = re.sub(r"[^0-9.]", "", float_valuesvbg[7].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesvbg[7] is empty or not provided
                value_variable_vbg8 = None  # or any default value you want

                       
            
            name_variable_vbg1 = float_namesvbg[0].replace("Step D:", "").strip()

            # Check if float_namesvbg[1] is not empty
            if float_namesvbg and len(float_namesvbg) > 1:
                name_variable_vbg2 = float_namesvbg[1].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesvbg[1] is empty or not provided
                name_variable_vbg2 = None  # or any default name you want

            # Check if float_namesvbg[2] is not empty
            if float_namesvbg and len(float_namesvbg) > 2:
                name_variable_vbg3 = float_namesvbg[2].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesvbg[2] is empty or not provided
                name_variable_vbg3 = None  # or any default name you want

            # Check if float_namesvbg[3] is not empty
            if float_namesvbg and len(float_namesvbg) > 3:
                name_variable_vbg4 = float_namesvbg[3].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesvbg[3] is empty or not provided
                name_variable_vbg4 = None  # or any default name you want

            # Check if float_namesvbg[4] is not empty
            if float_namesvbg and len(float_namesvbg) > 4:
                name_variable_vbg5 = float_namesvbg[4].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesvbg[4] is empty or not provided
                name_variable_vbg5 = None  # or any default name you want

            # Check if float_namesvbg[5] is not empty
            if float_namesvbg and len(float_namesvbg) > 5:
                name_variable_vbg6 = float_namesvbg[5].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesvbg[5] is empty or not provided
                name_variable_vbg6 = None  # or any default name you want

            # Check if float_namesvbg[6] is not empty
            if float_namesvbg and len(float_namesvbg) > 6:
                name_variable_vbg7 = float_namesvbg[6].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesvbg[6] is empty or not provided
                name_variable_vbg7 = None  # or any default name you want

            # Check if float_namesvbg[7] is not empty
            if float_namesvbg and len(float_namesvbg) > 7:
                name_variable_vbg8 = float_namesvbg[7].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesvbg[7] is empty or not provided
                name_variable_vbg8 = None  # or any default name you want



            if value_variable_vbg1.endswith('.'):
                value_variable_vbg1 = value_variable_vbg1[:-1]
            if value_variable_vbg1.startswith('.'):
                value_variable_vbg1 = value_variable_vbg1[1:]

            if value_variable_vbg2 is not None:
                if value_variable_vbg2.endswith('.'):
                    value_variable_vbg2 = value_variable_vbg2[:-1]
                if value_variable_vbg2.startswith('.'):
                    value_variable_vbg2 = value_variable_vbg2[1:]

            if value_variable_vbg3 is not None:
                if value_variable_vbg3.endswith('.'):
                    value_variable_vbg3 = value_variable_vbg3[:-1]
                if value_variable_vbg3.startswith('.'):
                    value_variable_vbg3 = value_variable_vbg3[1:]

            if value_variable_vbg4 is not None:
                if value_variable_vbg4.endswith('.'):
                    value_variable_vbg4 = value_variable_vbg4[:-1]
                if value_variable_vbg4.startswith('.'):
                    value_variable_vbg4 = value_variable_vbg4[1:]

            if value_variable_vbg5 is not None:
                if value_variable_vbg5.endswith('.'):
                    value_variable_vbg5 = value_variable_vbg5[:-1]
                if value_variable_vbg5.startswith('.'):
                    value_variable_vbg5 = value_variable_vbg5[1:]

            if value_variable_vbg6 is not None:
                if value_variable_vbg6.endswith('.'):
                    value_variable_vbg6 = value_variable_vbg6[:-1]
                if value_variable_vbg6.startswith('.'):
                    value_variable_vbg6 = value_variable_vbg6[1:]

            if value_variable_vbg7 is not None:
                if value_variable_vbg7.endswith('.'):
                    value_variable_vbg7 = value_variable_vbg7[:-1]
                if value_variable_vbg7.startswith('.'):
                    value_variable_vbg7 = value_variable_vbg7[1:]

            if value_variable_vbg8 is not None:
                if value_variable_vbg8.endswith('.'):
                    value_variable_vbg8 = value_variable_vbg8[:-1]
                if value_variable_vbg8.startswith('.'):
                    value_variable_vbg8 = value_variable_vbg8[1:]


            # Ensure an object is selected
            if bpy.context.selected_objects:
                    selected_obj_vbg = bpy.context.active_object  # Get the active (selected) object

                    if selected_obj_vbg.type == 'MESH':
                            mesh_name_vbg = selected_obj_vbg.name

                            # Check if the selected object has modifiers
                            if selected_obj_vbg.modifiers:
                                    modifier_name_vbg = selected_obj_vbg.modifiers.active.name  # Get the name of the active modifier
                                    
                                    # Check if float_valuesvbg has 1 to 8 elements and assign the length directly
                                    num_elementsvbg = len(float_valuesvbg)
                                    if 1 <= num_elementsvbg <= 8:
                                        selected_obj_vbg.modifiers[modifier_name_vbg]["Input_57"] = num_elementsvbg


                                    selected_obj_vbg.modifiers[modifier_name_vbg]["Input_7"] = title_variable_vbg
                                    selected_obj_vbg.modifiers[modifier_name_vbg]["Input_8"] = subtitle_variable_vbg
                                    selected_obj_vbg.modifiers[modifier_name_vbg]["Input_11"] = float(range_maxvbg)
                                    selected_obj_vbg.modifiers[modifier_name_vbg]["Input_14"] = float(value_variable_vbg1)

                                    # Check if value_variable_vbg2 is not empty
                                    if value_variable_vbg2:
                                        selected_obj_vbg.modifiers[modifier_name_vbg]["Input_41"] = float(value_variable_vbg2)
                                    else:
                                        print("Value for Input_41 is empty or not provided.")

                                    # Check if value_variable_vbg3 is not empty
                                    if value_variable_vbg3:
                                        selected_obj_vbg.modifiers[modifier_name_vbg]["Input_15"] = float(value_variable_vbg3)
                                    else:
                                        print("Value for Input_15 is empty or not provided.")

                                    # Check if value_variable_vbg4 is not empty
                                    if value_variable_vbg4:
                                        selected_obj_vbg.modifiers[modifier_name_vbg]["Input_44"] = float(value_variable_vbg4)
                                    else:
                                        print("Value for Input_44 is empty or not provided.")

                                    # Check if value_variable_vbg5 is not empty
                                    if value_variable_vbg5:
                                        selected_obj_vbg.modifiers[modifier_name_vbg]["Input_16"] = float(value_variable_vbg5)
                                    else:
                                        print("Value for Input_16 is empty or not provided.")

                                    # Check if value_variable_vbg6 is not empty
                                    if value_variable_vbg6:
                                        selected_obj_vbg.modifiers[modifier_name_vbg]["Input_48"] = float(value_variable_vbg6)
                                    else:
                                        print("Value for Input_48 is empty or not provided.")

                                    # Check if value_variable_vbg7 is not empty
                                    if value_variable_vbg7:
                                        selected_obj_vbg.modifiers[modifier_name_vbg]["Input_17"] = float(value_variable_vbg7)
                                    else:
                                        print("Value for Input_17 is empty or not provided.")

                                    # Check if value_variable_vbg8 is not empty
                                    if value_variable_vbg8:
                                        selected_obj_vbg.modifiers[modifier_name_vbg]["Input_50"] = float(value_variable_vbg8)
                                    else:
                                        print("Value for Input_50 is empty or not provided.")


                                    selected_obj_vbg.modifiers[modifier_name_vbg]["Input_2"] = name_variable_vbg1

                                    # Check if name_variable_vbg2 is not empty before setting the input
                                    if name_variable_vbg2:
                                        selected_obj_vbg.modifiers[modifier_name_vbg]["Input_42"] = name_variable_vbg2
                                    else:
                                        print("Name for Input_42 is empty or not provided.")     

                                    # Check if name_variable_vbg3 is not empty before setting the input
                                    if name_variable_vbg3:
                                        selected_obj_vbg.modifiers[modifier_name_vbg]["Input_3"] = name_variable_vbg3
                                    else:
                                        print("Name for Input_3 is empty or not provided.")    

                                    # Check if name_variable_vbg4 is not empty before setting the input
                                    if name_variable_vbg4:
                                        selected_obj_vbg.modifiers[modifier_name_vbg]["Input_45"] = name_variable_vbg4
                                    else:
                                        print("Name for Input_45 is empty or not provided.")    

                                    # Check if name_variable_vbg5 is not empty before setting the input
                                    if name_variable_vbg5:
                                        selected_obj_vbg.modifiers[modifier_name_vbg]["Input_4"] = name_variable_vbg5
                                    else:
                                        print("Name for Input_4 is empty or not provided.")    

                                    # Check if name_variable_vbg6 is not empty before setting the input
                                    if name_variable_vbg6:
                                        selected_obj_vbg.modifiers[modifier_name_vbg]["Input_47"] = name_variable_vbg6
                                    else:
                                        print("Name for Input_47 is empty or not provided.")  

                                    # Check if name_variable_vbg7 is not empty before setting the input
                                    if name_variable_vbg7:
                                        selected_obj_vbg.modifiers[modifier_name_vbg]["Input_5"] = name_variable_vbg7
                                    else:
                                        print("Name for Input_5 is empty or not provided.")  

                                    # Check if name_variable_vbg8 is not empty before setting the input
                                    if name_variable_vbg8:
                                        selected_obj_vbg.modifiers[modifier_name_vbg]["Input_49"] = name_variable_vbg8
                                    else:
                                        print("Name for Input_49 is empty or not provided.")

                                      


                                    print(f"Set modifier input for object '{mesh_name_vbg}' and modifier '{modifier_name_vbg}'.")
                            else:
                                    print(f"Selected object '{mesh_name_vbg}' has no modifiers.")
                    else:
                            print("Selected object is not a mesh.")
            else:
                    print("No object selected.")
            bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorLGgenai(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorlineggenai"
    bl_label = "Import Gen AI Data"

    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        api_key_file_path = bpy.path.abspath(mytool.my_pathapi_key)
        filepath_fulllgaisiteurl = bpy.path.abspath(mytool.my_stringsiteurl)
        filepath_fulllgaiappname = bpy.path.abspath(mytool.my_stringappname)
        filepath_fulllgaiapikey = read_api_key(api_key_file_path)
        
        if not filepath_fulllgaiapikey:
            print("Failed to read API key. Aborting operation.")
            return {'CANCELLED'}
        filepath_fulllgaimodelname1 = bpy.path.abspath(mytool.my_stringmodelname1)
        filepath_fulllgaimodelname2 = bpy.path.abspath(mytool.my_stringmodelname2)        
        filepath_fulllgaiinput1 = bpy.path.abspath(mytool.my_stringline_gengraph1)
        filepath_fulllgaiinput2 = bpy.path.abspath(mytool.my_stringline_gengraph2)
        filepath_fulllgaiinput3 = bpy.path.abspath(mytool.my_stringline_gengraph3)
        filepath_fullurl = bpy.path.abspath(mytool.my_stringresponseurl)

        sub_questionlg = filepath_fulllgaiinput1
        main_questionlg = filepath_fulllgaiinput2.format(sub_questionlg)

        questionlg = f"{main_questionlg} {sub_questionlg}"

        # Replace with your actual values
        YOUR_SITE_URL = filepath_fulllgaisiteurl
        YOUR_APP_NAME = filepath_fulllgaiappname
        YOUR_API_KEY = filepath_fulllgaiapikey

        response = requests.post(
            url=filepath_fullurl,
            headers={
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": YOUR_APP_NAME,
                "Authorization": f"Bearer {YOUR_API_KEY}",  # Include your API key in the Authorization header
            },
            data=json.dumps({
                "model": filepath_fulllgaimodelname1,
                "messages": [
                    {"role": "user", "content": questionlg}
                ]
            })
        )

        # Parse the JSON response
        response_jsonlga = response.json()
        
        # Print the response for debugging
        print("Response JSON:", response_jsonlga)

        # Extract the answer if available
        answer_lg = response_jsonlga.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

        # Print the answer for debugging
        print("Answer Circle:", answer_lg)
        
                
        relevant_infolg = answer_lg
        
        if relevant_infolg:
            # Extract necessary details from relevant_info
            # Modify the construction of the new question based on the extracted information
            new_questionlg = f"{filepath_fulllgaiinput3}. Here's the text: {relevant_infolg}"

            # Make another API request with the new question
            new_response = requests.post(
                url=filepath_fullurl,
                headers={
                    "HTTP-Referer": YOUR_SITE_URL,
                    "X-Title": YOUR_APP_NAME,
                    "Authorization": f"Bearer {YOUR_API_KEY}",
                },
                data=json.dumps({
                    "model": filepath_fulllgaimodelname2,
                    "messages": [
                        {"role": "user", "content": new_questionlg}
                    ]
                })
            )

            # Parse the JSON response for the new question
            new_response_jsonlgb = new_response.json()
            
            # Extract the answer if available
            answer_lg1 = new_response_jsonlgb.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

            # Print the answer for debugging
            print("Answer Circle1:", answer_lg1)

            # Split the answer into variables based on commas
            answer_variables_lg = answer_lg1.split(';')
            
            # Split the answer further
            float_valueslg = [value for value in answer_variables_lg[2].split(',')]
            float_nameslg = [value for value in answer_variables_lg[3].split(',')]
            
            # Remove letters and symbols except period
            cleaned_valueslg = ["".join(char for char in value if char.isdigit() or char == '.') for value in float_valueslg]

            lgfloat_values = [float(cleaned_value) for cleaned_value in cleaned_valueslg]

            # Find the maximum value
            float_valuesmaxlg = max(lgfloat_values)
            print(float_valuesmaxlg)
        
            range_maxlg = 1.1 * float(float_valuesmaxlg)
            print("range_maxlg:", range_maxlg)

            # Now you can use the individual variables as needed
            title_variable_lg = answer_variables_lg[0].replace("Step A:", "").strip().upper()
            subtitle_variable_lg = answer_variables_lg[1].replace("Step B:", "").strip()
            value_variable_lg1 = re.sub(r"[^0-9.]", "", float_valueslg[0].replace("Step C:", "").strip())

            # Check if float_valueslg[1] is not empty
            if float_valueslg and len(float_valueslg) > 1:
                value_variable_lg2 = re.sub(r"[^0-9.]", "", float_valueslg[1].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[1] is empty or not provided
                value_variable_lg2 = None  # or any default value you want

            # Check if float_valueslg[2] is not empty
            if float_valueslg and len(float_valueslg) > 2:
                value_variable_lg3 = re.sub(r"[^0-9.]", "", float_valueslg[2].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[2] is empty or not provided
                value_variable_lg3 = None  # or any default value you want

            # Check if float_valueslg[3] is not empty
            if float_valueslg and len(float_valueslg) > 3:
                value_variable_lg4 = re.sub(r"[^0-9.]", "", float_valueslg[3].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[3] is empty or not provided
                value_variable_lg4 = None  # or any default value you want

            # Check if float_valueslg[4] is not empty
            if float_valueslg and len(float_valueslg) > 4:
                value_variable_lg5 = re.sub(r"[^0-9.]", "", float_valueslg[4].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[4] is empty or not provided
                value_variable_lg5 = None  # or any default value you want

            # Check if float_valueslg[5] is not empty
            if float_valueslg and len(float_valueslg) > 5:
                value_variable_lg6 = re.sub(r"[^0-9.]", "", float_valueslg[5].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[5] is empty or not provided
                value_variable_lg6 = None  # or any default value you want

            # Check if float_valueslg[6] is not empty
            if float_valueslg and len(float_valueslg) > 6:
                value_variable_lg7 = re.sub(r"[^0-9.]", "", float_valueslg[6].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[6] is empty or not provided
                value_variable_lg7 = None  # or any default value you want

            # Check if float_valueslg[7] is not empty
            if float_valueslg and len(float_valueslg) > 7:
                value_variable_lg8 = re.sub(r"[^0-9.]", "", float_valueslg[7].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[7] is empty or not provided
                value_variable_lg8 = None  # or any default value you want

            # Check if float_valueslg[8] is not empty
            if float_valueslg and len(float_valueslg) > 8:
                value_variable_lg9 = re.sub(r"[^0-9.]", "", float_valueslg[8].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[8] is empty or not provided
                value_variable_lg9 = None  # or any default value you want

            # Check if float_valueslg[9] is not empty
            if float_valueslg and len(float_valueslg) > 9:
                value_variable_lg10 = re.sub(r"[^0-9.]", "", float_valueslg[9].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[9] is empty or not provided
                value_variable_lg10 = None  # or any default value you want

            # Check if float_valueslg[10] is not empty
            if float_valueslg and len(float_valueslg) > 10:
                value_variable_lg11 = re.sub(r"[^0-9.]", "", float_valueslg[10].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[10] is empty or not provided
                value_variable_lg11 = None  # or any default value you want                       

            # Check if float_valueslg[11] is not empty
            if float_valueslg and len(float_valueslg) > 11:
                value_variable_lg12 = re.sub(r"[^0-9.]", "", float_valueslg[11].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[11] is empty or not provided
                value_variable_lg12 = None  # or any default value you want 

            # Check if float_valueslg[12] is not empty
            if float_valueslg and len(float_valueslg) > 12:
                value_variable_lg13 = re.sub(r"[^0-9.]", "", float_valueslg[12].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[12] is empty or not provided
                value_variable_lg13 = None  # or any default value you want 

            # Check if float_valueslg[13] is not empty
            if float_valueslg and len(float_valueslg) > 13:
                value_variable_lg14 = re.sub(r"[^0-9.]", "", float_valueslg[13].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[13] is empty or not provided
                value_variable_lg14 = None  # or any default value you want 

            # Check if float_valueslg[14] is not empty
            if float_valueslg and len(float_valueslg) > 14:
                value_variable_lg15 = re.sub(r"[^0-9.]", "", float_valueslg[14].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[14] is empty or not provided
                value_variable_lg15 = None  # or any default value you want 

            # Check if float_valueslg[15] is not empty
            if float_valueslg and len(float_valueslg) > 15:
                value_variable_lg16 = re.sub(r"[^0-9.]", "", float_valueslg[15].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[15] is empty or not provided
                value_variable_lg16 = None  # or any default value you want 

            # Check if float_valueslg[16] is not empty
            if float_valueslg and len(float_valueslg) > 16:
                value_variable_lg17 = re.sub(r"[^0-9.]", "", float_valueslg[16].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[16] is empty or not provided
                value_variable_lg17 = None  # or any default value you want 

            # Check if float_valueslg[17] is not empty
            if float_valueslg and len(float_valueslg) > 17:
                value_variable_lg18 = re.sub(r"[^0-9.]", "", float_valueslg[17].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[17] is empty or not provided
                value_variable_lg18 = None  # or any default value you want 

            # Check if float_valueslg[18] is not empty
            if float_valueslg and len(float_valueslg) > 18:
                value_variable_lg19 = re.sub(r"[^0-9.]", "", float_valueslg[18].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[18] is empty or not provided
                value_variable_lg19 = None  # or any default value you want 

            # Check if float_valueslg[19] is not empty
            if float_valueslg and len(float_valueslg) > 19:
                value_variable_lg20 = re.sub(r"[^0-9.]", "", float_valueslg[19].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[19] is empty or not provided
                value_variable_lg20 = None  # or any default value you want 

            # Check if float_valueslg[20] is not empty
            if float_valueslg and len(float_valueslg) > 20:
                value_variable_lg21 = re.sub(r"[^0-9.]", "", float_valueslg[20].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[20] is empty or not provided
                value_variable_lg21 = None  # or any default value you want 

            # Check if float_valueslg[21] is not empty
            if float_valueslg and len(float_valueslg) > 21:
                value_variable_lg22 = re.sub(r"[^0-9.]", "", float_valueslg[21].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[21] is empty or not provided
                value_variable_lg22 = None  # or any default value you want 

            # Check if float_valueslg[22] is not empty
            if float_valueslg and len(float_valueslg) > 22:
                value_variable_lg23 = re.sub(r"[^0-9.]", "", float_valueslg[22].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[22] is empty or not provided
                value_variable_lg23 = None  # or any default value you want 

            # Check if float_valueslg[23] is not empty
            if float_valueslg and len(float_valueslg) > 23:
                value_variable_lg24 = re.sub(r"[^0-9.]", "", float_valueslg[23].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[23] is empty or not provided
                value_variable_lg24 = None  # or any default value you want

            # Check if float_valueslg[24] is not empty
            if float_valueslg and len(float_valueslg) > 24:
                value_variable_lg25 = re.sub(r"[^0-9.]", "", float_valueslg[24].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[24] is empty or not provided
                value_variable_lg25 = None  # or any default value you want

            # Check if float_valueslg[25] is not empty
            if float_valueslg and len(float_valueslg) > 25:
                value_variable_lg26 = re.sub(r"[^0-9.]", "", float_valueslg[25].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[25] is empty or not provided
                value_variable_lg26 = None  # or any default value you want

            # Check if float_valueslg[26] is not empty
            if float_valueslg and len(float_valueslg) > 26:
                value_variable_lg27 = re.sub(r"[^0-9.]", "", float_valueslg[26].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[26] is empty or not provided
                value_variable_lg27 = None  # or any default value you want

            # Check if float_valueslg[27] is not empty
            if float_valueslg and len(float_valueslg) > 27:
                value_variable_lg28 = re.sub(r"[^0-9.]", "", float_valueslg[27].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[27] is empty or not provided
                value_variable_lg28 = None  # or any default value you want

            # Check if float_valueslg[28] is not empty
            if float_valueslg and len(float_valueslg) > 28:
                value_variable_lg29 = re.sub(r"[^0-9.]", "", float_valueslg[28].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[28] is empty or not provided
                value_variable_lg29 = None  # or any default value you want

            # Check if float_valueslg[29] is not empty
            if float_valueslg and len(float_valueslg) > 29:
                value_variable_lg30 = re.sub(r"[^0-9.]", "", float_valueslg[29].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valueslg[29] is empty or not provided
                value_variable_lg30 = None  # or any default value you want

            
            name_variable_lg1 = float_nameslg[0].replace("Step D:", "").strip()

            # Check if float_nameslg[1] is not empty
            if float_nameslg and len(float_nameslg) > 1:
                name_variable_lg2 = float_nameslg[1].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[1] is empty or not provided
                name_variable_lg2 = None  # or any default name you want

            # Check if float_nameslg[2] is not empty
            if float_nameslg and len(float_nameslg) > 2:
                name_variable_lg3 = float_nameslg[2].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[2] is empty or not provided
                name_variable_lg3 = None  # or any default name you want

            # Check if float_nameslg[3] is not empty
            if float_nameslg and len(float_nameslg) > 3:
                name_variable_lg4 = float_nameslg[3].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[3] is empty or not provided
                name_variable_lg4 = None  # or any default name you want

            # Check if float_nameslg[4] is not empty
            if float_nameslg and len(float_nameslg) > 4:
                name_variable_lg5 = float_nameslg[4].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[4] is empty or not provided
                name_variable_lg5 = None  # or any default name you want

            # Check if float_nameslg[5] is not empty
            if float_nameslg and len(float_nameslg) > 5:
                name_variable_lg6 = float_nameslg[5].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[5] is empty or not provided
                name_variable_lg6 = None  # or any default name you want

            # Check if float_nameslg[6] is not empty
            if float_nameslg and len(float_nameslg) > 6:
                name_variable_lg7 = float_nameslg[6].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[6] is empty or not provided
                name_variable_lg7 = None  # or any default name you want

            # Check if float_nameslg[7] is not empty
            if float_nameslg and len(float_nameslg) > 7:
                name_variable_lg8 = float_nameslg[7].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[7] is empty or not provided
                name_variable_lg8 = None  # or any default name you want

            # Check if float_nameslg[8] is not empty
            if float_nameslg and len(float_nameslg) > 8:
                name_variable_lg9 = float_nameslg[8].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[8] is empty or not provided
                name_variable_lg9 = None  # or any default name you want

            # Check if float_nameslg[9] is not empty
            if float_nameslg and len(float_nameslg) > 9:
                name_variable_lg10 = float_nameslg[9].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[9] is empty or not provided
                name_variable_lg10 = None  # or any default name you want

            # Check if float_nameslg[10] is not empty
            if float_nameslg and len(float_nameslg) > 10:
                name_variable_lg11 = float_nameslg[10].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[10] is empty or not provided
                name_variable_lg11 = None  # or any default name you want

            # Check if float_nameslg[11] is not empty
            if float_nameslg and len(float_nameslg) > 11:
                name_variable_lg12 = float_nameslg[11].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[11] is empty or not provided
                name_variable_lg12 = None  # or any default name you want

            # Check if float_nameslg[12] is not empty
            if float_nameslg and len(float_nameslg) > 12:
                name_variable_lg13 = float_nameslg[12].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[12] is empty or not provided
                name_variable_lg13 = None  # or any default name you want

            # Check if float_nameslg[13] is not empty
            if float_nameslg and len(float_nameslg) > 13:
                name_variable_lg14 = float_nameslg[13].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[13] is empty or not provided
                name_variable_lg14 = None  # or any default name you want

            # Check if float_nameslg[14] is not empty
            if float_nameslg and len(float_nameslg) > 14:
                name_variable_lg15 = float_nameslg[14].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[14] is empty or not provided
                name_variable_lg15 = None  # or any default name you want

            # Check if float_nameslg[15] is not empty
            if float_nameslg and len(float_nameslg) > 15:
                name_variable_lg16 = float_nameslg[15].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[15] is empty or not provided
                name_variable_lg16 = None  # or any default name you want

            # Check if float_nameslg[16] is not empty
            if float_nameslg and len(float_nameslg) > 16:
                name_variable_lg17 = float_nameslg[16].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[16] is empty or not provided
                name_variable_lg17 = None  # or any default name you want

            # Check if float_nameslg[17] is not empty
            if float_nameslg and len(float_nameslg) > 17:
                name_variable_lg18 = float_nameslg[17].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[17] is empty or not provided
                name_variable_lg18 = None  # or any default name you want

            # Check if float_nameslg[18] is not empty
            if float_nameslg and len(float_nameslg) > 18:
                name_variable_lg19 = float_nameslg[18].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[18] is empty or not provided
                name_variable_lg19 = None  # or any default name you want

            # Check if float_nameslg[19] is not empty
            if float_nameslg and len(float_nameslg) > 19:
                name_variable_lg20 = float_nameslg[19].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[19] is empty or not provided
                name_variable_lg20 = None  # or any default name you want

            # Check if float_nameslg[20] is not empty
            if float_nameslg and len(float_nameslg) > 20:
                name_variable_lg21 = float_nameslg[20].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[20] is empty or not provided
                name_variable_lg21 = None  # or any default name you want

            # Check if float_nameslg[21] is not empty
            if float_nameslg and len(float_nameslg) > 21:
                name_variable_lg22 = float_nameslg[21].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[21] is empty or not provided
                name_variable_lg22 = None  # or any default name you want

            # Check if float_nameslg[22] is not empty
            if float_nameslg and len(float_nameslg) > 22:
                name_variable_lg23 = float_nameslg[22].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[22] is empty or not provided
                name_variable_lg23 = None  # or any default name you want

            # Check if float_nameslg[23] is not empty
            if float_nameslg and len(float_nameslg) > 23:
                name_variable_lg24 = float_nameslg[23].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[23] is empty or not provided
                name_variable_lg24 = None  # or any default name you want

            # Check if float_nameslg[24] is not empty
            if float_nameslg and len(float_nameslg) > 24:
                name_variable_lg25 = float_nameslg[24].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[24] is empty or not provided
                name_variable_lg25 = None  # or any default name you want

            # Check if float_nameslg[25] is not empty
            if float_nameslg and len(float_nameslg) > 25:
                name_variable_lg26 = float_nameslg[25].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[25] is empty or not provided
                name_variable_lg26 = None  # or any default name you want

            # Check if float_nameslg[26] is not empty
            if float_nameslg and len(float_nameslg) > 26:
                name_variable_lg27 = float_nameslg[26].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[26] is empty or not provided
                name_variable_lg27 = None  # or any default name you want

            # Check if float_nameslg[27] is not empty
            if float_nameslg and len(float_nameslg) > 27:
                name_variable_lg28 = float_nameslg[27].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[27] is empty or not provided
                name_variable_lg28 = None  # or any default name you want

            # Check if float_nameslg[28] is not empty
            if float_nameslg and len(float_nameslg) > 28:
                name_variable_lg29 = float_nameslg[28].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[28] is empty or not provided
                name_variable_lg29 = None  # or any default name you want

            # Check if float_nameslg[29] is not empty
            if float_nameslg and len(float_nameslg) > 29:
                name_variable_lg30 = float_nameslg[29].replace("Step D:", "").strip()
            else:
                # Handle the case where float_nameslg[29] is empty or not provided
                name_variable_lg30 = None  # or any default name you want



            if value_variable_lg1.endswith('.'):
                value_variable_lg1 = value_variable_lg1[:-1]
            if value_variable_lg1.startswith('.'):
                value_variable_lg1 = value_variable_lg1[1:]

            if value_variable_lg2 is not None:
                if value_variable_lg2.endswith('.'):
                    value_variable_lg2 = value_variable_lg2[:-1]
                if value_variable_lg2.startswith('.'):
                    value_variable_lg2 = value_variable_lg2[1:]

            if value_variable_lg3 is not None:
                if value_variable_lg3.endswith('.'):
                    value_variable_lg3 = value_variable_lg3[:-1]
                if value_variable_lg3.startswith('.'):
                    value_variable_lg3 = value_variable_lg3[1:]

            if value_variable_lg4 is not None:
                if value_variable_lg4.endswith('.'):
                    value_variable_lg4 = value_variable_lg4[:-1]
                if value_variable_lg4.startswith('.'):
                    value_variable_lg4 = value_variable_lg4[1:]

            if value_variable_lg5 is not None:
                if value_variable_lg5.endswith('.'):
                    value_variable_lg5 = value_variable_lg5[:-1]
                if value_variable_lg5.startswith('.'):
                    value_variable_lg5 = value_variable_lg5[1:]

            if value_variable_lg6 is not None:
                if value_variable_lg6.endswith('.'):
                    value_variable_lg6 = value_variable_lg6[:-1]
                if value_variable_lg6.startswith('.'):
                    value_variable_lg6 = value_variable_lg6[1:]

            if value_variable_lg7 is not None:
                if value_variable_lg7.endswith('.'):
                    value_variable_lg7 = value_variable_lg7[:-1]
                if value_variable_lg7.startswith('.'):
                    value_variable_lg7 = value_variable_lg7[1:]

            if value_variable_lg8 is not None:
                if value_variable_lg8.endswith('.'):
                    value_variable_lg8 = value_variable_lg8[:-1]
                if value_variable_lg8.startswith('.'):
                    value_variable_lg8 = value_variable_lg8[1:]

            if value_variable_lg9 is not None:
                if value_variable_lg9.endswith('.'):
                    value_variable_lg9 = value_variable_lg9[:-1]
                if value_variable_lg9.startswith('.'):
                    value_variable_lg9 = value_variable_lg9[1:]

            if value_variable_lg10 is not None:
                if value_variable_lg10.endswith('.'):
                    value_variable_lg10 = value_variable_lg10[:-1]
                if value_variable_lg10.startswith('.'):
                    value_variable_lg10 = value_variable_lg10[1:]

            if value_variable_lg11 is not None:
                if value_variable_lg11.endswith('.'):
                    value_variable_lg11 = value_variable_lg11[:-1]
                if value_variable_lg11.startswith('.'):
                    value_variable_lg11 = value_variable_lg11[1:]

            if value_variable_lg12 is not None:
                if value_variable_lg12.endswith('.'):
                    value_variable_lg12 = value_variable_lg12[:-1]
                if value_variable_lg12.startswith('.'):
                    value_variable_lg12 = value_variable_lg12[1:]

            if value_variable_lg13 is not None:
                if value_variable_lg13.endswith('.'):
                    value_variable_lg13 = value_variable_lg13[:-1]
                if value_variable_lg13.startswith('.'):
                    value_variable_lg13 = value_variable_lg13[1:]

            if value_variable_lg14 is not None:
                if value_variable_lg14.endswith('.'):
                    value_variable_lg14 = value_variable_lg14[:-1]
                if value_variable_lg14.startswith('.'):
                    value_variable_lg14 = value_variable_lg14[1:]

            if value_variable_lg15 is not None:
                if value_variable_lg15.endswith('.'):
                    value_variable_lg15 = value_variable_lg15[:-1]
                if value_variable_lg15.startswith('.'):
                    value_variable_lg15 = value_variable_lg15[1:]

            if value_variable_lg16 is not None:
                if value_variable_lg16.endswith('.'):
                    value_variable_lg16 = value_variable_lg16[:-1]
                if value_variable_lg16.startswith('.'):
                    value_variable_lg16 = value_variable_lg16[1:]

            if value_variable_lg17 is not None:
                if value_variable_lg17.endswith('.'):
                    value_variable_lg17 = value_variable_lg17[:-1]
                if value_variable_lg17.startswith('.'):
                    value_variable_lg17 = value_variable_lg17[1:]

            if value_variable_lg18 is not None:
                if value_variable_lg18.endswith('.'):
                    value_variable_lg18 = value_variable_lg18[:-1]
                if value_variable_lg18.startswith('.'):
                    value_variable_lg18 = value_variable_lg18[1:]

            if value_variable_lg19 is not None:
                if value_variable_lg19.endswith('.'):
                    value_variable_lg19 = value_variable_lg19[:-1]
                if value_variable_lg19.startswith('.'):
                    value_variable_lg19 = value_variable_lg19[1:]

            if value_variable_lg20 is not None:
                if value_variable_lg20.endswith('.'):
                    value_variable_lg20 = value_variable_lg20[:-1]
                if value_variable_lg20.startswith('.'):
                    value_variable_lg20 = value_variable_lg20[1:]

            if value_variable_lg21 is not None:
                if value_variable_lg21.endswith('.'):
                    value_variable_lg21 = value_variable_lg21[:-1]
                if value_variable_lg21.startswith('.'):
                    value_variable_lg21 = value_variable_lg21[1:]

            if value_variable_lg22 is not None:
                if value_variable_lg22.endswith('.'):
                    value_variable_lg22 = value_variable_lg22[:-1]
                if value_variable_lg22.startswith('.'):
                    value_variable_lg22 = value_variable_lg22[1:]

            if value_variable_lg23 is not None:
                if value_variable_lg23.endswith('.'):
                    value_variable_lg23 = value_variable_lg23[:-1]
                if value_variable_lg23.startswith('.'):
                    value_variable_lg23 = value_variable_lg23[1:]

            if value_variable_lg24 is not None:
                if value_variable_lg24.endswith('.'):
                    value_variable_lg24 = value_variable_lg24[:-1]
                if value_variable_lg24.startswith('.'):
                    value_variable_lg24 = value_variable_lg24[1:]

            if value_variable_lg25 is not None:
                if value_variable_lg25.endswith('.'):
                    value_variable_lg25 = value_variable_lg25[:-1]
                if value_variable_lg25.startswith('.'):
                    value_variable_lg25 = value_variable_lg25[1:]

            if value_variable_lg26 is not None:
                if value_variable_lg26.endswith('.'):
                    value_variable_lg26 = value_variable_lg26[:-1]
                if value_variable_lg26.startswith('.'):
                    value_variable_lg26 = value_variable_lg26[1:]

            if value_variable_lg27 is not None:
                if value_variable_lg27.endswith('.'):
                    value_variable_lg27 = value_variable_lg27[:-1]
                if value_variable_lg27.startswith('.'):
                    value_variable_lg27 = value_variable_lg27[1:]

            if value_variable_lg28 is not None:
                if value_variable_lg28.endswith('.'):
                    value_variable_lg28 = value_variable_lg28[:-1]
                if value_variable_lg28.startswith('.'):
                    value_variable_lg28 = value_variable_lg28[1:]

            if value_variable_lg29 is not None:
                if value_variable_lg29.endswith('.'):
                    value_variable_lg29 = value_variable_lg29[:-1]
                if value_variable_lg29.startswith('.'):
                    value_variable_lg29 = value_variable_lg29[1:]

            if value_variable_lg30 is not None:
                if value_variable_lg30.endswith('.'):
                    value_variable_lg30 = value_variable_lg30[:-1]
                if value_variable_lg30.startswith('.'):
                    value_variable_lg30 = value_variable_lg30[1:]


            # Ensure an object is selected
            if bpy.context.selected_objects:
                    selected_obj = bpy.context.active_object  # Get the active (selected) object

                    if selected_obj.type == 'MESH':
                            mesh_name = selected_obj.name

                            # Check if the selected object has modifiers
                            if selected_obj.modifiers:
                                    if len(selected_obj.modifiers) >= 2:  # Ensure at least two modifiers exist
                                            modifier_0 = selected_obj.modifiers.get("GeometryNodes")
                                            modifier_1 = selected_obj.modifiers.get("GeometryNodes.001")

                                    if modifier_0 and modifier_1:
                                    
                                        # Check if float_valueslg has 1 to 30 elements and assign the length directly
                                        num_elementslg = len(float_valueslg)
                                        if 1 <= num_elementslg <= 30:
                                            modifier_0["Input_2"] = num_elementslg


                                        modifier_1["Input_23"] = title_variable_lg
                                        modifier_1["Input_22"] = subtitle_variable_lg
                                        modifier_0["Input_14"] = float(range_maxlg)
                                        modifier_0["Input_4"] = float(value_variable_lg1)

                                        # Check if value_variable_lg2 is not empty
                                        if value_variable_lg2:
                                            modifier_0["Input_5"] = float(value_variable_lg2)
                                        else:
                                            print("Value for Input_5 is empty or not provided.")

                                        # Check if value_variable_lg3 is not empty
                                        if value_variable_lg3:
                                            modifier_0["Input_6"] = float(value_variable_lg3)
                                        else:
                                            print("Value for Input_6 is empty or not provided.")

                                        # Check if value_variable_lg4 is not empty
                                        if value_variable_lg4:
                                            modifier_0["Input_7"] = float(value_variable_lg4)
                                        else:
                                            print("Value for Input_7 is empty or not provided.")

                                        # Check if value_variable_lg5 is not empty
                                        if value_variable_lg5:
                                            modifier_0["Input_8"] = float(value_variable_lg5)
                                        else:
                                            print("Value for Input_8 is empty or not provided.")

                                        # Check if value_variable_lg6 is not empty
                                        if value_variable_lg6:
                                            modifier_0["Input_9"] = float(value_variable_lg6)
                                        else:
                                            print("Value for Input_9 is empty or not provided.")

                                        # Check if value_variable_lg7 is not empty
                                        if value_variable_lg7:
                                            modifier_0["Input_10"] = float(value_variable_lg7)
                                        else:
                                            print("Value for Input_10 is empty or not provided.")

                                        # Check if value_variable_lg8 is not empty
                                        if value_variable_lg8:
                                            modifier_0["Input_11"] = float(value_variable_lg8)
                                        else:
                                            print("Value for Input_11 is empty or not provided.")

                                        # Check if value_variable_lg9 is not empty
                                        if value_variable_lg9:
                                            modifier_0["Socket_0"] = float(value_variable_lg9)
                                        else:
                                            print("Value for Socket_0 is empty or not provided.")

                                        # Check if value_variable_lg10 is not empty
                                        if value_variable_lg10:
                                            modifier_0["Socket_1"] = float(value_variable_lg10)
                                        else:
                                            print("Value for Socket_1 is empty or not provided.")

                                        # Check if value_variable_lg11 is not empty
                                        if value_variable_lg11:
                                            modifier_0["Socket_2"] = float(value_variable_lg11)
                                        else:
                                            print("Value for Socket_2 is empty or not provided.")

                                        # Check if value_variable_lg12 is not empty
                                        if value_variable_lg12:
                                            modifier_0["Socket_3"] = float(value_variable_lg12)
                                        else:
                                            print("Value for Socket_3 is empty or not provided.")

                                        # Check if value_variable_lg13 is not empty
                                        if value_variable_lg13:
                                            modifier_0["Socket_4"] = float(value_variable_lg13)
                                        else:
                                            print("Value for Socket_4 is empty or not provided.")

                                        # Check if value_variable_lg14 is not empty
                                        if value_variable_lg14:
                                            modifier_0["Socket_5"] = float(value_variable_lg14)
                                        else:
                                            print("Value for Socket_5 is empty or not provided.")

                                        # Check if value_variable_lg15 is not empty
                                        if value_variable_lg15:
                                            modifier_0["Socket_6"] = float(value_variable_lg15)
                                        else:
                                            print("Value for Socket_6 is empty or not provided.")

                                        # Check if value_variable_lg16 is not empty
                                        if value_variable_lg16:
                                            modifier_0["Socket_7"] = float(value_variable_lg16)
                                        else:
                                            print("Value for Socket_7 is empty or not provided.")

                                        # Check if value_variable_lg17 is not empty
                                        if value_variable_lg17:
                                            modifier_0["Socket_8"] = float(value_variable_lg17)
                                        else:
                                            print("Value for Socket_8 is empty or not provided.")

                                        # Check if value_variable_lg18 is not empty
                                        if value_variable_lg18:
                                            modifier_0["Socket_9"] = float(value_variable_lg18)
                                        else:
                                            print("Value for Socket_9 is empty or not provided.")

                                        # Check if value_variable_lg19 is not empty
                                        if value_variable_lg19:
                                            modifier_0["Socket_10"] = float(value_variable_lg19)
                                        else:
                                            print("Value for Socket_10 is empty or not provided.")

                                        # Check if value_variable_lg20 is not empty
                                        if value_variable_lg20:
                                            modifier_0["Socket_11"] = float(value_variable_lg20)
                                        else:
                                            print("Value for Socket_11 is empty or not provided.")

                                        # Check if value_variable_lg21 is not empty
                                        if value_variable_lg21:
                                            modifier_0["Socket_12"] = float(value_variable_lg21)
                                        else:
                                            print("Value for Socket_12 is empty or not provided.")

                                        # Check if value_variable_lg22 is not empty
                                        if value_variable_lg22:
                                            modifier_0["Socket_13"] = float(value_variable_lg22)
                                        else:
                                            print("Value for Socket_13 is empty or not provided.")

                                        # Check if value_variable_lg23 is not empty
                                        if value_variable_lg23:
                                            modifier_0["Socket_14"] = float(value_variable_lg23)
                                        else:
                                            print("Value for Socket_14 is empty or not provided.")

                                        # Check if value_variable_lg24 is not empty
                                        if value_variable_lg24:
                                            modifier_0["Socket_15"] = float(value_variable_lg24)
                                        else:
                                            print("Value for Socket_15 is empty or not provided.")

                                        # Check if value_variable_lg25 is not empty
                                        if value_variable_lg25:
                                            modifier_0["Socket_16"] = float(value_variable_lg25)
                                        else:
                                            print("Value for Socket_16 is empty or not provided.")

                                        # Check if value_variable_lg26 is not empty
                                        if value_variable_lg26:
                                            modifier_0["Socket_17"] = float(value_variable_lg26)
                                        else:
                                            print("Value for Socket_17 is empty or not provided.")

                                        # Check if value_variable_lg27 is not empty
                                        if value_variable_lg27:
                                            modifier_0["Socket_18"] = float(value_variable_lg27)
                                        else:
                                            print("Value for Socket_18 is empty or not provided.")

                                        # Check if value_variable_lg28 is not empty
                                        if value_variable_lg28:
                                            modifier_0["Socket_19"] = float(value_variable_lg28)
                                        else:
                                            print("Value for Socket_19 is empty or not provided.")

                                        # Check if value_variable_lg29 is not empty
                                        if value_variable_lg29:
                                            modifier_0["Socket_20"] = float(value_variable_lg29)
                                        else:
                                            print("Value for Socket_20 is empty or not provided.")

                                        # Check if value_variable_lg30 is not empty
                                        if value_variable_lg30:
                                            modifier_0["Socket_21"] = float(value_variable_lg30)
                                        else:
                                            print("Value for Socket_21 is empty or not provided.")


                                        modifier_1["Input_4"] = name_variable_lg1

                                        # Check if name_variable_lg2 is not empty before setting the input
                                        if name_variable_lg2:
                                            modifier_1["Input_5"] = name_variable_lg2
                                        else:
                                            print("Name for Input_5 is empty or not provided.")     

                                        # Check if name_variable_lg3 is not empty before setting the input
                                        if name_variable_lg3:
                                            modifier_1["Input_6"] = name_variable_lg3
                                        else:
                                            print("Name for Input_6 is empty or not provided.")    

                                        # Check if name_variable_lg4 is not empty before setting the input
                                        if name_variable_lg4:
                                            modifier_1["Input_7"] = name_variable_lg4
                                        else:
                                            print("Name for Input_7 is empty or not provided.")    

                                        # Check if name_variable_lg5 is not empty before setting the input
                                        if name_variable_lg5:
                                            modifier_1["Input_8"] = name_variable_lg5
                                        else:
                                            print("Name for Input_8 is empty or not provided.")    

                                        # Check if name_variable_lg6 is not empty before setting the input
                                        if name_variable_lg6:
                                            modifier_1["Input_9"] = name_variable_lg6
                                        else:
                                            print("Name for Input_9 is empty or not provided.")  

                                        # Check if name_variable_lg7 is not empty before setting the input
                                        if name_variable_lg7:
                                            modifier_1["Input_10"] = name_variable_lg7
                                        else:
                                            print("Name for Input_10 is empty or not provided.")  

                                        # Check if name_variable_lg8 is not empty before setting the input
                                        if name_variable_lg8:
                                            modifier_1["Input_11"] = name_variable_lg8
                                        else:
                                            print("Name for Input_11 is empty or not provided.")

                                        # Check if name_variable_lg9 is not empty before setting the input
                                        if name_variable_lg9:
                                            modifier_1["Socket_0"] = name_variable_lg9
                                        else:
                                            print("Name for Socket_0 is empty or not provided.")

                                        # Check if name_variable_lg10 is not empty before setting the input
                                        if name_variable_lg10:
                                            modifier_1["Socket_1"] = name_variable_lg10
                                        else:
                                            print("Name for Socket_1 is empty or not provided.")

                                        # Check if name_variable_lg11 is not empty before setting the input
                                        if name_variable_lg11:
                                            modifier_1["Socket_2"] = name_variable_lg11
                                        else:
                                            print("Name for Socket_2 is empty or not provided.")

                                        # Check if name_variable_lg12 is not empty before setting the input
                                        if name_variable_lg12:
                                            modifier_1["Socket_3"] = name_variable_lg12
                                        else:
                                            print("Name for Socket_3 is empty or not provided.")

                                        # Check if name_variable_lg13 is not empty before setting the input
                                        if name_variable_lg13:
                                            modifier_1["Socket_4"] = name_variable_lg13
                                        else:
                                            print("Name for Socket_4 is empty or not provided.")

                                        # Check if name_variable_lg14 is not empty before setting the input
                                        if name_variable_lg14:
                                            modifier_1["Socket_5"] = name_variable_lg14
                                        else:
                                            print("Name for Socket_5 is empty or not provided.")

                                        # Check if name_variable_lg15 is not empty before setting the input
                                        if name_variable_lg15:
                                            modifier_1["Socket_6"] = name_variable_lg15
                                        else:
                                            print("Name for Socket_6 is empty or not provided.")

                                        # Check if name_variable_lg16 is not empty before setting the input
                                        if name_variable_lg16:
                                            modifier_1["Socket_7"] = name_variable_lg16
                                        else:
                                            print("Name for Socket_7 is empty or not provided.")

                                        # Check if name_variable_lg17 is not empty before setting the input
                                        if name_variable_lg17:
                                            modifier_1["Socket_8"] = name_variable_lg17
                                        else:
                                            print("Name for Socket_8 is empty or not provided.")

                                        # Check if name_variable_lg18 is not empty before setting the input
                                        if name_variable_lg18:
                                            modifier_1["Socket_9"] = name_variable_lg18
                                        else:
                                            print("Name for Socket_9 is empty or not provided.")

                                        # Check if name_variable_lg19 is not empty before setting the input
                                        if name_variable_lg19:
                                            modifier_1["Socket_10"] = name_variable_lg19
                                        else:
                                            print("Name for Socket_10 is empty or not provided.")

                                        # Check if name_variable_lg20 is not empty before setting the input
                                        if name_variable_lg20:
                                            modifier_1["Socket_11"] = name_variable_lg20
                                        else:
                                            print("Name for Socket_11 is empty or not provided.")

                                        # Check if name_variable_lg21 is not empty before setting the input
                                        if name_variable_lg21:
                                            modifier_1["Socket_12"] = name_variable_lg21
                                        else:
                                            print("Name for Socket_12 is empty or not provided.")

                                        # Check if name_variable_lg22 is not empty before setting the input
                                        if name_variable_lg22:
                                            modifier_1["Socket_13"] = name_variable_lg22
                                        else:
                                            print("Name for Socket_13 is empty or not provided.")

                                        # Check if name_variable_lg23 is not empty before setting the input
                                        if name_variable_lg23:
                                            modifier_1["Socket_14"] = name_variable_lg23
                                        else:
                                            print("Name for Socket_14 is empty or not provided.")

                                        # Check if name_variable_lg24 is not empty before setting the input
                                        if name_variable_lg24:
                                            modifier_1["Socket_15"] = name_variable_lg24
                                        else:
                                            print("Name for Socket_15 is empty or not provided.")

                                        # Check if name_variable_lg25 is not empty before setting the input
                                        if name_variable_lg25:
                                            modifier_1["Socket_16"] = name_variable_lg25
                                        else:
                                            print("Name for Socket_16 is empty or not provided.")

                                        # Check if name_variable_lg26 is not empty before setting the input
                                        if name_variable_lg26:
                                            modifier_1["Socket_17"] = name_variable_lg26
                                        else:
                                            print("Name for Socket_17 is empty or not provided.")

                                        # Check if name_variable_lg27 is not empty before setting the input
                                        if name_variable_lg27:
                                            modifier_1["Socket_18"] = name_variable_lg27
                                        else:
                                            print("Name for Socket_18 is empty or not provided.")

                                        # Check if name_variable_lg28 is not empty before setting the input
                                        if name_variable_lg28:
                                            modifier_1["Socket_19"] = name_variable_lg28
                                        else:
                                            print("Name for Socket_19 is empty or not provided.")

                                        # Check if name_variable_lg29 is not empty before setting the input
                                        if name_variable_lg29:
                                            modifier_1["Socket_20"] = name_variable_lg29
                                        else:
                                            print("Name for Socket_20 is empty or not provided.")

                                        # Check if name_variable_lg30 is not empty before setting the input
                                        if name_variable_lg30:
                                            modifier_1["Socket_21"] = name_variable_lg30
                                        else:
                                            print("Name for Socket_21 is empty or not provided.")




                                        print(f"Set modifier input for object '{mesh_name}'.")
                                    else:
                                        print("Selected object does not have both modifiers.")
                                    
                            else:
                                print(f"Selected object '{mesh_name_lg}' has no modifiers.")
                    else:
                        print("Selected object is not a mesh.")
            else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}

class MyoperatorLGCgenai(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorlgcgenai"
    bl_label = "Import Gen AI Data"

    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        api_key_file_path = bpy.path.abspath(mytool.my_pathapi_key)
        filepath_fulllgcaisiteurl = bpy.path.abspath(mytool.my_stringsiteurl)
        filepath_fulllgcaiappname = bpy.path.abspath(mytool.my_stringappname)
        filepath_fulllgcaiapikey = read_api_key(api_key_file_path)
        
        if not filepath_fulllgcaiapikey:
            print("Failed to read API key. Aborting operation.")
            return {'CANCELLED'}
        filepath_fulllgcaimodelname1 = bpy.path.abspath(mytool.my_stringmodelname1)
        filepath_fulllgcaimodelname2 = bpy.path.abspath(mytool.my_stringmodelname2)        
        filepath_fulllgcaiinput1 = bpy.path.abspath(mytool.my_stringline_gengraph_comparison1)
        filepath_fulllgcaiinput2 = bpy.path.abspath(mytool.my_stringline_gengraph_comparison2)
        filepath_fulllgcaiinput3 = bpy.path.abspath(mytool.my_stringline_gengraph_comparison3)
        filepath_fullurl = bpy.path.abspath(mytool.my_stringresponseurl)

        sub_questionlgc = filepath_fulllgcaiinput1
        main_questionlgc = filepath_fulllgcaiinput2.format(sub_questionlgc)

        questionlgc = f"{main_questionlgc} {sub_questionlgc}"

        # Replace with your actual values
        YOUR_SITE_URL = filepath_fulllgcaisiteurl
        YOUR_APP_NAME = filepath_fulllgcaiappname
        YOUR_API_KEY = filepath_fulllgcaiapikey

        response = requests.post(
            url=filepath_fullurl,
            headers={
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": YOUR_APP_NAME,
                "Authorization": f"Bearer {YOUR_API_KEY}",  # Include your API key in the Authorization header
            },
            data=json.dumps({
                "model": filepath_fulllgcaimodelname1,
                "messages": [
                    {"role": "user", "content": questionlgc}
                ]
            })
        )

        # Parse the JSON response
        response_jsonlgca = response.json()
        
        # Print the response for debugging
        print("Response JSON:", response_jsonlgca)

        # Extract the answer if available
        answer_lgc = response_jsonlgca.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

        # Print the answer for debugging
        print("Answer Circle:", answer_lgc)
        
                
        relevant_infolgc = answer_lgc
        
        if relevant_infolgc:
            # Extract necessary details from relevant_info
            # Modify the construction of the new question based on the extracted information
            new_questionlgc = f"{filepath_fulllgcaiinput3}. Here's the text: {relevant_infolgc}"

            # Make another API request with the new question
            new_response = requests.post(
                url=filepath_fullurl,
                headers={
                    "HTTP-Referer": YOUR_SITE_URL,
                    "X-Title": YOUR_APP_NAME,
                    "Authorization": f"Bearer {YOUR_API_KEY}",
                },
                data=json.dumps({
                    "model": filepath_fulllgcaimodelname2,
                    "messages": [
                        {"role": "user", "content": new_questionlgc}
                    ]
                })
            )

            # Parse the JSON response for the new question
            new_response_jsonlgcb = new_response.json()
            
            # Extract the answer if available
            answer_lgc1 = new_response_jsonlgcb.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

            # Print the answer for debugging
            print("Answer Circle1:", answer_lgc1)

            # Split the answer into variables based on commas
            answer_variables_lgc = answer_lgc1.split(';')
            
            # Split the answer further
            float_valuesalgc = [value for value in answer_variables_lgc[2].split('|')]
            float_valuesblgc = [value for value in answer_variables_lgc[3].split('|')]
            float_namesalgc = [value for value in answer_variables_lgc[4].split(',')]
            float_legendlgc = [value for value in answer_variables_lgc[5].split(',')]
            
            # Remove letters and symbols except period
            cleaned_valuesalgc = ["".join(char for char in value if char.isdigit() or char == '.') for value in float_valuesalgc]

            lgcfloat_avalues = []
            for cleaned_value in cleaned_valuesalgc:
                if cleaned_value:  # Check if the cleaned value is not empty
                    lgcfloat_avalues.append(float(cleaned_value))
                else:
                    lgcfloat_avalues.append(0.0)  # or any default value you prefer

            # Remove letters and symbols except period
            cleaned_valuesblgc = ["".join(char for char in value if char.isdigit() or char == '.') for value in float_valuesblgc]

            lgcfloat_bvalues = []
            for cleaned_value in cleaned_valuesblgc:
                if cleaned_value:  # Check if the cleaned value is not empty
                    lgcfloat_bvalues.append(float(cleaned_value))
                else:
                    lgcfloat_bvalues.append(0.0)  # or any default value you prefer
            

            # Find the maximum value
            float_valuesmaxlgc = max(lgcfloat_avalues + lgcfloat_bvalues)
            print(float_valuesmaxlgc)
        
            range_maxlgc = 1.1 * float(float_valuesmaxlgc)
            print("range_maxlgc:", range_maxlgc)

            # Now you can use the individual variables as needed
            title_variable_lgc = answer_variables_lgc[0].replace("Step A:", "").strip().upper()
            subtitle_variable_lgc = answer_variables_lgc[1].replace("Step B:", "").strip()
            legend_variable_lgc = answer_variables_lgc[5].replace("Step F:", "").strip()
            value_variable_algc1 = re.sub(r"[^0-9.]", "", float_valuesalgc[0].replace("Step C:", "").strip())

            # Check if float_valueslgc[1] is not empty
            if float_valuesalgc and len(float_valuesalgc) > 1:
                value_variable_algc2 = re.sub(r"[^0-9.]", "", float_valuesalgc[1].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesalgc[1] is empty or not provided
                value_variable_algc2 = None  # or any default value you want

            # Check if float_valueslgc[2] is not empty
            if float_valuesalgc and len(float_valuesalgc) > 2:
                value_variable_algc3 = re.sub(r"[^0-9.]", "", float_valuesalgc[2].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesalgc[2] is empty or not provided
                value_variable_algc3 = None  # or any default value you want

            # Check if float_valueslgc[3] is not empty
            if float_valuesalgc and len(float_valuesalgc) > 3:
                value_variable_algc4 = re.sub(r"[^0-9.]", "", float_valuesalgc[3].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesalgc[3] is empty or not provided
                value_variable_algc4 = None  # or any default value you want

            # Check if float_valueslgc[4] is not empty
            if float_valuesalgc and len(float_valuesalgc) > 4:
                value_variable_algc5 = re.sub(r"[^0-9.]", "", float_valuesalgc[4].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesalgc[4] is empty or not provided
                value_variable_algc5 = None  # or any default value you want

            # Check if float_valueslgc[5] is not empty
            if float_valuesalgc and len(float_valuesalgc) > 5:
                value_variable_algc6 = re.sub(r"[^0-9.]", "", float_valuesalgc[5].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesalgc[5] is empty or not provided
                value_variable_algc6 = None  # or any default value you want

            # Check if float_valueslgc[6] is not empty
            if float_valuesalgc and len(float_valuesalgc) > 6:
                value_variable_algc7 = re.sub(r"[^0-9.]", "", float_valuesalgc[6].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesalgc[6] is empty or not provided
                value_variable_algc7 = None  # or any default value you want

            # Check if float_valuesalgc[7] is not empty
            if float_valuesalgc and len(float_valuesalgc) > 7:
                value_variable_algc8 = re.sub(r"[^0-9.]", "", float_valuesalgc[7].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesalgc[7] is empty or not provided
                value_variable_algc8 = None  # or any default value you want
                


            # Check if float_valuesblgc[0] is not empty
            if float_valuesblgc and len(float_valuesblgc) > 0:
                value_variable_blgc1 = re.sub(r"[^0-9.]", "", float_valuesblgc[0].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesblgc[0] is empty or not provided
                value_variable_blgc1= None  # or any default value you want

            # Check if float_valuesblgc[1] is not empty
            if float_valuesblgc and len(float_valuesblgc) > 1:
                value_variable_blgc2 = re.sub(r"[^0-9.]", "", float_valuesblgc[1].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesblgc[1] is empty or not provided
                value_variable_blgc2= None  # or any default value you want

            # Check if float_valuesblgc[2] is not empty
            if float_valuesblgc and len(float_valuesblgc) > 2:
                value_variable_blgc3 = re.sub(r"[^0-9.]", "", float_valuesblgc[2].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesblgc[2] is empty or not provided
                value_variable_blgc3= None  # or any default value you want

            # Check if float_valuesblgc[3] is not empty
            if float_valuesblgc and len(float_valuesblgc) > 3:
                value_variable_blgc4 = re.sub(r"[^0-9.]", "", float_valuesblgc[3].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesblgc[3] is empty or not provided
                value_variable_blgc4= None  # or any default value you want

            # Check if float_valuesblgc[4] is not empty
            if float_valuesblgc and len(float_valuesblgc) > 4:
                value_variable_blgc5 = re.sub(r"[^0-9.]", "", float_valuesblgc[4].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesblgc[4] is empty or not provided
                value_variable_blgc5= None  # or any default value you want

            # Check if float_valuesblgc[5] is not empty
            if float_valuesblgc and len(float_valuesblgc) > 5:
                value_variable_blgc6 = re.sub(r"[^0-9.]", "", float_valuesblgc[5].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesblgc[5] is empty or not provided
                value_variable_blgc6= None  # or any default value you want

            # Check if float_valuesblgc[6] is not empty
            if float_valuesblgc and len(float_valuesblgc) > 6:
                value_variable_blgc7 = re.sub(r"[^0-9.]", "", float_valuesblgc[6].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesblgc[6] is empty or not provided
                value_variable_blgc7= None  # or any default value you want

            # Check if float_valuesblgc[7] is not empty
            if float_valuesblgc and len(float_valuesblgc) > 7:
                value_variable_blgc8 = re.sub(r"[^0-9.]", "", float_valuesblgc[7].replace("Step D:", "").strip())
            else:
                # Handle the case where float_valuesblgc[7] is empty or not provided
                value_variable_blgc8= None  # or any default value you want
                


                       
            
            name_variable_algc1 = float_namesalgc[0].replace("Step E:", "").strip()

            # Check if float_nameslgc[1] is not empty
            if float_namesalgc and len(float_namesalgc) > 1:
                name_variable_algc2 = float_namesalgc[1].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesalgc[1] is empty or not provided
                name_variable_algc2 = None  # or any default name you want

            # Check if float_nameslgc[2] is not empty
            if float_namesalgc and len(float_namesalgc) > 2:
                name_variable_algc3 = float_namesalgc[2].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesalgc[2] is empty or not provided
                name_variable_algc3 = None  # or any default name you want

            # Check if float_nameslgc[3] is not empty
            if float_namesalgc and len(float_namesalgc) > 3:
                name_variable_algc4 = float_namesalgc[3].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesalgc[3] is empty or not provided
                name_variable_algc4 = None  # or any default name you want

            # Check if float_nameslgc[4] is not empty
            if float_namesalgc and len(float_namesalgc) > 4:
                name_variable_algc5 = float_namesalgc[4].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesalgc[4] is empty or not provided
                name_variable_algc5 = None  # or any default name you want

            # Check if float_nameslgc[5] is not empty
            if float_namesalgc and len(float_namesalgc) > 5:
                name_variable_algc6 = float_namesalgc[5].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesalgc[5] is empty or not provided
                name_variable_algc6 = None  # or any default name you want

            # Check if float_nameslgc[6] is not empty
            if float_namesalgc and len(float_namesalgc) > 6:
                name_variable_algc7 = float_namesalgc[6].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesalgc[6] is empty or not provided
                name_variable_algc7 = None  # or any default name you want

            # Check if float_nameslgc[7] is not empty
            if float_namesalgc and len(float_namesalgc) > 7:
                name_variable_algc8 = float_namesalgc[7].replace("Step E:", "").strip()
            else:
                # Handle the case where float_namesalgc[7] is empty or not provided
                name_variable_algc8 = None  # or any default name you want
                






            if value_variable_algc1.endswith('.'):
                value_variable_algc1 = value_variable_algc1[:-1]
            if value_variable_algc1.startswith('.'):
                value_variable_algc1 = value_variable_algc1[1:]

            if value_variable_algc2 is not None:
                if value_variable_algc2.endswith('.'):
                    value_variable_algc2 = value_variable_algc2[:-1]
                if value_variable_algc2.startswith('.'):
                    value_variable_algc2 = value_variable_algc2[1:]

            if value_variable_algc3 is not None:
                if value_variable_algc3.endswith('.'):
                    value_variable_algc3 = value_variable_algc3[:-1]
                if value_variable_algc3.startswith('.'):
                    value_variable_algc3 = value_variable_algc3[1:]

            if value_variable_algc4 is not None:
                if value_variable_algc4.endswith('.'):
                    value_variable_algc4 = value_variable_algc4[:-1]
                if value_variable_algc4.startswith('.'):
                    value_variable_algc4 = value_variable_algc4[1:]

            if value_variable_algc5 is not None:
                if value_variable_algc5.endswith('.'):
                    value_variable_algc5 = value_variable_algc5[:-1]
                if value_variable_algc5.startswith('.'):
                    value_variable_algc5 = value_variable_algc5[1:]

            if value_variable_algc6 is not None:
                if value_variable_algc6.endswith('.'):
                    value_variable_algc6 = value_variable_algc6[:-1]
                if value_variable_algc6.startswith('.'):
                    value_variable_algc6 = value_variable_algc6[1:]

            if value_variable_algc7 is not None:
                if value_variable_algc7.endswith('.'):
                    value_variable_algc7 = value_variable_algc7[:-1]
                if value_variable_algc7.startswith('.'):
                    value_variable_algc7 = value_variable_algc7[1:]

            if value_variable_algc8 is not None:
                if value_variable_algc8.endswith('.'):
                    value_variable_algc8 = value_variable_algc8[:-1]
                if value_variable_algc8.startswith('.'):
                    value_variable_algc8 = value_variable_algc8[1:]
                    


            if value_variable_blgc1.endswith('.'):
                value_variable_blgc1 = value_variable_blgc1[:-1]
            if value_variable_blgc1.startswith('.'):
                value_variable_blgc1 = value_variable_blgc1[1:]

            if value_variable_blgc2 is not None:
                if value_variable_blgc2.endswith('.'):
                    value_variable_blgc2 = value_variable_blgc2[:-1]
                if value_variable_blgc2.startswith('.'):
                    value_variable_blgc2 = value_variable_blgc2[1:]

            if value_variable_blgc3 is not None:
                if value_variable_blgc3.endswith('.'):
                    value_variable_blgc3 = value_variable_blgc3[:-1]
                if value_variable_blgc3.startswith('.'):
                    value_variable_blgc3 = value_variable_blgc3[1:]

            if value_variable_blgc4 is not None:
                if value_variable_blgc4.endswith('.'):
                    value_variable_blgc4 = value_variable_blgc4[:-1]
                if value_variable_blgc4.startswith('.'):
                    value_variable_blgc4 = value_variable_blgc4[1:]

            if value_variable_blgc5 is not None:
                if value_variable_blgc5.endswith('.'):
                    value_variable_blgc5 = value_variable_blgc5[:-1]
                if value_variable_blgc5.startswith('.'):
                    value_variable_blgc5 = value_variable_blgc5[1:]

            if value_variable_blgc6 is not None:
                if value_variable_blgc6.endswith('.'):
                    value_variable_blgc6 = value_variable_blgc6[:-1]
                if value_variable_blgc6.startswith('.'):
                    value_variable_blgc6 = value_variable_blgc6[1:]

            if value_variable_blgc7 is not None:
                if value_variable_blgc7.endswith('.'):
                    value_variable_blgc7 = value_variable_blgc7[:-1]
                if value_variable_blgc7.startswith('.'):
                    value_variable_blgc7 = value_variable_blgc7[1:]

            if value_variable_blgc8 is not None:
                if value_variable_blgc8.endswith('.'):
                    value_variable_blgc8 = value_variable_blgc8[:-1]
                if value_variable_blgc8.startswith('.'):
                    value_variable_blgc8 = value_variable_blgc8[1:]
                    




            # Ensure an object is selected
            if bpy.context.selected_objects:
                    selected_obj = bpy.context.active_object  # Get the active (selected) object

                    if selected_obj.type == 'MESH':
                            mesh_name = selected_obj.name

                            # Check if the selected object has modifiers
                            if selected_obj.modifiers:
                                    if len(selected_obj.modifiers) >= 2:  # Ensure at least two modifiers exist
                                            modifier_0 = selected_obj.modifiers.get("GeometryNodes")
                                            modifier_1 = selected_obj.modifiers.get("GeometryNodes.001")

                                    if modifier_0 and modifier_1:
                                    
                                        # Check if float_valueslgc has 1 to 8 elements and assign the length directly
                                        num_elementslgc = len(float_valueslgc)
                                        if 1 <= num_elementslgc <= 8:
                                            modifier_0["Input_2"] = num_elementslgc


                                        modifier_1["Input_23"] = title_variable_lgc
                                        modifier_1["Input_22"] = subtitle_variable_lgc
                                        modifier_1["Input_29"] = float_legendlgc[0]
                                        modifier_1["Input_30"] = float_legendlgc[1]
                                        modifier_0["Input_14"] = float(range_maxlgc)
                                        modifier_0["Input_4"] = float(value_variable_lgc1)

                                        # Check if value_variable_algc2 is not empty
                                        if value_variable_algc2:
                                            modifier_0["Input_5"] = float(value_variable_algc2)
                                        else:
                                            print("Value for Input_5 is empty or not provided.")

                                        # Check if value_variable_algc3 is not empty
                                        if value_variable_algc3:
                                            modifier_0["Input_6"] = float(value_variable_algc3)
                                        else:
                                            print("Value for Input_6 is empty or not provided.")

                                        # Check if value_variable_algc4 is not empty
                                        if value_variable_algc4:
                                            modifier_0["Input_7"] = float(value_variable_algc4)
                                        else:
                                            print("Value for Input_7 is empty or not provided.")

                                        # Check if value_variable_algc5 is not empty
                                        if value_variable_algc5:
                                            modifier_0["Input_8"] = float(value_variable_algc5)
                                        else:
                                            print("Value for Input_8 is empty or not provided.")

                                        # Check if value_variable_algc6 is not empty
                                        if value_variable_algc6:
                                            modifier_0["Input_9"] = float(value_variable_algc6)
                                        else:
                                            print("Value for Input_9 is empty or not provided.")

                                        # Check if value_variable_algc7 is not empty
                                        if value_variable_algc7:
                                            modifier_0["Input_10"] = float(value_variable_algc7)
                                        else:
                                            print("Value for Input_10 is empty or not provided.")

                                        # Check if value_variable_algc8 is not empty
                                        if value_variable_algc8:
                                            modifier_0["Input_11"] = float(value_variable_algc8)
                                        else:
                                            print("Value for Input_11 is empty or not provided.")

                                        # Check if value_variable_blgc1 is not empty
                                        if value_variable_blgc1:
                                            modifier_0["Input_34"] = float(value_variable_blgc1)
                                        else:
                                            print("Value for Input_34 is empty or not provided.")

                                        # Check if value_variable_blgc2 is not empty
                                        if value_variable_blgc2:
                                            modifier_0["Input_35"] = float(value_variable_blgc2)
                                        else:
                                            print("Value for Input_35 is empty or not provided.")

                                        # Check if value_variable_blgc3 is not empty
                                        if value_variable_blgc3:
                                            modifier_0["Input_36"] = float(value_variable_blgc3)
                                        else:
                                            print("Value for Input_36 is empty or not provided.")

                                        # Check if value_variable_blgc4 is not empty
                                        if value_variable_blgc4:
                                            modifier_0["Input_37"] = float(value_variable_blgc4)
                                        else:
                                            print("Value for Input_37 is empty or not provided.")

                                        # Check if value_variable_blgc5 is not empty
                                        if value_variable_blgc5:
                                            modifier_0["Input_38"] = float(value_variable_blgc5)
                                        else:
                                            print("Value for Input_38 is empty or not provided.")

                                        # Check if value_variable_blgc6 is not empty
                                        if value_variable_blgc6:
                                            modifier_0["Input_39"] = float(value_variable_blgc6)
                                        else:
                                            print("Value for Input_39 is empty or not provided.")

                                        # Check if value_variable_blgc7 is not empty
                                        if value_variable_blgc7:
                                            modifier_0["Input_40"] = float(value_variable_blgc7)
                                        else:
                                            print("Value for Input_40 is empty or not provided.")

                                        # Check if value_variable_blgc8 is not empty
                                        if value_variable_blgc8:
                                            modifier_0["Input_41"] = float(value_variable_blgc8)
                                        else:
                                            print("Value for Input_41 is empty or not provided.")




                                        modifier_1["Input_4"] = name_variable_algc1

                                        # Check if name_variable_algc2 is not empty before setting the input
                                        if name_variable_algc2:
                                            modifier_1["Input_5"] = name_variable_algc2
                                        else:
                                            print("Name for Input_5 is empty or not provided.")     

                                        # Check if name_variable_algc3 is not empty before setting the input
                                        if name_variable_algc3:
                                            modifier_1["Input_6"] = name_variable_algc3
                                        else:
                                            print("Name for Input_6 is empty or not provided.")    

                                        # Check if name_variable_algc4 is not empty before setting the input
                                        if name_variable_algc4:
                                            modifier_1["Input_7"] = name_variable_algc4
                                        else:
                                            print("Name for Input_7 is empty or not provided.")    

                                        # Check if name_variable_algc5 is not empty before setting the input
                                        if name_variable_algc5:
                                            modifier_1["Input_8"] = name_variable_algc5
                                        else:
                                            print("Name for Input_8 is empty or not provided.")    

                                        # Check if name_variable_algc6 is not empty before setting the input
                                        if name_variable_algc6:
                                            modifier_1["Input_9"] = name_variable_algc6
                                        else:
                                            print("Name for Input_9 is empty or not provided.")  

                                        # Check if name_variable_algc7 is not empty before setting the input
                                        if name_variable_algc7:
                                            modifier_1["Input_10"] = name_variable_algc7
                                        else:
                                            print("Name for Input_10 is empty or not provided.")  

                                        # Check if name_variable_algc8 is not empty before setting the input
                                        if name_variable_algc8:
                                            modifier_1["Input_11"] = name_variable_algc8
                                        else:
                                            print("Name for Input_11 is empty or not provided.")





                                        print(f"Set modifier input for object '{mesh_name}'.")
                                    else:
                                        print("Selected object does not have both modifiers.")
                                    
                            else:
                                print(f"Selected object '{mesh_name_lgc}' has no modifiers.")
                    else:
                        print("Selected object is not a mesh.")
            else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorUSMAPgenai(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorusmapgenai"
    bl_label = "Import Gen AI Data"

    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        api_key_file_path = bpy.path.abspath(mytool.my_pathapi_key)
        filepath_fullusmapaisiteurl = bpy.path.abspath(mytool.my_stringsiteurl)
        filepath_fullusmapaiappname = bpy.path.abspath(mytool.my_stringappname)
        filepath_fullusmapaiapikey = read_api_key(api_key_file_path)
        
        if not filepath_fullusmapaiapikey:
            print("Failed to read API key. Aborting operation.")
            return {'CANCELLED'}
        filepath_fullusmapaimodelname1 = bpy.path.abspath(mytool.my_stringmodelname1)
        filepath_fullusmapaimodelname2 = bpy.path.abspath(mytool.my_stringmodelname2)        
        filepath_fullusmapaiinput1 = bpy.path.abspath(mytool.my_stringusgenmap1)
        filepath_fullusmapaiinput2 = bpy.path.abspath(mytool.my_stringusgenmap2)
        filepath_fullusmapaiinput3 = bpy.path.abspath(mytool.my_stringusgenmap3)
        filepath_fullurl = bpy.path.abspath(mytool.my_stringresponseurl)

        sub_questionusmap = filepath_fullusmapaiinput1
        main_questionusmap = filepath_fullusmapaiinput2.format(sub_questionusmap)

        questionusmap = f"{main_questionusmap} {sub_questionusmap}"

        # Replace with your actual values
        YOUR_SITE_URL = filepath_fullusmapaisiteurl
        YOUR_APP_NAME = filepath_fullusmapaiappname
        YOUR_API_KEY = filepath_fullusmapaiapikey

        response = requests.post(
            url=filepath_fullurl,
            headers={
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": YOUR_APP_NAME,
                "Authorization": f"Bearer {YOUR_API_KEY}",  # Include your API key in the Authorization header
            },
            data=json.dumps({
                "model": filepath_fullusmapaimodelname1,
                "messages": [
                    {"role": "user", "content": questionusmap}
                ]
            })
        )

        # Parse the JSON response
        response_jsonusmapa = response.json()
        
        # Print the response for debugging
        print("Response JSON:", response_jsonusmapa)

        # Extract the answer if available
        answer_usmap = response_jsonusmapa.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

        # Print the answer for debugging
        print("Answer Circle:", answer_usmap)
        
                
        relevant_infousmap = answer_usmap
        
        if relevant_infousmap:
            # Extract necessary details from relevant_info
            # Modify the construction of the new question based on the extracted information
            new_questionusmap = f"{filepath_fullusmapaiinput3}. Here's the text: {relevant_infousmap}"

            # Make another API request with the new question
            new_response = requests.post(
                url=filepath_fullurl,
                headers={
                    "HTTP-Referer": YOUR_SITE_URL,
                    "X-Title": YOUR_APP_NAME,
                    "Authorization": f"Bearer {YOUR_API_KEY}",
                },
                data=json.dumps({
                    "model": filepath_fullusmapaimodelname2,
                    "messages": [
                        {"role": "user", "content": new_questionusmap}
                    ]
                })
            )

            # Parse the JSON response for the new question
            new_response_jsonusmapb = new_response.json()
            
            # Extract the answer if available
            answer_usmap1 = new_response_jsonusmapb.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

            # Print the answer for debugging
            print("Answer Circle1:", answer_usmap1)

            # Split the answer into variables based on commas
            answer_variables_usmap = answer_usmap1.split(';')
            
            # Split the answer further
            float_valuesusmap = [value for value in answer_variables_usmap[2].split(',')]
            float_namesusmap = [value for value in answer_variables_usmap[3].split(',')]
            
            # Remove letters and symbols except period
            cleaned_valuesusmap = ["".join(char for char in value if char.isdigit() or char == '.') for value in float_valuesusmap]

            usmapfloat_values = [float(cleaned_value) for cleaned_value in cleaned_valuesusmap]

            # Find the maximum value
            float_valuesmaxusmap = max(usmapfloat_values)
            print(float_valuesmaxusmap)
        
            range_maxusmap = 0.9 * float(float_valuesmaxusmap)
            print("range_maxusmap:", range_maxusmap)
            
            # Find the minimum value
            float_valuesminusmap = min(usmapfloat_values)
            print(float_valuesminusmap)
        
            range_minusmap = 1.1 * float(float_valuesminusmap)
            print("range_minusmap:", range_minusmap)

            # Now you can use the individual variables as needed
            title_variable_usmap = answer_variables_usmap[0].replace("Step A:", "").strip().upper()
            subtitle_variable_usmap = answer_variables_usmap[1].replace("Step B:", "").strip()
            value_variable_usmap1 = re.sub(r"[^0-9.]", "", float_valuesusmap[0].replace("Step C:", "").strip())

            # Check if float_valuesusmap[1] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 1:
                value_variable_usmap2 = re.sub(r"[^0-9.]", "", float_valuesusmap[1].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[1] is empty or not provided
                value_variable_usmap2 = None  # or any default value you want

            # Check if float_valuesusmap[2] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 2:
                value_variable_usmap3 = re.sub(r"[^0-9.]", "", float_valuesusmap[2].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[2] is empty or not provided
                value_variable_usmap3 = None  # or any default value you want

            # Check if float_valuesusmap[3] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 3:
                value_variable_usmap4 = re.sub(r"[^0-9.]", "", float_valuesusmap[3].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[3] is empty or not provided
                value_variable_usmap4 = None  # or any default value you want

            # Check if float_valuesusmap[4] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 4:
                value_variable_usmap5 = re.sub(r"[^0-9.]", "", float_valuesusmap[4].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[4] is empty or not provided
                value_variable_usmap5 = None  # or any default value you want

            # Check if float_valuesusmap[5] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 5:
                value_variable_usmap6 = re.sub(r"[^0-9.]", "", float_valuesusmap[5].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[5] is empty or not provided
                value_variable_usmap6 = None  # or any default value you want

            # Check if float_valuesusmap[6] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 6:
                value_variable_usmap7 = re.sub(r"[^0-9.]", "", float_valuesusmap[6].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[6] is empty or not provided
                value_variable_usmap7 = None  # or any default value you want

            # Check if float_valuesusmap[7] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 7:
                value_variable_usmap8 = re.sub(r"[^0-9.]", "", float_valuesusmap[7].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[7] is empty or not provided
                value_variable_usmap8 = None  # or any default value you want

            # Check if float_valuesusmap[8] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 8:
                value_variable_usmap9 = re.sub(r"[^0-9.]", "", float_valuesusmap[8].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[8] is empty or not provided
                value_variable_usmap9 = None  # or any default value you want

            # Check if float_valuesusmap[9] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 9:
                value_variable_usmap10 = re.sub(r"[^0-9.]", "", float_valuesusmap[9].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[9] is empty or not provided
                value_variable_usmap10 = None  # or any default value you want

            # Check if float_valuesusmap[10] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 10:
                value_variable_usmap11 = re.sub(r"[^0-9.]", "", float_valuesusmap[10].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[10] is empty or not provided
                value_variable_usmap11 = None  # or any default value you want                       

            # Check if float_valuesusmap[11] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 11:
                value_variable_usmap12 = re.sub(r"[^0-9.]", "", float_valuesusmap[11].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[11] is empty or not provided
                value_variable_usmap12 = None  # or any default value you want 

            # Check if float_valuesusmap[12] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 12:
                value_variable_usmap13 = re.sub(r"[^0-9.]", "", float_valuesusmap[12].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[12] is empty or not provided
                value_variable_usmap13 = None  # or any default value you want 

            # Check if float_valuesusmap[13] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 13:
                value_variable_usmap14 = re.sub(r"[^0-9.]", "", float_valuesusmap[13].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[13] is empty or not provided
                value_variable_usmap14 = None  # or any default value you want 

            # Check if float_valuesusmap[14] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 14:
                value_variable_usmap15 = re.sub(r"[^0-9.]", "", float_valuesusmap[14].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[14] is empty or not provided
                value_variable_usmap15 = None  # or any default value you want 

            # Check if float_valuesusmap[15] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 15:
                value_variable_usmap16 = re.sub(r"[^0-9.]", "", float_valuesusmap[15].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[15] is empty or not provided
                value_variable_usmap16 = None  # or any default value you want 

            # Check if float_valuesusmap[16] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 16:
                value_variable_usmap17 = re.sub(r"[^0-9.]", "", float_valuesusmap[16].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[16] is empty or not provided
                value_variable_usmap17 = None  # or any default value you want 

            # Check if float_valuesusmap[17] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 17:
                value_variable_usmap18 = re.sub(r"[^0-9.]", "", float_valuesusmap[17].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[17] is empty or not provided
                value_variable_usmap18 = None  # or any default value you want 

            # Check if float_valuesusmap[18] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 18:
                value_variable_usmap19 = re.sub(r"[^0-9.]", "", float_valuesusmap[18].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[18] is empty or not provided
                value_variable_usmap19 = None  # or any default value you want 

            # Check if float_valuesusmap[19] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 19:
                value_variable_usmap20 = re.sub(r"[^0-9.]", "", float_valuesusmap[19].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[19] is empty or not provided
                value_variable_usmap20 = None  # or any default value you want 

            # Check if float_valuesusmap[20] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 20:
                value_variable_usmap21 = re.sub(r"[^0-9.]", "", float_valuesusmap[20].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[20] is empty or not provided
                value_variable_usmap21 = None  # or any default value you want 

            # Check if float_valuesusmap[21] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 21:
                value_variable_usmap22 = re.sub(r"[^0-9.]", "", float_valuesusmap[21].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[21] is empty or not provided
                value_variable_usmap22 = None  # or any default value you want 

            # Check if float_valuesusmap[22] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 22:
                value_variable_usmap23 = re.sub(r"[^0-9.]", "", float_valuesusmap[22].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[22] is empty or not provided
                value_variable_usmap23 = None  # or any default value you want 

            # Check if float_valuesusmap[23] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 23:
                value_variable_usmap24 = re.sub(r"[^0-9.]", "", float_valuesusmap[23].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[23] is empty or not provided
                value_variable_usmap24 = None  # or any default value you want

            # Check if float_valuesusmap[24] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 24:
                value_variable_usmap25 = re.sub(r"[^0-9.]", "", float_valuesusmap[24].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[24] is empty or not provided
                value_variable_usmap25 = None  # or any default value you want

            # Check if float_valuesusmap[25] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 25:
                value_variable_usmap26 = re.sub(r"[^0-9.]", "", float_valuesusmap[25].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[25] is empty or not provided
                value_variable_usmap26 = None  # or any default value you want

            # Check if float_valuesusmap[26] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 26:
                value_variable_usmap27 = re.sub(r"[^0-9.]", "", float_valuesusmap[26].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[26] is empty or not provided
                value_variable_usmap27 = None  # or any default value you want

            # Check if float_valuesusmap[27] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 27:
                value_variable_usmap28 = re.sub(r"[^0-9.]", "", float_valuesusmap[27].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[27] is empty or not provided
                value_variable_usmap28 = None  # or any default value you want

            # Check if float_valuesusmap[28] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 28:
                value_variable_usmap29 = re.sub(r"[^0-9.]", "", float_valuesusmap[28].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[28] is empty or not provided
                value_variable_usmap29 = None  # or any default value you want

            # Check if float_valuesusmap[29] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 29:
                value_variable_usmap30 = re.sub(r"[^0-9.]", "", float_valuesusmap[29].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[29] is empty or not provided
                value_variable_usmap30 = None  # or any default value you want

            # Check if float_valuesusmap[30] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 30:
                value_variable_usmap31 = re.sub(r"[^0-9.]", "", float_valuesusmap[30].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[30] is empty or not provided
                value_variable_usmap31 = None  # or any default value you want

            # Check if float_valuesusmap[31] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 31:
                value_variable_usmap32 = re.sub(r"[^0-9.]", "", float_valuesusmap[31].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[31] is empty or not provided
                value_variable_usmap32 = None  # or any default value you want

            # Check if float_valuesusmap[32] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 32:
                value_variable_usmap33 = re.sub(r"[^0-9.]", "", float_valuesusmap[32].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[32] is empty or not provided
                value_variable_usmap33 = None  # or any default value you want

            # Check if float_valuesusmap[33] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 33:
                value_variable_usmap34 = re.sub(r"[^0-9.]", "", float_valuesusmap[33].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[33] is empty or not provided
                value_variable_usmap34 = None  # or any default value you want

            # Check if float_valuesusmap[34] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 34:
                value_variable_usmap35 = re.sub(r"[^0-9.]", "", float_valuesusmap[34].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[34] is empty or not provided
                value_variable_usmap35 = None  # or any default value you want

            # Check if float_valuesusmap[35] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 35:
                value_variable_usmap36 = re.sub(r"[^0-9.]", "", float_valuesusmap[35].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[35] is empty or not provided
                value_variable_usmap36 = None  # or any default value you want

            # Check if float_valuesusmap[36] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 36:
                value_variable_usmap37 = re.sub(r"[^0-9.]", "", float_valuesusmap[36].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[36] is empty or not provided
                value_variable_usmap37 = None  # or any default value you want

            # Check if float_valuesusmap[37] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 37:
                value_variable_usmap38 = re.sub(r"[^0-9.]", "", float_valuesusmap[37].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[37] is empty or not provided
                value_variable_usmap38 = None  # or any default value you want

            # Check if float_valuesusmap[38] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 38:
                value_variable_usmap39 = re.sub(r"[^0-9.]", "", float_valuesusmap[38].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[38] is empty or not provided
                value_variable_usmap39 = None  # or any default value you want

            # Check if float_valuesusmap[39] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 39:
                value_variable_usmap40 = re.sub(r"[^0-9.]", "", float_valuesusmap[39].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[39] is empty or not provided
                value_variable_usmap40 = None  # or any default value you want

            # Check if float_valuesusmap[40] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 40:
                value_variable_usmap41 = re.sub(r"[^0-9.]", "", float_valuesusmap[40].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[40] is empty or not provided
                value_variable_usmap41 = None  # or any default value you want

            # Check if float_valuesusmap[41] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 41:
                value_variable_usmap42 = re.sub(r"[^0-9.]", "", float_valuesusmap[41].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[41] is empty or not provided
                value_variable_usmap42 = None  # or any default value you want

            # Check if float_valuesusmap[42] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 42:
                value_variable_usmap43 = re.sub(r"[^0-9.]", "", float_valuesusmap[42].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[42] is empty or not provided
                value_variable_usmap43 = None  # or any default value you want

            # Check if float_valuesusmap[43] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 43:
                value_variable_usmap44 = re.sub(r"[^0-9.]", "", float_valuesusmap[43].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[43] is empty or not provided
                value_variable_usmap44 = None  # or any default value you want

            # Check if float_valuesusmap[44] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 44:
                value_variable_usmap45 = re.sub(r"[^0-9.]", "", float_valuesusmap[44].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[44] is empty or not provided
                value_variable_usmap45 = None  # or any default value you want

            # Check if float_valuesusmap[45] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 45:
                value_variable_usmap46 = re.sub(r"[^0-9.]", "", float_valuesusmap[45].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[45] is empty or not provided
                value_variable_usmap46 = None  # or any default value you want

            # Check if float_valuesusmap[46] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 46:
                value_variable_usmap47 = re.sub(r"[^0-9.]", "", float_valuesusmap[46].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[46] is empty or not provided
                value_variable_usmap47 = None  # or any default value you want

            # Check if float_valuesusmap[47] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 47:
                value_variable_usmap48 = re.sub(r"[^0-9.]", "", float_valuesusmap[47].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[47] is empty or not provided
                value_variable_usmap48 = None  # or any default value you want

            # Check if float_valuesusmap[48] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 48:
                value_variable_usmap49 = re.sub(r"[^0-9.]", "", float_valuesusmap[48].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[48] is empty or not provided
                value_variable_usmap49 = None  # or any default value you want

            # Check if float_valuesusmap[49] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 49:
                value_variable_usmap50 = re.sub(r"[^0-9.]", "", float_valuesusmap[49].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[49] is empty or not provided
                value_variable_usmap50 = None  # or any default value you want

            # Check if float_valuesusmap[50] is not empty
            if float_valuesusmap and len(float_valuesusmap) > 50:
                value_variable_usmap51 = re.sub(r"[^0-9.]", "", float_valuesusmap[50].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesusmap[50] is empty or not provided
                value_variable_usmap51 = None  # or any default value you want

            
            name_variable_usmap1 = float_namesusmap[0].replace("Step D:", "").strip()

            # Check if float_namesusmap[1] is not empty
            if float_namesusmap and len(float_namesusmap) > 1:
                name_variable_usmap2 = float_namesusmap[1].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[1] is empty or not provided
                name_variable_usmap2 = None  # or any default name you want

            # Check if float_namesusmap[2] is not empty
            if float_namesusmap and len(float_namesusmap) > 2:
                name_variable_usmap3 = float_namesusmap[2].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[2] is empty or not provided
                name_variable_usmap3 = None  # or any default name you want

            # Check if float_namesusmap[3] is not empty
            if float_namesusmap and len(float_namesusmap) > 3:
                name_variable_usmap4 = float_namesusmap[3].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[3] is empty or not provided
                name_variable_usmap4 = None  # or any default name you want

            # Check if float_namesusmap[4] is not empty
            if float_namesusmap and len(float_namesusmap) > 4:
                name_variable_usmap5 = float_namesusmap[4].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[4] is empty or not provided
                name_variable_usmap5 = None  # or any default name you want

            # Check if float_namesusmap[5] is not empty
            if float_namesusmap and len(float_namesusmap) > 5:
                name_variable_usmap6 = float_namesusmap[5].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[5] is empty or not provided
                name_variable_usmap6 = None  # or any default name you want

            # Check if float_namesusmap[6] is not empty
            if float_namesusmap and len(float_namesusmap) > 6:
                name_variable_usmap7 = float_namesusmap[6].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[6] is empty or not provided
                name_variable_usmap7 = None  # or any default name you want

            # Check if float_namesusmap[7] is not empty
            if float_namesusmap and len(float_namesusmap) > 7:
                name_variable_usmap8 = float_namesusmap[7].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[7] is empty or not provided
                name_variable_usmap8 = None  # or any default name you want

            # Check if float_namesusmap[8] is not empty
            if float_namesusmap and len(float_namesusmap) > 8:
                name_variable_usmap9 = float_namesusmap[8].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[8] is empty or not provided
                name_variable_usmap9 = None  # or any default name you want

            # Check if float_namesusmap[9] is not empty
            if float_namesusmap and len(float_namesusmap) > 9:
                name_variable_usmap10 = float_namesusmap[9].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[9] is empty or not provided
                name_variable_usmap10 = None  # or any default name you want

            # Check if float_namesusmap[10] is not empty
            if float_namesusmap and len(float_namesusmap) > 10:
                name_variable_usmap11 = float_namesusmap[10].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[10] is empty or not provided
                name_variable_usmap11 = None  # or any default name you want

            # Check if float_namesusmap[11] is not empty
            if float_namesusmap and len(float_namesusmap) > 11:
                name_variable_usmap12 = float_namesusmap[11].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[11] is empty or not provided
                name_variable_usmap12 = None  # or any default name you want

            # Check if float_namesusmap[12] is not empty
            if float_namesusmap and len(float_namesusmap) > 12:
                name_variable_usmap13 = float_namesusmap[12].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[12] is empty or not provided
                name_variable_usmap13 = None  # or any default name you want

            # Check if float_namesusmap[13] is not empty
            if float_namesusmap and len(float_namesusmap) > 13:
                name_variable_usmap14 = float_namesusmap[13].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[13] is empty or not provided
                name_variable_usmap14 = None  # or any default name you want

            # Check if float_namesusmap[14] is not empty
            if float_namesusmap and len(float_namesusmap) > 14:
                name_variable_usmap15 = float_namesusmap[14].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[14] is empty or not provided
                name_variable_usmap15 = None  # or any default name you want

            # Check if float_namesusmap[15] is not empty
            if float_namesusmap and len(float_namesusmap) > 15:
                name_variable_usmap16 = float_namesusmap[15].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[15] is empty or not provided
                name_variable_usmap16 = None  # or any default name you want

            # Check if float_namesusmap[16] is not empty
            if float_namesusmap and len(float_namesusmap) > 16:
                name_variable_usmap17 = float_namesusmap[16].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[16] is empty or not provided
                name_variable_usmap17 = None  # or any default name you want

            # Check if float_namesusmap[17] is not empty
            if float_namesusmap and len(float_namesusmap) > 17:
                name_variable_usmap18 = float_namesusmap[17].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[17] is empty or not provided
                name_variable_usmap18 = None  # or any default name you want

            # Check if float_namesusmap[18] is not empty
            if float_namesusmap and len(float_namesusmap) > 18:
                name_variable_usmap19 = float_namesusmap[18].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[18] is empty or not provided
                name_variable_usmap19 = None  # or any default name you want

            # Check if float_namesusmap[19] is not empty
            if float_namesusmap and len(float_namesusmap) > 19:
                name_variable_usmap20 = float_namesusmap[19].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[19] is empty or not provided
                name_variable_usmap20 = None  # or any default name you want

            # Check if float_namesusmap[20] is not empty
            if float_namesusmap and len(float_namesusmap) > 20:
                name_variable_usmap21 = float_namesusmap[20].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[20] is empty or not provided
                name_variable_usmap21 = None  # or any default name you want

            # Check if float_namesusmap[21] is not empty
            if float_namesusmap and len(float_namesusmap) > 21:
                name_variable_usmap22 = float_namesusmap[21].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[21] is empty or not provided
                name_variable_usmap22 = None  # or any default name you want

            # Check if float_namesusmap[22] is not empty
            if float_namesusmap and len(float_namesusmap) > 22:
                name_variable_usmap23 = float_namesusmap[22].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[22] is empty or not provided
                name_variable_usmap23 = None  # or any default name you want

            # Check if float_namesusmap[23] is not empty
            if float_namesusmap and len(float_namesusmap) > 23:
                name_variable_usmap24 = float_namesusmap[23].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[23] is empty or not provided
                name_variable_usmap24 = None  # or any default name you want

            # Check if float_namesusmap[24] is not empty
            if float_namesusmap and len(float_namesusmap) > 24:
                name_variable_usmap25 = float_namesusmap[24].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[24] is empty or not provided
                name_variable_usmap25 = None  # or any default name you want

            # Check if float_namesusmap[25] is not empty
            if float_namesusmap and len(float_namesusmap) > 25:
                name_variable_usmap26 = float_namesusmap[25].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[25] is empty or not provided
                name_variable_usmap26 = None  # or any default name you want

            # Check if float_namesusmap[26] is not empty
            if float_namesusmap and len(float_namesusmap) > 26:
                name_variable_usmap27 = float_namesusmap[26].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[26] is empty or not provided
                name_variable_usmap27 = None  # or any default name you want

            # Check if float_namesusmap[27] is not empty
            if float_namesusmap and len(float_namesusmap) > 27:
                name_variable_usmap28 = float_namesusmap[27].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[27] is empty or not provided
                name_variable_usmap28 = None  # or any default name you want

            # Check if float_namesusmap[28] is not empty
            if float_namesusmap and len(float_namesusmap) > 28:
                name_variable_usmap29 = float_namesusmap[28].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[28] is empty or not provided
                name_variable_usmap29 = None  # or any default name you want

            # Check if float_namesusmap[29] is not empty
            if float_namesusmap and len(float_namesusmap) > 29:
                name_variable_usmap30 = float_namesusmap[29].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[29] is empty or not provided
                name_variable_usmap30 = None  # or any default name you want

            # Check if float_namesusmap[30] is not empty
            if float_namesusmap and len(float_namesusmap) > 30:
                name_variable_usmap31 = float_namesusmap[30].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[30] is empty or not provided
                name_variable_usmap31 = None  # or any default name you want

            # Check if float_namesusmap[31] is not empty
            if float_namesusmap and len(float_namesusmap) > 31:
                name_variable_usmap32 = float_namesusmap[31].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[31] is empty or not provided
                name_variable_usmap32 = None  # or any default name you want

            # Check if float_namesusmap[32] is not empty
            if float_namesusmap and len(float_namesusmap) > 32:
                name_variable_usmap33 = float_namesusmap[32].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[32] is empty or not provided
                name_variable_usmap33 = None  # or any default name you want

            # Check if float_namesusmap[33] is not empty
            if float_namesusmap and len(float_namesusmap) > 33:
                name_variable_usmap34 = float_namesusmap[33].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[33] is empty or not provided
                name_variable_usmap34 = None  # or any default name you want

            # Check if float_namesusmap[34] is not empty
            if float_namesusmap and len(float_namesusmap) > 34:
                name_variable_usmap35 = float_namesusmap[34].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[34] is empty or not provided
                name_variable_usmap35 = None  # or any default name you want

            # Check if float_namesusmap[35] is not empty
            if float_namesusmap and len(float_namesusmap) > 35:
                name_variable_usmap36 = float_namesusmap[35].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[35] is empty or not provided
                name_variable_usmap36 = None  # or any default name you want

            # Check if float_namesusmap[36] is not empty
            if float_namesusmap and len(float_namesusmap) > 36:
                name_variable_usmap37 = float_namesusmap[36].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[36] is empty or not provided
                name_variable_usmap37 = None  # or any default name you want

            # Check if float_namesusmap[37] is not empty
            if float_namesusmap and len(float_namesusmap) > 37:
                name_variable_usmap38 = float_namesusmap[37].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[37] is empty or not provided
                name_variable_usmap38 = None  # or any default name you want

            # Check if float_namesusmap[38] is not empty
            if float_namesusmap and len(float_namesusmap) > 38:
                name_variable_usmap39 = float_namesusmap[38].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[38] is empty or not provided
                name_variable_usmap39 = None  # or any default name you want

            # Check if float_namesusmap[39] is not empty
            if float_namesusmap and len(float_namesusmap) > 39:
                name_variable_usmap40 = float_namesusmap[39].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[39] is empty or not provided
                name_variable_usmap40 = None  # or any default name you want

            # Check if float_namesusmap[40] is not empty
            if float_namesusmap and len(float_namesusmap) > 40:
                name_variable_usmap41 = float_namesusmap[40].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[40] is empty or not provided
                name_variable_usmap41 = None  # or any default name you want

            # Check if float_namesusmap[41] is not empty
            if float_namesusmap and len(float_namesusmap) > 41:
                name_variable_usmap42 = float_namesusmap[41].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[41] is empty or not provided
                name_variable_usmap42 = None  # or any default name you want

            # Check if float_namesusmap[42] is not empty
            if float_namesusmap and len(float_namesusmap) > 42:
                name_variable_usmap43 = float_namesusmap[42].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[42] is empty or not provided
                name_variable_usmap43 = None  # or any default name you want

            # Check if float_namesusmap[43] is not empty
            if float_namesusmap and len(float_namesusmap) > 43:
                name_variable_usmap44 = float_namesusmap[43].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[43] is empty or not provided
                name_variable_usmap44 = None  # or any default name you want

            # Check if float_namesusmap[44] is not empty
            if float_namesusmap and len(float_namesusmap) > 44:
                name_variable_usmap45 = float_namesusmap[44].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[44] is empty or not provided
                name_variable_usmap45 = None  # or any default name you want

            # Check if float_namesusmap[45] is not empty
            if float_namesusmap and len(float_namesusmap) > 45:
                name_variable_usmap46 = float_namesusmap[45].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[45] is empty or not provided
                name_variable_usmap46 = None  # or any default name you want

            # Check if float_namesusmap[46] is not empty
            if float_namesusmap and len(float_namesusmap) > 46:
                name_variable_usmap47 = float_namesusmap[46].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[46] is empty or not provided
                name_variable_usmap47 = None  # or any default name you want

            # Check if float_namesusmap[47] is not empty
            if float_namesusmap and len(float_namesusmap) > 47:
                name_variable_usmap48 = float_namesusmap[47].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[47] is empty or not provided
                name_variable_usmap48 = None  # or any default name you want

            # Check if float_namesusmap[48] is not empty
            if float_namesusmap and len(float_namesusmap) > 48:
                name_variable_usmap49 = float_namesusmap[48].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[48] is empty or not provided
                name_variable_usmap49 = None  # or any default name you want

            # Check if float_namesusmap[49] is not empty
            if float_namesusmap and len(float_namesusmap) > 49:
                name_variable_usmap50 = float_namesusmap[49].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[49] is empty or not provided
                name_variable_usmap50 = None  # or any default name you want

            # Check if float_namesusmap[50] is not empty
            if float_namesusmap and len(float_namesusmap) > 50:
                name_variable_usmap51 = float_namesusmap[50].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesusmap[50] is empty or not provided
                name_variable_usmap51 = None  # or any default name you want


            if value_variable_usmap1.endswith('.'):
                value_variable_usmap1 = value_variable_usmap1[:-1]
            if value_variable_usmap1.startswith('.'):
                value_variable_usmap1 = value_variable_usmap1[1:]

            if value_variable_usmap2 is not None:
                if value_variable_usmap2.endswith('.'):
                    value_variable_usmap2 = value_variable_usmap2[:-1]
                if value_variable_usmap2.startswith('.'):
                    value_variable_usmap2 = value_variable_usmap2[1:]

            if value_variable_usmap3 is not None:
                if value_variable_usmap3.endswith('.'):
                    value_variable_usmap3 = value_variable_usmap3[:-1]
                if value_variable_usmap3.startswith('.'):
                    value_variable_usmap3 = value_variable_usmap3[1:]

            if value_variable_usmap4 is not None:
                if value_variable_usmap4.endswith('.'):
                    value_variable_usmap4 = value_variable_usmap4[:-1]
                if value_variable_usmap4.startswith('.'):
                    value_variable_usmap4 = value_variable_usmap4[1:]

            if value_variable_usmap5 is not None:
                if value_variable_usmap5.endswith('.'):
                    value_variable_usmap5 = value_variable_usmap5[:-1]
                if value_variable_usmap5.startswith('.'):
                    value_variable_usmap5 = value_variable_usmap5[1:]

            if value_variable_usmap6 is not None:
                if value_variable_usmap6.endswith('.'):
                    value_variable_usmap6 = value_variable_usmap6[:-1]
                if value_variable_usmap6.startswith('.'):
                    value_variable_usmap6 = value_variable_usmap6[1:]

            if value_variable_usmap7 is not None:
                if value_variable_usmap7.endswith('.'):
                    value_variable_usmap7 = value_variable_usmap7[:-1]
                if value_variable_usmap7.startswith('.'):
                    value_variable_usmap7 = value_variable_usmap7[1:]

            if value_variable_usmap8 is not None:
                if value_variable_usmap8.endswith('.'):
                    value_variable_usmap8 = value_variable_usmap8[:-1]
                if value_variable_usmap8.startswith('.'):
                    value_variable_usmap8 = value_variable_usmap8[1:]

            if value_variable_usmap9 is not None:
                if value_variable_usmap9.endswith('.'):
                    value_variable_usmap9 = value_variable_usmap9[:-1]
                if value_variable_usmap9.startswith('.'):
                    value_variable_usmap9 = value_variable_usmap9[1:]

            if value_variable_usmap10 is not None:
                if value_variable_usmap10.endswith('.'):
                    value_variable_usmap10 = value_variable_usmap10[:-1]
                if value_variable_usmap10.startswith('.'):
                    value_variable_usmap10 = value_variable_usmap10[1:]

            if value_variable_usmap11 is not None:
                if value_variable_usmap11.endswith('.'):
                    value_variable_usmap11 = value_variable_usmap11[:-1]
                if value_variable_usmap11.startswith('.'):
                    value_variable_usmap11 = value_variable_usmap11[1:]

            if value_variable_usmap12 is not None:
                if value_variable_usmap12.endswith('.'):
                    value_variable_usmap12 = value_variable_usmap12[:-1]
                if value_variable_usmap12.startswith('.'):
                    value_variable_usmap12 = value_variable_usmap12[1:]

            if value_variable_usmap13 is not None:
                if value_variable_usmap13.endswith('.'):
                    value_variable_usmap13 = value_variable_usmap13[:-1]
                if value_variable_usmap13.startswith('.'):
                    value_variable_usmap13 = value_variable_usmap13[1:]

            if value_variable_usmap14 is not None:
                if value_variable_usmap14.endswith('.'):
                    value_variable_usmap14 = value_variable_usmap14[:-1]
                if value_variable_usmap14.startswith('.'):
                    value_variable_usmap14 = value_variable_usmap14[1:]

            if value_variable_usmap15 is not None:
                if value_variable_usmap15.endswith('.'):
                    value_variable_usmap15 = value_variable_usmap15[:-1]
                if value_variable_usmap15.startswith('.'):
                    value_variable_usmap15 = value_variable_usmap15[1:]

            if value_variable_usmap16 is not None:
                if value_variable_usmap16.endswith('.'):
                    value_variable_usmap16 = value_variable_usmap16[:-1]
                if value_variable_usmap16.startswith('.'):
                    value_variable_usmap16 = value_variable_usmap16[1:]

            if value_variable_usmap17 is not None:
                if value_variable_usmap17.endswith('.'):
                    value_variable_usmap17 = value_variable_usmap17[:-1]
                if value_variable_usmap17.startswith('.'):
                    value_variable_usmap17 = value_variable_usmap17[1:]

            if value_variable_usmap18 is not None:
                if value_variable_usmap18.endswith('.'):
                    value_variable_usmap18 = value_variable_usmap18[:-1]
                if value_variable_usmap18.startswith('.'):
                    value_variable_usmap18 = value_variable_usmap18[1:]

            if value_variable_usmap19 is not None:
                if value_variable_usmap19.endswith('.'):
                    value_variable_usmap19 = value_variable_usmap19[:-1]
                if value_variable_usmap19.startswith('.'):
                    value_variable_usmap19 = value_variable_usmap19[1:]

            if value_variable_usmap20 is not None:
                if value_variable_usmap20.endswith('.'):
                    value_variable_usmap20 = value_variable_usmap20[:-1]
                if value_variable_usmap20.startswith('.'):
                    value_variable_usmap20 = value_variable_usmap20[1:]

            if value_variable_usmap21 is not None:
                if value_variable_usmap21.endswith('.'):
                    value_variable_usmap21 = value_variable_usmap21[:-1]
                if value_variable_usmap21.startswith('.'):
                    value_variable_usmap21 = value_variable_usmap21[1:]

            if value_variable_usmap22 is not None:
                if value_variable_usmap22.endswith('.'):
                    value_variable_usmap22 = value_variable_usmap22[:-1]
                if value_variable_usmap22.startswith('.'):
                    value_variable_usmap22 = value_variable_usmap22[1:]

            if value_variable_usmap23 is not None:
                if value_variable_usmap23.endswith('.'):
                    value_variable_usmap23 = value_variable_usmap23[:-1]
                if value_variable_usmap23.startswith('.'):
                    value_variable_usmap23 = value_variable_usmap23[1:]

            if value_variable_usmap24 is not None:
                if value_variable_usmap24.endswith('.'):
                    value_variable_usmap24 = value_variable_usmap24[:-1]
                if value_variable_usmap24.startswith('.'):
                    value_variable_usmap24 = value_variable_usmap24[1:]

            if value_variable_usmap25 is not None:
                if value_variable_usmap25.endswith('.'):
                    value_variable_usmap25 = value_variable_usmap25[:-1]
                if value_variable_usmap25.startswith('.'):
                    value_variable_usmap25 = value_variable_usmap25[1:]

            if value_variable_usmap26 is not None:
                if value_variable_usmap26.endswith('.'):
                    value_variable_usmap26 = value_variable_usmap26[:-1]
                if value_variable_usmap26.startswith('.'):
                    value_variable_usmap26 = value_variable_usmap26[1:]

            if value_variable_usmap27 is not None:
                if value_variable_usmap27.endswith('.'):
                    value_variable_usmap27 = value_variable_usmap27[:-1]
                if value_variable_usmap27.startswith('.'):
                    value_variable_usmap27 = value_variable_usmap27[1:]

            if value_variable_usmap28 is not None:
                if value_variable_usmap28.endswith('.'):
                    value_variable_usmap28 = value_variable_usmap28[:-1]
                if value_variable_usmap28.startswith('.'):
                    value_variable_usmap28 = value_variable_usmap28[1:]

            if value_variable_usmap29 is not None:
                if value_variable_usmap29.endswith('.'):
                    value_variable_usmap29 = value_variable_usmap29[:-1]
                if value_variable_usmap29.startswith('.'):
                    value_variable_usmap29 = value_variable_usmap29[1:]

            if value_variable_usmap30 is not None:
                if value_variable_usmap30.endswith('.'):
                    value_variable_usmap30 = value_variable_usmap30[:-1]
                if value_variable_usmap30.startswith('.'):
                    value_variable_usmap30 = value_variable_usmap30[1:]

            if value_variable_usmap31 is not None:
                if value_variable_usmap31.endswith('.'):
                    value_variable_usmap31 = value_variable_usmap31[:-1]
                if value_variable_usmap31.startswith('.'):
                    value_variable_usmap31 = value_variable_usmap31[1:]

            if value_variable_usmap32 is not None:
                if value_variable_usmap32.endswith('.'):
                    value_variable_usmap32 = value_variable_usmap32[:-1]
                if value_variable_usmap32.startswith('.'):
                    value_variable_usmap32 = value_variable_usmap32[1:]

            if value_variable_usmap33 is not None:
                if value_variable_usmap33.endswith('.'):
                    value_variable_usmap33 = value_variable_usmap33[:-1]
                if value_variable_usmap33.startswith('.'):
                    value_variable_usmap33 = value_variable_usmap33[1:]

            if value_variable_usmap34 is not None:
                if value_variable_usmap34.endswith('.'):
                    value_variable_usmap34 = value_variable_usmap34[:-1]
                if value_variable_usmap34.startswith('.'):
                    value_variable_usmap34 = value_variable_usmap34[1:]

            if value_variable_usmap35 is not None:
                if value_variable_usmap35.endswith('.'):
                    value_variable_usmap35 = value_variable_usmap35[:-1]
                if value_variable_usmap35.startswith('.'):
                    value_variable_usmap35 = value_variable_usmap35[1:]

            if value_variable_usmap36 is not None:
                if value_variable_usmap36.endswith('.'):
                    value_variable_usmap36 = value_variable_usmap36[:-1]
                if value_variable_usmap36.startswith('.'):
                    value_variable_usmap36 = value_variable_usmap36[1:]

            if value_variable_usmap37 is not None:
                if value_variable_usmap37.endswith('.'):
                    value_variable_usmap37 = value_variable_usmap37[:-1]
                if value_variable_usmap37.startswith('.'):
                    value_variable_usmap37 = value_variable_usmap37[1:]

            if value_variable_usmap38 is not None:
                if value_variable_usmap38.endswith('.'):
                    value_variable_usmap38 = value_variable_usmap38[:-1]
                if value_variable_usmap38.startswith('.'):
                    value_variable_usmap38 = value_variable_usmap38[1:]

            if value_variable_usmap39 is not None:
                if value_variable_usmap39.endswith('.'):
                    value_variable_usmap39 = value_variable_usmap39[:-1]
                if value_variable_usmap39.startswith('.'):
                    value_variable_usmap39 = value_variable_usmap39[1:]

            if value_variable_usmap40 is not None:
                if value_variable_usmap40.endswith('.'):
                    value_variable_usmap40 = value_variable_usmap40[:-1]
                if value_variable_usmap40.startswith('.'):
                    value_variable_usmap40 = value_variable_usmap40[1:]

            if value_variable_usmap41 is not None:
                if value_variable_usmap41.endswith('.'):
                    value_variable_usmap41 = value_variable_usmap41[:-1]
                if value_variable_usmap41.startswith('.'):
                    value_variable_usmap41 = value_variable_usmap41[1:]

            if value_variable_usmap42 is not None:
                if value_variable_usmap42.endswith('.'):
                    value_variable_usmap42 = value_variable_usmap42[:-1]
                if value_variable_usmap42.startswith('.'):
                    value_variable_usmap42 = value_variable_usmap42[1:]

            if value_variable_usmap43 is not None:
                if value_variable_usmap43.endswith('.'):
                    value_variable_usmap43 = value_variable_usmap43[:-1]
                if value_variable_usmap43.startswith('.'):
                    value_variable_usmap43 = value_variable_usmap43[1:]

            if value_variable_usmap44 is not None:
                if value_variable_usmap44.endswith('.'):
                    value_variable_usmap44 = value_variable_usmap44[:-1]
                if value_variable_usmap44.startswith('.'):
                    value_variable_usmap44 = value_variable_usmap44[1:]

            if value_variable_usmap45 is not None:
                if value_variable_usmap45.endswith('.'):
                    value_variable_usmap45 = value_variable_usmap45[:-1]
                if value_variable_usmap45.startswith('.'):
                    value_variable_usmap45 = value_variable_usmap45[1:]

            if value_variable_usmap46 is not None:
                if value_variable_usmap46.endswith('.'):
                    value_variable_usmap46 = value_variable_usmap46[:-1]
                if value_variable_usmap46.startswith('.'):
                    value_variable_usmap46 = value_variable_usmap46[1:]

            if value_variable_usmap47 is not None:
                if value_variable_usmap47.endswith('.'):
                    value_variable_usmap47 = value_variable_usmap47[:-1]
                if value_variable_usmap47.startswith('.'):
                    value_variable_usmap47 = value_variable_usmap47[1:]

            if value_variable_usmap48 is not None:
                if value_variable_usmap48.endswith('.'):
                    value_variable_usmap48 = value_variable_usmap48[:-1]
                if value_variable_usmap48.startswith('.'):
                    value_variable_usmap48 = value_variable_usmap48[1:]

            if value_variable_usmap49 is not None:
                if value_variable_usmap49.endswith('.'):
                    value_variable_usmap49 = value_variable_usmap49[:-1]
                if value_variable_usmap49.startswith('.'):
                    value_variable_usmap49 = value_variable_usmap49[1:]

            if value_variable_usmap50 is not None:
                if value_variable_usmap50.endswith('.'):
                    value_variable_usmap50 = value_variable_usmap50[:-1]
                if value_variable_usmap50.startswith('.'):
                    value_variable_usmap50 = value_variable_usmap50[1:]

            if value_variable_usmap51 is not None:
                if value_variable_usmap51.endswith('.'):
                    value_variable_usmap51 = value_variable_usmap51[:-1]
                if value_variable_usmap51.startswith('.'):
                    value_variable_usmap51 = value_variable_usmap51[1:]



            # Ensure an object is selected
            if bpy.context.selected_objects:
                    selected_obj_usmap = bpy.context.active_object  # Get the active (selected) object

                    if selected_obj_usmap.type == 'MESH':
                            mesh_name_usmap = selected_obj_usmap.name

                            # Check if the selected object has modifiers
                            if selected_obj_usmap.modifiers:
                                    modifier_name_usmap = selected_obj_usmap.modifiers.active.name  # Get the name of the active modifier
                                    

                                    selected_obj_usmap.modifiers[modifier_name_usmap]["Input_232"] = title_variable_usmap
                                    selected_obj_usmap.modifiers[modifier_name_usmap]["Input_233"] = subtitle_variable_usmap
                                    selected_obj_usmap.modifiers[modifier_name_usmap]["Input_112"] = range_minusmap
                                    selected_obj_usmap.modifiers[modifier_name_usmap]["Input_113"] = range_maxusmap
                                    selected_obj_usmap.modifiers[modifier_name_usmap]["Input_13"] = float(value_variable_usmap1)

                                    # Check if value_variable_usmap2 is not empty
                                    if value_variable_usmap2:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_14"] = float(value_variable_usmap2)
                                    else:
                                        print("Value for Input_14 is empty or not provided.")

                                    # Check if value_variable_usmap3 is not empty
                                    if value_variable_usmap3:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_15"] = float(value_variable_usmap3)
                                    else:
                                        print("Value for Input_15 is empty or not provided.")

                                    # Check if value_variable_usmap4 is not empty
                                    if value_variable_usmap4:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_16"] = float(value_variable_usmap4)
                                    else:
                                        print("Value for Input_16 is empty or not provided.")

                                    # Check if value_variable_usmap5 is not empty
                                    if value_variable_usmap5:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_17"] = float(value_variable_usmap5)
                                    else:
                                        print("Value for Input_17 is empty or not provided.")

                                    # Check if value_variable_usmap6 is not empty
                                    if value_variable_usmap6:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_18"] = float(value_variable_usmap6)
                                    else:
                                        print("Value for Input_18 is empty or not provided.")

                                    # Check if value_variable_usmap7 is not empty
                                    if value_variable_usmap7:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_19"] = float(value_variable_usmap7)
                                    else:
                                        print("Value for Input_19 is empty or not provided.")

                                    # Check if value_variable_usmap8 is not empty
                                    if value_variable_usmap8:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_20"] = float(value_variable_usmap8)
                                    else:
                                        print("Value for Input_20 is empty or not provided.")

                                    # Check if value_variable_usmap9 is not empty
                                    if value_variable_usmap9:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_62"] = float(value_variable_usmap9)
                                    else:
                                        print("Value for Input_62 is empty or not provided.")

                                    # Check if value_variable_usmap10 is not empty
                                    if value_variable_usmap10:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_21"] = float(value_variable_usmap10)
                                    else:
                                        print("Value for Input_21 is empty or not provided.")

                                    # Check if value_variable_usmap11 is not empty
                                    if value_variable_usmap11:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_22"] = float(value_variable_usmap11)
                                    else:
                                        print("Value for Input_22 is empty or not provided.")

                                    # Check if value_variable_usmap12 is not empty
                                    if value_variable_usmap12:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_23"] = float(value_variable_usmap12)
                                    else:
                                        print("Value for Input_23 is empty or not provided.")

                                    # Check if value_variable_usmap13 is not empty
                                    if value_variable_usmap13:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_24"] = float(value_variable_usmap13)
                                    else:
                                        print("Value for Input_24 is empty or not provided.")

                                    # Check if value_variable_usmap14 is not empty
                                    if value_variable_usmap14:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_25"] = float(value_variable_usmap14)
                                    else:
                                        print("Value for Input_25 is empty or not provided.")

                                    # Check if value_variable_usmap15 is not empty
                                    if value_variable_usmap15:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_26"] = float(value_variable_usmap15)
                                    else:
                                        print("Value for Input_26 is empty or not provided.")

                                    # Check if value_variable_usmap16 is not empty
                                    if value_variable_usmap16:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_27"] = float(value_variable_usmap16)
                                    else:
                                        print("Value for Input_27 is empty or not provided.")

                                    # Check if value_variable_usmap17 is not empty
                                    if value_variable_usmap17:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_12"] = float(value_variable_usmap17)
                                    else:
                                        print("Value for Input_12 is empty or not provided.")

                                    # Check if value_variable_usmap18 is not empty
                                    if value_variable_usmap18:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_28"] = float(value_variable_usmap18)
                                    else:
                                        print("Value for Input_28 is empty or not provided.")

                                    # Check if value_variable_usmap19 is not empty
                                    if value_variable_usmap19:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_29"] = float(value_variable_usmap19)
                                    else:
                                        print("Value for Input_29 is empty or not provided.")

                                    # Check if value_variable_usmap20 is not empty
                                    if value_variable_usmap20:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_30"] = float(value_variable_usmap20)
                                    else:
                                        print("Value for Input_30 is empty or not provided.")

                                    # Check if value_variable_usmap21 is not empty
                                    if value_variable_usmap21:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_31"] = float(value_variable_usmap21)
                                    else:
                                        print("Value for Input_31 is empty or not provided.")

                                    # Check if value_variable_usmap22 is not empty
                                    if value_variable_usmap22:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_32"] = float(value_variable_usmap22)
                                    else:
                                        print("Value for Input_32 is empty or not provided.")

                                    # Check if value_variable_usmap23 is not empty
                                    if value_variable_usmap23:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_33"] = float(value_variable_usmap23)
                                    else:
                                        print("Value for Input_33 is empty or not provided.")

                                    # Check if value_variable_usmap24 is not empty
                                    if value_variable_usmap24:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_34"] = float(value_variable_usmap24)
                                    else:
                                        print("Value for Input_34 is empty or not provided.")

                                    # Check if value_variable_usmap25 is not empty
                                    if value_variable_usmap25:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_166"] = float(value_variable_usmap25)
                                    else:
                                        print("Value for Input_166 is empty or not provided.")

                                    # Check if value_variable_usmap26 is not empty
                                    if value_variable_usmap26:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_35"] = float(value_variable_usmap26)
                                    else:
                                        print("Value for Input_35 is empty or not provided.")

                                    # Check if value_variable_usmap27 is not empty
                                    if value_variable_usmap27:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_36"] = float(value_variable_usmap27)
                                    else:
                                        print("Value for Input_36 is empty or not provided.")

                                    # Check if value_variable_usmap28 is not empty
                                    if value_variable_usmap28:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_37"] = float(value_variable_usmap28)
                                    else:
                                        print("Value for Input_37 is empty or not provided.")

                                    # Check if value_variable_usmap29 is not empty
                                    if value_variable_usmap29:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_38"] = float(value_variable_usmap29)
                                    else:
                                        print("Value for Input_38 is empty or not provided.")

                                    # Check if value_variable_usmap30 is not empty
                                    if value_variable_usmap30:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_39"] = float(value_variable_usmap30)
                                    else:
                                        print("Value for Input_39 is empty or not provided.")

                                    # Check if value_variable_usmap31 is not empty
                                    if value_variable_usmap31:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_40"] = float(value_variable_usmap31)
                                    else:
                                        print("Value for Input_40 is empty or not provided.")

                                    # Check if value_variable_usmap32 is not empty
                                    if value_variable_usmap32:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_41"] = float(value_variable_usmap32)
                                    else:
                                        print("Value for Input_41 is empty or not provided.")

                                    # Check if value_variable_usmap33 is not empty
                                    if value_variable_usmap33:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_42"] = float(value_variable_usmap33)
                                    else:
                                        print("Value for Input_42 is empty or not provided.")

                                    # Check if value_variable_usmap34 is not empty
                                    if value_variable_usmap34:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_43"] = float(value_variable_usmap34)
                                    else:
                                        print("Value for Input_43 is empty or not provided.")

                                    # Check if value_variable_usmap35 is not empty
                                    if value_variable_usmap35:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_44"] = float(value_variable_usmap35)
                                    else:
                                        print("Value for Input_44 is empty or not provided.")

                                    # Check if value_variable_usmap36 is not empty
                                    if value_variable_usmap36:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_45"] = float(value_variable_usmap36)
                                    else:
                                        print("Value for Input_45 is empty or not provided.")

                                    # Check if value_variable_usmap37 is not empty
                                    if value_variable_usmap37:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_46"] = float(value_variable_usmap37)
                                    else:
                                        print("Value for Input_46 is empty or not provided.")

                                    # Check if value_variable_usmap38 is not empty
                                    if value_variable_usmap38:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_47"] = float(value_variable_usmap38)
                                    else:
                                        print("Value for Input_47 is empty or not provided.")

                                    # Check if value_variable_usmap39 is not empty
                                    if value_variable_usmap39:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_48"] = float(value_variable_usmap39)
                                    else:
                                        print("Value for Input_48 is empty or not provided.")

                                    # Check if value_variable_usmap40 is not empty
                                    if value_variable_usmap40:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_49"] = float(value_variable_usmap40)
                                    else:
                                        print("Value for Input_49 is empty or not provided.")

                                    # Check if value_variable_usmap41 is not empty
                                    if value_variable_usmap41:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_50"] = float(value_variable_usmap41)
                                    else:
                                        print("Value for Input_50 is empty or not provided.")

                                    # Check if value_variable_usmap42 is not empty
                                    if value_variable_usmap42:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_51"] = float(value_variable_usmap42)
                                    else:
                                        print("Value for Input_51 is empty or not provided.")

                                    # Check if value_variable_usmap43 is not empty
                                    if value_variable_usmap43:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_52"] = float(value_variable_usmap43)
                                    else:
                                        print("Value for Input_52 is empty or not provided.")

                                    # Check if value_variable_usmap44 is not empty
                                    if value_variable_usmap44:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_53"] = float(value_variable_usmap44)
                                    else:
                                        print("Value for Input_53 is empty or not provided.")

                                    # Check if value_variable_usmap45 is not empty
                                    if value_variable_usmap45:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_54"] = float(value_variable_usmap45)
                                    else:
                                        print("Value for Input_54 is empty or not provided.")

                                    # Check if value_variable_usmap46 is not empty
                                    if value_variable_usmap46:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_55"] = float(value_variable_usmap46)
                                    else:
                                        print("Value for Input_55 is empty or not provided.")

                                    # Check if value_variable_usmap47 is not empty
                                    if value_variable_usmap47:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_56"] = float(value_variable_usmap47)
                                    else:
                                        print("Value for Input_56 is empty or not provided.")

                                    # Check if value_variable_usmap48 is not empty
                                    if value_variable_usmap48:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_57"] = float(value_variable_usmap48)
                                    else:
                                        print("Value for Input_57 is empty or not provided.")

                                    # Check if value_variable_usmap49 is not empty
                                    if value_variable_usmap49:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_58"] = float(value_variable_usmap49)
                                    else:
                                        print("Value for Input_58 is empty or not provided.")

                                    # Check if value_variable_usmap50 is not empty
                                    if value_variable_usmap50:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_59"] = float(value_variable_usmap50)
                                    else:
                                        print("Value for Input_59 is empty or not provided.")

                                    # Check if value_variable_usmap51 is not empty
                                    if value_variable_usmap51:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_60"] = float(value_variable_usmap51)
                                    else:
                                        print("Value for Input_60 is empty or not provided.")


                                    selected_obj_usmap.modifiers[modifier_name_usmap]["Input_185"] = name_variable_usmap1

                                    # Check if name_variable_usmap2 is not empty before setting the input
                                    if name_variable_usmap2:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_184"] = name_variable_usmap2
                                    else:
                                        print("Name for Input_194 is empty or not provided.")     

                                    # Check if name_variable_usmap3 is not empty before setting the input
                                    if name_variable_usmap3:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_183"] = name_variable_usmap3
                                    else:
                                        print("Name for Input_183 is empty or not provided.")    

                                    # Check if name_variable_usmap4 is not empty before setting the input
                                    if name_variable_usmap4:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_182"] = name_variable_usmap4
                                    else:
                                        print("Name for Input_182 is empty or not provided.")    

                                    # Check if name_variable_usmap5 is not empty before setting the input
                                    if name_variable_usmap5:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_181"] = name_variable_usmap5
                                    else:
                                        print("Name for Input_181 is empty or not provided.")    

                                    # Check if name_variable_usmap6 is not empty before setting the input
                                    if name_variable_usmap6:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_180"] = name_variable_usmap6
                                    else:
                                        print("Name for Input_180 is empty or not provided.")  

                                    # Check if name_variable_usmap7 is not empty before setting the input
                                    if name_variable_usmap7:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_179"] = name_variable_usmap7
                                    else:
                                        print("Name for Input_179 is empty or not provided.")  

                                    # Check if name_variable_usmap8 is not empty before setting the input
                                    if name_variable_usmap8:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_178"] = name_variable_usmap8
                                    else:
                                        print("Name for Input_178 is empty or not provided.")

                                    # Check if name_variable_usmap9 is not empty before setting the input
                                    if name_variable_usmap9:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_177"] = name_variable_usmap9
                                    else:
                                        print("Name for Input_177 is empty or not provided.")

                                    # Check if name_variable_usmap10 is not empty before setting the input
                                    if name_variable_usmap10:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_176"] = name_variable_usmap10
                                    else:
                                        print("Name for Input_176 is empty or not provided.")

                                    # Check if name_variable_usmap11 is not empty before setting the input
                                    if name_variable_usmap11:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_175"] = name_variable_usmap11
                                    else:
                                        print("Name for Input_175 is empty or not provided.")

                                    # Check if name_variable_usmap12 is not empty before setting the input
                                    if name_variable_usmap12:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_174"] = name_variable_usmap12
                                    else:
                                        print("Name for Input_174 is empty or not provided.")

                                    # Check if name_variable_usmap13 is not empty before setting the input
                                    if name_variable_usmap13:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_173"] = name_variable_usmap13
                                    else:
                                        print("Name for Input_173 is empty or not provided.")

                                    # Check if name_variable_usmap14 is not empty before setting the input
                                    if name_variable_usmap14:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_172"] = name_variable_usmap14
                                    else:
                                        print("Name for Input_172 is empty or not provided.")

                                    # Check if name_variable_usmap15 is not empty before setting the input
                                    if name_variable_usmap15:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_171"] = name_variable_usmap15
                                    else:
                                        print("Name for Input_171 is empty or not provided.")

                                    # Check if name_variable_usmap16 is not empty before setting the input
                                    if name_variable_usmap16:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_170"] = name_variable_usmap16
                                    else:
                                        print("Name for Input_170 is empty or not provided.")

                                    # Check if name_variable_usmap17 is not empty before setting the input
                                    if name_variable_usmap17:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_167"] = name_variable_usmap17
                                    else:
                                        print("Name for Input_167 is empty or not provided.")

                                    # Check if name_variable_usmap18 is not empty before setting the input
                                    if name_variable_usmap18:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_186"] = name_variable_usmap18
                                    else:
                                        print("Name for Input_186 is empty or not provided.")

                                    # Check if name_variable_usmap19 is not empty before setting the input
                                    if name_variable_usmap19:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_187"] = name_variable_usmap19
                                    else:
                                        print("Name for Input_187 is empty or not provided.")

                                    # Check if name_variable_usmap20 is not empty before setting the input
                                    if name_variable_usmap20:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_188"] = name_variable_usmap20
                                    else:
                                        print("Name for Input_188 is empty or not provided.")

                                    # Check if name_variable_usmap21 is not empty before setting the input
                                    if name_variable_usmap21:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_189"] = name_variable_usmap21
                                    else:
                                        print("Name for Input_189 is empty or not provided.")

                                    # Check if name_variable_usmap22 is not empty before setting the input
                                    if name_variable_usmap22:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_190"] = name_variable_usmap22
                                    else:
                                        print("Name for Input_190 is empty or not provided.")

                                    # Check if name_variable_usmap23 is not empty before setting the input
                                    if name_variable_usmap23:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_191"] = name_variable_usmap23
                                    else:
                                        print("Name for Input_191 is empty or not provided.")

                                    # Check if name_variable_usmap24 is not empty before setting the input
                                    if name_variable_usmap24:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_192"] = name_variable_usmap24
                                    else:
                                        print("Name for Input_192 is empty or not provided.")

                                    # Check if name_variable_usmap25 is not empty before setting the input
                                    if name_variable_usmap25:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_193"] = name_variable_usmap25
                                    else:
                                        print("Name for Input_193 is empty or not provided.")

                                     # Check if name_variable_usmap26 is not empty before setting the input
                                    if name_variable_usmap26:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_194"] = name_variable_usmap26
                                    else:
                                        print("Name for Input_194 is empty or not provided.")  

                                     # Check if name_variable_usmap27 is not empty before setting the input
                                    if name_variable_usmap27:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_195"] = name_variable_usmap27
                                    else:
                                        print("Name for Input_195 is empty or not provided.")    

                                     # Check if name_variable_usmap28 is not empty before setting the input
                                    if name_variable_usmap28:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_196"] = name_variable_usmap28
                                    else:
                                        print("Name for Input_196 is empty or not provided.")  

                                     # Check if name_variable_usmap29 is not empty before setting the input
                                    if name_variable_usmap29:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_197"] = name_variable_usmap29
                                    else:
                                        print("Name for Input_197 is empty or not provided.") 

                                     # Check if name_variable_usmap30 is not empty before setting the input
                                    if name_variable_usmap30:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_198"] = name_variable_usmap30
                                    else:
                                        print("Name for Input_198 is empty or not provided.")

                                     # Check if name_variable_usmap31 is not empty before setting the input
                                    if name_variable_usmap31:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_199"] = name_variable_usmap31
                                    else:
                                        print("Name for Input_199 is empty or not provided.")  

                                     # Check if name_variable_usmap32 is not empty before setting the input
                                    if name_variable_usmap32:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_200"] = name_variable_usmap32
                                    else:
                                        print("Name for Input_200 is empty or not provided.") 

                                     # Check if name_variable_usmap33 is not empty before setting the input
                                    if name_variable_usmap33:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_201"] = name_variable_usmap33
                                    else:
                                        print("Name for Input_201 is empty or not provided.")

                                     # Check if name_variable_usmap34 is not empty before setting the input
                                    if name_variable_usmap34:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_202"] = name_variable_usmap34
                                    else:
                                        print("Name for Input_202 is empty or not provided.")  

                                     # Check if name_variable_usmap35 is not empty before setting the input
                                    if name_variable_usmap35:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_203"] = name_variable_usmap35
                                    else:
                                        print("Name for Input_203 is empty or not provided.")

                                     # Check if name_variable_usmap36 is not empty before setting the input
                                    if name_variable_usmap36:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_204"] = name_variable_usmap36
                                    else:
                                        print("Name for Input_204 is empty or not provided.")

                                     # Check if name_variable_usmap37 is not empty before setting the input
                                    if name_variable_usmap37:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_205"] = name_variable_usmap37
                                    else:
                                        print("Name for Input_205 is empty or not provided.")

                                     # Check if name_variable_usmap38 is not empty before setting the input
                                    if name_variable_usmap38:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_206"] = name_variable_usmap38
                                    else:
                                        print("Name for Input_206 is empty or not provided.") 

                                     # Check if name_variable_usmap39 is not empty before setting the input
                                    if name_variable_usmap39:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_207"] = name_variable_usmap39
                                    else:
                                        print("Name for Input_207 is empty or not provided.")

                                     # Check if name_variable_usmap40 is not empty before setting the input
                                    if name_variable_usmap40:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_208"] = name_variable_usmap40
                                    else:
                                        print("Name for Input_208 is empty or not provided.") 

                                     # Check if name_variable_usmap41 is not empty before setting the input
                                    if name_variable_usmap41:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_209"] = name_variable_usmap41
                                    else:
                                        print("Name for Input_209 is empty or not provided.")    

                                     # Check if name_variable_usmap42 is not empty before setting the input
                                    if name_variable_usmap42:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_210"] = name_variable_usmap42
                                    else:
                                        print("Name for Input_210 is empty or not provided.")

                                     # Check if name_variable_usmap43 is not empty before setting the input
                                    if name_variable_usmap43:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_211"] = name_variable_usmap43
                                    else:
                                        print("Name for Input_211 is empty or not provided.")

                                     # Check if name_variable_usmap44 is not empty before setting the input
                                    if name_variable_usmap44:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_212"] = name_variable_usmap44
                                    else:
                                        print("Name for Input_212 is empty or not provided.") 

                                     # Check if name_variable_usmap45 is not empty before setting the input
                                    if name_variable_usmap45:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_213"] = name_variable_usmap45
                                    else:
                                        print("Name for Input_213 is empty or not provided.")

                                     # Check if name_variable_usmap46 is not empty before setting the input
                                    if name_variable_usmap46:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_214"] = name_variable_usmap46
                                    else:
                                        print("Name for Input_214 is empty or not provided.") 

                                     # Check if name_variable_usmap47 is not empty before setting the input
                                    if name_variable_usmap47:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_215"] = name_variable_usmap47
                                    else:
                                        print("Name for Input_215 is empty or not provided.")  

                                     # Check if name_variable_usmap48 is not empty before setting the input
                                    if name_variable_usmap48:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_216"] = name_variable_usmap48
                                    else:
                                        print("Name for Input_216 is empty or not provided.")

                                     # Check if name_variable_usmap49 is not empty before setting the input
                                    if name_variable_usmap49:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_217"] = name_variable_usmap49
                                    else:
                                        print("Name for Input_217 is empty or not provided.")  

                                     # Check if name_variable_usmap50 is not empty before setting the input
                                    if name_variable_usmap50:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_218"] = name_variable_usmap50
                                    else:
                                        print("Name for Input_218 is empty or not provided.")  

                                     # Check if name_variable_usmap51 is not empty before setting the input
                                    if name_variable_usmap51:
                                        selected_obj_usmap.modifiers[modifier_name_usmap]["Input_219"] = name_variable_usmap51
                                    else:
                                        print("Name for Input_219 is empty or not provided.")                                                 



                                    print(f"Set modifier input for object '{mesh_name_usmap}' and modifier '{modifier_name_usmap}'.")
                            else:
                                    print(f"Selected object '{mesh_name_usmap}' has no modifiers.")
                    else:
                            print("Selected object is not a mesh.")
            else:
                    print("No object selected.")
            bpy.context.object.data.update()
        return {'FINISHED'}

    
    


class MyoperatorLGsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorlgsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringline_graph
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of points (1-30)` FROM linegtable")
        numberofpointslg = mycursor.fetchone()
        my_floatlg_numberofpoints = int(numberofpointslg[0])

        mycursor.execute("SELECT `Value` FROM linegtable")
        pointvaluelg = mycursor.fetchall()
        pointvaluelg1, pointvaluelg2, pointvaluelg3, pointvaluelg4, pointvaluelg5, pointvaluelg6, pointvaluelg7, pointvaluelg8, pointvaluelg9, pointvaluelg10, pointvaluelg11, pointvaluelg12, pointvaluelg13, pointvaluelg14, pointvaluelg15, pointvaluelg16, pointvaluelg17, pointvaluelg18, pointvaluelg19, pointvaluelg20, pointvaluelg21, pointvaluelg22, pointvaluelg23, pointvaluelg24, pointvaluelg25, pointvaluelg26, pointvaluelg27, pointvaluelg28, pointvaluelg29, pointvaluelg30 = pointvaluelg
        pointvaluelg1 = str(pointvaluelg1)
        pointvaluelg2 = str(pointvaluelg2)
        pointvaluelg3 = str(pointvaluelg3)
        pointvaluelg4 = str(pointvaluelg4)
        pointvaluelg5 = str(pointvaluelg5)
        pointvaluelg6 = str(pointvaluelg6)
        pointvaluelg7 = str(pointvaluelg7)
        pointvaluelg8 = str(pointvaluelg8) 
        pointvaluelg1 = str(pointvaluelg1)
        pointvaluelg2 = str(pointvaluelg2)
        pointvaluelg3 = str(pointvaluelg3)
        pointvaluelg4 = str(pointvaluelg4)
        pointvaluelg5 = str(pointvaluelg5)
        pointvaluelg6 = str(pointvaluelg6)
        pointvaluelg7 = str(pointvaluelg7)
        pointvaluelg8 = str(pointvaluelg8)
        pointvaluelg9 = str(pointvaluelg9)
        pointvaluelg10 = str(pointvaluelg10)
        pointvaluelg11 = str(pointvaluelg11)
        pointvaluelg12 = str(pointvaluelg12)
        pointvaluelg13 = str(pointvaluelg13)
        pointvaluelg14 = str(pointvaluelg14)
        pointvaluelg15 = str(pointvaluelg15)
        pointvaluelg16 = str(pointvaluelg16)
        pointvaluelg17 = str(pointvaluelg17)
        pointvaluelg18 = str(pointvaluelg18)
        pointvaluelg19 = str(pointvaluelg19)
        pointvaluelg20 = str(pointvaluelg20)
        pointvaluelg21 = str(pointvaluelg21)
        pointvaluelg22 = str(pointvaluelg22)
        pointvaluelg23 = str(pointvaluelg23)
        pointvaluelg24 = str(pointvaluelg24)
        pointvaluelg25 = str(pointvaluelg25)
        pointvaluelg26 = str(pointvaluelg26)
        pointvaluelg27 = str(pointvaluelg27)
        pointvaluelg28 = str(pointvaluelg28)
        pointvaluelg29 = str(pointvaluelg29)
        pointvaluelg30 = str(pointvaluelg30)         
        pointvaluelg1 = pointvaluelg1.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg1 = float(pointvaluelg1)
        pointvaluelg2 = pointvaluelg2.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg2 = float(pointvaluelg2)
        pointvaluelg3 = pointvaluelg3.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg3 = float(pointvaluelg3)
        pointvaluelg4 = pointvaluelg4.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg4 = float(pointvaluelg4)
        pointvaluelg5 = pointvaluelg5.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg5 = float(pointvaluelg5)
        pointvaluelg6 = pointvaluelg6.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg6 = float(pointvaluelg6)
        pointvaluelg7 = pointvaluelg7.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg7 = float(pointvaluelg7)
        pointvaluelg8 = pointvaluelg8.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg8 = float(pointvaluelg8)
        pointvaluelg9 = pointvaluelg9.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg9 = float(pointvaluelg9)

        pointvaluelg10 = pointvaluelg10.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg10 = float(pointvaluelg10)

        pointvaluelg11 = pointvaluelg11.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg11 = float(pointvaluelg11)

        pointvaluelg12 = pointvaluelg12.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg12 = float(pointvaluelg12)

        pointvaluelg13 = pointvaluelg13.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg13 = float(pointvaluelg13)

        pointvaluelg14 = pointvaluelg14.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg14 = float(pointvaluelg14)

        pointvaluelg15 = pointvaluelg15.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg15 = float(pointvaluelg15)

        pointvaluelg16 = pointvaluelg16.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg16 = float(pointvaluelg16)

        pointvaluelg17 = pointvaluelg17.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg17 = float(pointvaluelg17)

        pointvaluelg18 = pointvaluelg18.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg18 = float(pointvaluelg18)

        pointvaluelg19 = pointvaluelg19.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg19 = float(pointvaluelg19)

        pointvaluelg20 = pointvaluelg20.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg20 = float(pointvaluelg20)

        pointvaluelg21 = pointvaluelg21.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg21 = float(pointvaluelg21)

        pointvaluelg22 = pointvaluelg22.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg22 = float(pointvaluelg22)

        pointvaluelg23 = pointvaluelg23.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg23 = float(pointvaluelg23)

        pointvaluelg24 = pointvaluelg24.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg24 = float(pointvaluelg24)

        pointvaluelg25 = pointvaluelg25.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg25 = float(pointvaluelg25)

        pointvaluelg26 = pointvaluelg26.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg26 = float(pointvaluelg26)

        pointvaluelg27 = pointvaluelg27.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg27 = float(pointvaluelg27)

        pointvaluelg28 = pointvaluelg28.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg28 = float(pointvaluelg28)

        pointvaluelg29 = pointvaluelg29.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg29 = float(pointvaluelg29)

        pointvaluelg30 = pointvaluelg30.strip("(").strip(")").strip(",").strip("'")
        pointvaluelg30 = float(pointvaluelg30)

        mycursor.execute("SELECT `Point Text` FROM linegtable")
        my_stringlg_pointtext = mycursor.fetchall()
        my_stringlg_pointtext1 = str(my_stringlg_pointtext[0])
        my_stringlg_pointtext2 = str(my_stringlg_pointtext[1])
        my_stringlg_pointtext3 = str(my_stringlg_pointtext[2])
        my_stringlg_pointtext4 = str(my_stringlg_pointtext[3])
        my_stringlg_pointtext5 = str(my_stringlg_pointtext[4])
        my_stringlg_pointtext6 = str(my_stringlg_pointtext[5])
        my_stringlg_pointtext7 = str(my_stringlg_pointtext[6])
        my_stringlg_pointtext8 = str(my_stringlg_pointtext[7])
        my_stringlg_pointtext9 = str(my_stringlg_pointtext[8])
        my_stringlg_pointtext10 = str(my_stringlg_pointtext[9])
        my_stringlg_pointtext11 = str(my_stringlg_pointtext[10])
        my_stringlg_pointtext12 = str(my_stringlg_pointtext[11])
        my_stringlg_pointtext13 = str(my_stringlg_pointtext[12])
        my_stringlg_pointtext14 = str(my_stringlg_pointtext[13])
        my_stringlg_pointtext15 = str(my_stringlg_pointtext[14])
        my_stringlg_pointtext16 = str(my_stringlg_pointtext[15])
        my_stringlg_pointtext17 = str(my_stringlg_pointtext[16])
        my_stringlg_pointtext18 = str(my_stringlg_pointtext[17])
        my_stringlg_pointtext19 = str(my_stringlg_pointtext[18])
        my_stringlg_pointtext20 = str(my_stringlg_pointtext[19])
        my_stringlg_pointtext21 = str(my_stringlg_pointtext[20])
        my_stringlg_pointtext22 = str(my_stringlg_pointtext[21])
        my_stringlg_pointtext23 = str(my_stringlg_pointtext[22])
        my_stringlg_pointtext24 = str(my_stringlg_pointtext[23])
        my_stringlg_pointtext25 = str(my_stringlg_pointtext[24])
        my_stringlg_pointtext26 = str(my_stringlg_pointtext[25])
        my_stringlg_pointtext27 = str(my_stringlg_pointtext[26])
        my_stringlg_pointtext28 = str(my_stringlg_pointtext[27])
        my_stringlg_pointtext29 = str(my_stringlg_pointtext[28])
        my_stringlg_pointtext30 = str(my_stringlg_pointtext[29])
        my_stringlg_pointtext1 = my_stringlg_pointtext1.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext2 = my_stringlg_pointtext2.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext3 = my_stringlg_pointtext3.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext4 = my_stringlg_pointtext4.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext5 = my_stringlg_pointtext5.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext6 = my_stringlg_pointtext6.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext7 = my_stringlg_pointtext7.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext8 = my_stringlg_pointtext8.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext9 = my_stringlg_pointtext9.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext10 = my_stringlg_pointtext10.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext11 = my_stringlg_pointtext11.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext12 = my_stringlg_pointtext12.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext13 = my_stringlg_pointtext13.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext14 = my_stringlg_pointtext14.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext15 = my_stringlg_pointtext15.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext16 = my_stringlg_pointtext16.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext17 = my_stringlg_pointtext17.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext18 = my_stringlg_pointtext18.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext19 = my_stringlg_pointtext19.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext20 = my_stringlg_pointtext20.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext21 = my_stringlg_pointtext21.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext22 = my_stringlg_pointtext22.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext23 = my_stringlg_pointtext23.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext24 = my_stringlg_pointtext24.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext25 = my_stringlg_pointtext25.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext26 = my_stringlg_pointtext26.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext27 = my_stringlg_pointtext27.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext28 = my_stringlg_pointtext28.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext29 = my_stringlg_pointtext29.strip("(").strip(")").strip(",").strip("'")
        my_stringlg_pointtext30 = my_stringlg_pointtext30.strip("(").strip(")").strip(",").strip("'")


        mycursor.execute("SELECT `Min Value` FROM linegtable")
        minpointvalue = mycursor.fetchone()
        my_floatlg_minpointvalue = float(minpointvalue[0])
        
        mycursor.execute("SELECT `Max Value` FROM linegtable")
        maxpointvalue = mycursor.fetchone()
        my_floatlg_maxpointvalue = float(maxpointvalue[0])

        mycursor.execute("SELECT `Decimals` FROM linegtable")
        decvalue = mycursor.fetchone()
        my_floatlg_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `Range Numbers` FROM linegtable")
        rangenumber = mycursor.fetchone()
        my_floatlg_rangenumber = int(rangenumber[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM linegtable")
        my_stringlg_title = mycursor.fetchone()
        my_stringlg_title = str(my_stringlg_title)
        my_stringlg_title = my_stringlg_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM linegtable")
        my_stringlg_subtitle = mycursor.fetchone()
        my_stringlg_subtitle = str(my_stringlg_subtitle)
        my_stringlg_subtitle = my_stringlg_subtitle.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj = bpy.context.active_object  # Get the active (selected) object

                if selected_obj.type == 'MESH':
                        mesh_name = selected_obj.name

                        # Check if the selected object has modifiers
                        if selected_obj.modifiers:
                                if len(selected_obj.modifiers) >= 2:  # Ensure at least two modifiers exist
                                        modifier_0 = selected_obj.modifiers.get("GeometryNodes")
                                        modifier_1 = selected_obj.modifiers.get("GeometryNodes.001")

                                if modifier_0 and modifier_1:
                                        modifier_0["Input_2"] = my_floatlg_numberofpoints
                                        modifier_0["Input_13"] = my_floatlg_minpointvalue
                                        modifier_0["Input_14"] = my_floatlg_maxpointvalue
                                        modifier_0["Input_15"] = my_floatlg_decvalue
                                        modifier_0["Input_18"] = my_floatlg_rangenumber
                                        modifier_0["Input_4"] = pointvaluelg1
                                        modifier_0["Input_5"] = pointvaluelg2
                                        modifier_0["Input_6"] = pointvaluelg3
                                        modifier_0["Input_7"] = pointvaluelg4
                                        modifier_0["Input_8"] = pointvaluelg5
                                        modifier_0["Input_9"] = pointvaluelg6
                                        modifier_0["Input_10"] = pointvaluelg7
                                        modifier_0["Input_11"] = pointvaluelg8
                                        modifier_0["Socket_0"] = pointvaluelg9
                                        modifier_0["Socket_1"] = pointvaluelg10
                                        modifier_0["Socket_2"] = pointvaluelg11
                                        modifier_0["Socket_3"] = pointvaluelg12
                                        modifier_0["Socket_4"] = pointvaluelg13
                                        modifier_0["Socket_5"] = pointvaluelg14
                                        modifier_0["Socket_6"] = pointvaluelg15
                                        modifier_0["Socket_7"] = pointvaluelg16
                                        modifier_0["Socket_8"] = pointvaluelg17
                                        modifier_0["Socket_9"] = pointvaluelg18
                                        modifier_0["Socket_10"] = pointvaluelg19
                                        modifier_0["Socket_11"] = pointvaluelg20
                                        modifier_0["Socket_12"] = pointvaluelg21
                                        modifier_0["Socket_13"] = pointvaluelg22
                                        modifier_0["Socket_14"] = pointvaluelg23
                                        modifier_0["Socket_15"] = pointvaluelg24
                                        modifier_0["Socket_16"] = pointvaluelg25
                                        modifier_0["Socket_17"] = pointvaluelg26
                                        modifier_0["Socket_18"] = pointvaluelg27
                                        modifier_0["Socket_19"] = pointvaluelg28
                                        modifier_0["Socket_20"] = pointvaluelg29
                                        modifier_0["Socket_21"] = pointvaluelg30

                                        modifier_1["Input_4"] = my_stringlg_pointtext1
                                        modifier_1["Input_5"] = my_stringlg_pointtext2
                                        modifier_1["Input_6"] = my_stringlg_pointtext3
                                        modifier_1["Input_7"] = my_stringlg_pointtext4
                                        modifier_1["Input_8"] = my_stringlg_pointtext5
                                        modifier_1["Input_9"] = my_stringlg_pointtext6
                                        modifier_1["Input_10"] = my_stringlg_pointtext7
                                        modifier_1["Input_11"] = my_stringlg_pointtext8
                                        modifier_1["Socket_0"] = my_stringlg_pointtext9
                                        modifier_1["Socket_1"] = my_stringlg_pointtext10
                                        modifier_1["Socket_2"] = my_stringlg_pointtext11
                                        modifier_1["Socket_3"] = my_stringlg_pointtext12
                                        modifier_1["Socket_4"] = my_stringlg_pointtext13
                                        modifier_1["Socket_5"] = my_stringlg_pointtext14
                                        modifier_1["Socket_6"] = my_stringlg_pointtext15
                                        modifier_1["Socket_7"] = my_stringlg_pointtext16
                                        modifier_1["Socket_8"] = my_stringlg_pointtext17
                                        modifier_1["Socket_9"] = my_stringlg_pointtext18
                                        modifier_1["Socket_10"] = my_stringlg_pointtext19
                                        modifier_1["Socket_11"] = my_stringlg_pointtext20
                                        modifier_1["Socket_12"] = my_stringlg_pointtext21
                                        modifier_1["Socket_13"] = my_stringlg_pointtext22
                                        modifier_1["Socket_14"] = my_stringlg_pointtext23
                                        modifier_1["Socket_15"] = my_stringlg_pointtext24
                                        modifier_1["Socket_16"] = my_stringlg_pointtext25
                                        modifier_1["Socket_17"] = my_stringlg_pointtext26
                                        modifier_1["Socket_18"] = my_stringlg_pointtext27
                                        modifier_1["Socket_19"] = my_stringlg_pointtext28
                                        modifier_1["Socket_20"] = my_stringlg_pointtext29
                                        modifier_1["Socket_21"] = my_stringlg_pointtext30
                                        modifier_1["Input_23"] = my_stringlg_title
                                        modifier_1["Input_22"] = my_stringlg_subtitle

                                        print(f"Set modifier input for object '{mesh_name}'.")
                                else:
                                        print("Selected object does not have both modifiers.")
                        else:
                                print(f"Selected object '{mesh_name}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")

        # Optionally, you can update the mesh data if needed.
        bpy.context.object.data.update()
        return {'FINISHED'}

    
class MyoperatorLGCsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorlgcsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringline_graph_comparison
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of points (1-8)` FROM linegcomparison_table")
        numberofpointslgc = mycursor.fetchone()
        my_floatlgc_numberofpoints = int(numberofpointslgc[0])

        mycursor.execute("SELECT `Point Text` FROM linegcomparison_table")
        my_stringlgc_pointtext = mycursor.fetchall()
        my_stringlgc_pointtext1 = str(my_stringlgc_pointtext[0])
        my_stringlgc_pointtext2 = str(my_stringlgc_pointtext[1])
        my_stringlgc_pointtext3 = str(my_stringlgc_pointtext[2])
        my_stringlgc_pointtext4 = str(my_stringlgc_pointtext[3])
        my_stringlgc_pointtext5 = str(my_stringlgc_pointtext[4])
        my_stringlgc_pointtext6 = str(my_stringlgc_pointtext[5])
        my_stringlgc_pointtext7 = str(my_stringlgc_pointtext[6])
        my_stringlgc_pointtext8 = str(my_stringlgc_pointtext[7])
        my_stringlgc_pointtext1 = my_stringlgc_pointtext1.strip("(").strip(")").strip(",").strip("'")
        my_stringlgc_pointtext2 = my_stringlgc_pointtext2.strip("(").strip(")").strip(",").strip("'")
        my_stringlgc_pointtext3 = my_stringlgc_pointtext3.strip("(").strip(")").strip(",").strip("'")
        my_stringlgc_pointtext4 = my_stringlgc_pointtext4.strip("(").strip(")").strip(",").strip("'")
        my_stringlgc_pointtext5 = my_stringlgc_pointtext5.strip("(").strip(")").strip(",").strip("'")
        my_stringlgc_pointtext6 = my_stringlgc_pointtext6.strip("(").strip(")").strip(",").strip("'")
        my_stringlgc_pointtext7 = my_stringlgc_pointtext7.strip("(").strip(")").strip(",").strip("'")
        my_stringlgc_pointtext8 = my_stringlgc_pointtext8.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Value A` FROM linegcomparison_table")
        pointvaluealgc = mycursor.fetchall()
        pointvaluealgc1, pointvaluealgc2, pointvaluealgc3, pointvaluealgc4, pointvaluealgc5, pointvaluealgc6, pointvaluealgc7, pointvaluealgc8 = pointvaluealgc
        pointvaluealgc1 = str(pointvaluealgc1)
        pointvaluealgc2 = str(pointvaluealgc2)
        pointvaluealgc3 = str(pointvaluealgc3)
        pointvaluealgc4 = str(pointvaluealgc4)
        pointvaluealgc5 = str(pointvaluealgc5)
        pointvaluealgc6 = str(pointvaluealgc6)
        pointvaluealgc7 = str(pointvaluealgc7)
        pointvaluealgc8 = str(pointvaluealgc8)          
        pointvaluealgc1 = pointvaluealgc1.strip("(").strip(")").strip(",").strip("'")
        pointvaluealgc1 = float(pointvaluealgc1)
        pointvaluealgc2 = pointvaluealgc2.strip("(").strip(")").strip(",").strip("'")
        pointvaluealgc2 = float(pointvaluealgc2)
        pointvaluealgc3 = pointvaluealgc3.strip("(").strip(")").strip(",").strip("'")
        pointvaluealgc3 = float(pointvaluealgc3)
        pointvaluealgc4 = pointvaluealgc4.strip("(").strip(")").strip(",").strip("'")
        pointvaluealgc4 = float(pointvaluealgc4)
        pointvaluealgc5 = pointvaluealgc5.strip("(").strip(")").strip(",").strip("'")
        pointvaluealgc5 = float(pointvaluealgc5)
        pointvaluealgc6 = pointvaluealgc6.strip("(").strip(")").strip(",").strip("'")
        pointvaluealgc6 = float(pointvaluealgc6)
        pointvaluealgc7 = pointvaluealgc7.strip("(").strip(")").strip(",").strip("'")
        pointvaluealgc7 = float(pointvaluealgc7)
        pointvaluealgc8 = pointvaluealgc8.strip("(").strip(")").strip(",").strip("'")
        pointvaluealgc8 = float(pointvaluealgc8)

        mycursor.execute("SELECT `Value B` FROM linegcomparison_table")
        pointvalueblgc = mycursor.fetchall()
        pointvalueblgc1, pointvalueblgc2, pointvalueblgc3, pointvalueblgc4, pointvalueblgc5, pointvalueblgc6, pointvalueblgc7, pointvalueblgc8 = pointvalueblgc
        pointvalueblgc1 = str(pointvalueblgc1)
        pointvalueblgc2 = str(pointvalueblgc2)
        pointvalueblgc3 = str(pointvalueblgc3)
        pointvalueblgc4 = str(pointvalueblgc4)
        pointvalueblgc5 = str(pointvalueblgc5)
        pointvalueblgc6 = str(pointvalueblgc6)
        pointvalueblgc7 = str(pointvalueblgc7)
        pointvalueblgc8 = str(pointvalueblgc8)          
        pointvalueblgc1 = pointvalueblgc1.strip("(").strip(")").strip(",").strip("'")
        pointvalueblgc1 = float(pointvalueblgc1)
        pointvalueblgc2 = pointvalueblgc2.strip("(").strip(")").strip(",").strip("'")
        pointvalueblgc2 = float(pointvalueblgc2)
        pointvalueblgc3 = pointvalueblgc3.strip("(").strip(")").strip(",").strip("'")
        pointvalueblgc3 = float(pointvalueblgc3)
        pointvalueblgc4 = pointvalueblgc4.strip("(").strip(")").strip(",").strip("'")
        pointvalueblgc4 = float(pointvalueblgc4)
        pointvalueblgc5 = pointvalueblgc5.strip("(").strip(")").strip(",").strip("'")
        pointvalueblgc5 = float(pointvalueblgc5)
        pointvalueblgc6 = pointvalueblgc6.strip("(").strip(")").strip(",").strip("'")
        pointvalueblgc6 = float(pointvalueblgc6)
        pointvalueblgc7 = pointvalueblgc7.strip("(").strip(")").strip(",").strip("'")
        pointvalueblgc7 = float(pointvalueblgc7)
        pointvalueblgc8 = pointvalueblgc8.strip("(").strip(")").strip(",").strip("'")
        pointvalueblgc8 = float(pointvalueblgc8)


        mycursor.execute("SELECT `Min Value` FROM linegcomparison_table")
        minpointvalue = mycursor.fetchone()
        my_floatlgc_minpointvalue = float(minpointvalue[0])
        
        mycursor.execute("SELECT `Max Value` FROM linegcomparison_table")
        maxpointvalue = mycursor.fetchone()
        my_floatlgc_maxpointvalue = float(maxpointvalue[0])

        mycursor.execute("SELECT `Decimals` FROM linegcomparison_table")
        decvalue = mycursor.fetchone()
        my_floatlgc_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `Range Numbers` FROM linegcomparison_table")
        rangenumber = mycursor.fetchone()
        my_floatlgc_rangenumber = int(rangenumber[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM linegcomparison_table")
        my_stringlgc_title = mycursor.fetchone()
        my_stringlgc_title = str(my_stringlgc_title)
        my_stringlgc_title = my_stringlgc_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM linegcomparison_table")
        my_stringlgc_subtitle = mycursor.fetchone()
        my_stringlgc_subtitle = str(my_stringlgc_subtitle)
        my_stringlgc_subtitle = my_stringlgc_subtitle.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Legend` FROM linegcomparison_table")
        my_stringlgc_legendtext = mycursor.fetchall()
        my_stringlgc_legendtext1 = str(my_stringlgc_legendtext[0])
        my_stringlgc_legendtext2 = str(my_stringlgc_legendtext[1])
        my_stringlgc_legendtext1 = my_stringlgc_legendtext1.strip("(").strip(")").strip(",").strip("'")
        my_stringlgc_legendtext2 = my_stringlgc_legendtext2.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj = bpy.context.active_object  # Get the active (selected) object

                if selected_obj.type == 'MESH':
                        mesh_name = selected_obj.name

                        # Check if the selected object has modifiers
                        if selected_obj.modifiers:
                                if len(selected_obj.modifiers) >= 2:  # Ensure at least two modifiers exist
                                        modifier_0c = selected_obj.modifiers.get("GeometryNodes")
                                        modifier_1c = selected_obj.modifiers.get("GeometryNodes.001")

                                if modifier_0c and modifier_1c:
                                        modifier_0c["Input_2"] = my_floatlgc_numberofpoints
                                        modifier_0c["Input_13"] = my_floatlgc_minpointvalue
                                        modifier_0c["Input_14"] = my_floatlgc_maxpointvalue
                                        modifier_0c["Input_15"] = my_floatlgc_decvalue
                                        modifier_0c["Input_18"] = my_floatlgc_rangenumber
                                        modifier_0c["Input_4"] = pointvaluealgc1
                                        modifier_0c["Input_5"] = pointvaluealgc2
                                        modifier_0c["Input_6"] = pointvaluealgc3
                                        modifier_0c["Input_7"] = pointvaluealgc4
                                        modifier_0c["Input_8"] = pointvaluealgc5
                                        modifier_0c["Input_9"] = pointvaluealgc6
                                        modifier_0c["Input_10"] = pointvaluealgc7
                                        modifier_0c["Input_11"] = pointvaluealgc8
                                        modifier_0c["Input_34"] = pointvalueblgc1
                                        modifier_0c["Input_35"] = pointvalueblgc2
                                        modifier_0c["Input_36"] = pointvalueblgc3
                                        modifier_0c["Input_37"] = pointvalueblgc4
                                        modifier_0c["Input_38"] = pointvalueblgc5
                                        modifier_0c["Input_39"] = pointvalueblgc6
                                        modifier_0c["Input_40"] = pointvalueblgc7
                                        modifier_0c["Input_41"] = pointvalueblgc8

                                        modifier_1c["Input_4"] = my_stringlgc_pointtext1
                                        modifier_1c["Input_5"] = my_stringlgc_pointtext2
                                        modifier_1c["Input_6"] = my_stringlgc_pointtext3
                                        modifier_1c["Input_7"] = my_stringlgc_pointtext4
                                        modifier_1c["Input_8"] = my_stringlgc_pointtext5
                                        modifier_1c["Input_9"] = my_stringlgc_pointtext6
                                        modifier_1c["Input_10"] = my_stringlgc_pointtext7
                                        modifier_1c["Input_11"] = my_stringlgc_pointtext8
                                        modifier_1c["Input_23"] = my_stringlgc_title
                                        modifier_1c["Input_22"] = my_stringlgc_subtitle
                                        modifier_1c["Input_29"] = my_stringlgc_legendtext1
                                        modifier_1c["Input_30"] = my_stringlgc_legendtext2

                                        print(f"Set modifier input for object '{mesh_name}'.")
                                else:
                                        print("Selected object does not have both modifiers.")
                        else:
                                print(f"Selected object '{mesh_name}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")

        # Optionally, you can update the mesh data if needed.
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorMGsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatormgsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringmountain_graph
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of points (1-8)` FROM mountaingtable")
        numberofpointsmg = mycursor.fetchone()
        my_floatmg_numberofpoints = int(numberofpointsmg[0])

        mycursor.execute("SELECT `Value` FROM mountaingtable")
        pointvaluemg = mycursor.fetchall()
        pointvaluemg1, pointvaluemg2, pointvaluemg3, pointvaluemg4, pointvaluemg5, pointvaluemg6, pointvaluemg7, pointvaluemg8 = pointvaluemg
        pointvaluemg1 = str(pointvaluemg1)
        pointvaluemg2 = str(pointvaluemg2)
        pointvaluemg3 = str(pointvaluemg3)
        pointvaluemg4 = str(pointvaluemg4)
        pointvaluemg5 = str(pointvaluemg5)
        pointvaluemg6 = str(pointvaluemg6)
        pointvaluemg7 = str(pointvaluemg7)
        pointvaluemg8 = str(pointvaluemg8)          
        pointvaluemg1 = pointvaluemg1.strip("(").strip(")").strip(",").strip("'")
        pointvaluemg1 = float(pointvaluemg1)
        pointvaluemg2 = pointvaluemg2.strip("(").strip(")").strip(",").strip("'")
        pointvaluemg2 = float(pointvaluemg2)
        pointvaluemg3 = pointvaluemg3.strip("(").strip(")").strip(",").strip("'")
        pointvaluemg3 = float(pointvaluemg3)
        pointvaluemg4 = pointvaluemg4.strip("(").strip(")").strip(",").strip("'")
        pointvaluemg4 = float(pointvaluemg4)
        pointvaluemg5 = pointvaluemg5.strip("(").strip(")").strip(",").strip("'")
        pointvaluemg5 = float(pointvaluemg5)
        pointvaluemg6 = pointvaluemg6.strip("(").strip(")").strip(",").strip("'")
        pointvaluemg6 = float(pointvaluemg6)
        pointvaluemg7 = pointvaluemg7.strip("(").strip(")").strip(",").strip("'")
        pointvaluemg7 = float(pointvaluemg7)
        pointvaluemg8 = pointvaluemg8.strip("(").strip(")").strip(",").strip("'")
        pointvaluemg8 = float(pointvaluemg8)

        mycursor.execute("SELECT `Point Text` FROM mountaingtable")
        my_stringmg_pointtext = mycursor.fetchall()
        my_stringmg_pointtext1 = str(my_stringmg_pointtext[0])
        my_stringmg_pointtext2 = str(my_stringmg_pointtext[1])
        my_stringmg_pointtext3 = str(my_stringmg_pointtext[2])
        my_stringmg_pointtext4 = str(my_stringmg_pointtext[3])
        my_stringmg_pointtext5 = str(my_stringmg_pointtext[4])
        my_stringmg_pointtext6 = str(my_stringmg_pointtext[5])
        my_stringmg_pointtext7 = str(my_stringmg_pointtext[6])
        my_stringmg_pointtext8 = str(my_stringmg_pointtext[7])
        my_stringmg_pointtext1 = my_stringmg_pointtext1.strip("(").strip(")").strip(",").strip("'")
        my_stringmg_pointtext2 = my_stringmg_pointtext2.strip("(").strip(")").strip(",").strip("'")
        my_stringmg_pointtext3 = my_stringmg_pointtext3.strip("(").strip(")").strip(",").strip("'")
        my_stringmg_pointtext4 = my_stringmg_pointtext4.strip("(").strip(")").strip(",").strip("'")
        my_stringmg_pointtext5 = my_stringmg_pointtext5.strip("(").strip(")").strip(",").strip("'")
        my_stringmg_pointtext6 = my_stringmg_pointtext6.strip("(").strip(")").strip(",").strip("'")
        my_stringmg_pointtext7 = my_stringmg_pointtext7.strip("(").strip(")").strip(",").strip("'")
        my_stringmg_pointtext8 = my_stringmg_pointtext8.strip("(").strip(")").strip(",").strip("'")


        mycursor.execute("SELECT `Min Value` FROM mountaingtable")
        minpointvalue = mycursor.fetchone()
        my_floatmg_minpointvalue = float(minpointvalue[0])
        
        mycursor.execute("SELECT `Max Value` FROM mountaingtable")
        maxpointvalue = mycursor.fetchone()
        my_floatmg_maxpointvalue = float(maxpointvalue[0])

        mycursor.execute("SELECT `Decimals` FROM mountaingtable")
        decvalue = mycursor.fetchone()
        my_floatmg_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `Range Numbers` FROM mountaingtable")
        rangenumber = mycursor.fetchone()
        my_floatmg_rangenumber = int(rangenumber[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM mountaingtable")
        my_stringmg_title = mycursor.fetchone()
        my_stringmg_title = str(my_stringmg_title)
        my_stringmg_title = my_stringmg_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM mountaingtable")
        my_stringmg_subtitle = mycursor.fetchone()
        my_stringmg_subtitle = str(my_stringmg_subtitle)
        my_stringmg_subtitle = my_stringmg_subtitle.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_mg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_mg.type == 'MESH':
                        mesh_name_mg = selected_obj_mg.name

                        # Check if the selected object has modifiers
                        if selected_obj_mg.modifiers:
                                modifier_name_mg = selected_obj_mg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_mg.modifiers[modifier_name_mg]["Input_2"] = my_floatmg_numberofpoints
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_22"] = my_floatmg_minpointvalue
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_24"] = my_floatmg_maxpointvalue
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_23"] = my_floatmg_decvalue
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_21"] = my_floatmg_rangenumber
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_3"] = pointvaluemg1
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_4"] = pointvaluemg2
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_5"] = pointvaluemg3
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_6"] = pointvaluemg4
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_7"] = pointvaluemg5
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_8"] = pointvaluemg6
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_9"] = pointvaluemg7
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_10"] = pointvaluemg8
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_13"] = my_stringmg_pointtext1
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_14"] = my_stringmg_pointtext2
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_15"] = my_stringmg_pointtext3
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_16"] = my_stringmg_pointtext4
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_17"] = my_stringmg_pointtext5
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_18"] = my_stringmg_pointtext6
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_19"] = my_stringmg_pointtext7
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_20"] = my_stringmg_pointtext8
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_38"] = my_stringmg_title
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_39"] = my_stringmg_subtitle

                                print(f"Set modifier input for object '{mesh_name_mg}' and modifier '{modifier_name_mg}'.")
                        else:
                                print(f"Selected object '{mesh_name_mg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorMGCsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatormgcsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringmountain_graph_comparison
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of points (1-8)` FROM mountaingcomparison_table")
        numberofpointsmgc = mycursor.fetchone()
        my_floatmgc_numberofpoints = int(numberofpointsmgc[0])

        mycursor.execute("SELECT `Point Text` FROM mountaingcomparison_table")
        my_stringmgc_pointtext = mycursor.fetchall()
        my_stringmgc_pointtext1 = str(my_stringmgc_pointtext[0])
        my_stringmgc_pointtext2 = str(my_stringmgc_pointtext[1])
        my_stringmgc_pointtext3 = str(my_stringmgc_pointtext[2])
        my_stringmgc_pointtext4 = str(my_stringmgc_pointtext[3])
        my_stringmgc_pointtext5 = str(my_stringmgc_pointtext[4])
        my_stringmgc_pointtext6 = str(my_stringmgc_pointtext[5])
        my_stringmgc_pointtext7 = str(my_stringmgc_pointtext[6])
        my_stringmgc_pointtext8 = str(my_stringmgc_pointtext[7])
        my_stringmgc_pointtext1 = my_stringmgc_pointtext1.strip("(").strip(")").strip(",").strip("'")
        my_stringmgc_pointtext2 = my_stringmgc_pointtext2.strip("(").strip(")").strip(",").strip("'")
        my_stringmgc_pointtext3 = my_stringmgc_pointtext3.strip("(").strip(")").strip(",").strip("'")
        my_stringmgc_pointtext4 = my_stringmgc_pointtext4.strip("(").strip(")").strip(",").strip("'")
        my_stringmgc_pointtext5 = my_stringmgc_pointtext5.strip("(").strip(")").strip(",").strip("'")
        my_stringmgc_pointtext6 = my_stringmgc_pointtext6.strip("(").strip(")").strip(",").strip("'")
        my_stringmgc_pointtext7 = my_stringmgc_pointtext7.strip("(").strip(")").strip(",").strip("'")
        my_stringmgc_pointtext8 = my_stringmgc_pointtext8.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Value A` FROM mountaingcomparison_table")
        pointvalueamgc = mycursor.fetchall()
        pointvalueamgc1, pointvalueamgc2, pointvalueamgc3, pointvalueamgc4, pointvalueamgc5, pointvalueamgc6, pointvalueamgc7, pointvalueamgc8 = pointvalueamgc
        pointvalueamgc1 = str(pointvalueamgc1)
        pointvalueamgc2 = str(pointvalueamgc2)
        pointvalueamgc3 = str(pointvalueamgc3)
        pointvalueamgc4 = str(pointvalueamgc4)
        pointvalueamgc5 = str(pointvalueamgc5)
        pointvalueamgc6 = str(pointvalueamgc6)
        pointvalueamgc7 = str(pointvalueamgc7)
        pointvalueamgc8 = str(pointvalueamgc8)          
        pointvalueamgc1 = pointvalueamgc1.strip("(").strip(")").strip(",").strip("'")
        pointvalueamgc1 = float(pointvalueamgc1)
        pointvalueamgc2 = pointvalueamgc2.strip("(").strip(")").strip(",").strip("'")
        pointvalueamgc2 = float(pointvalueamgc2)
        pointvalueamgc3 = pointvalueamgc3.strip("(").strip(")").strip(",").strip("'")
        pointvalueamgc3 = float(pointvalueamgc3)
        pointvalueamgc4 = pointvalueamgc4.strip("(").strip(")").strip(",").strip("'")
        pointvalueamgc4 = float(pointvalueamgc4)
        pointvalueamgc5 = pointvalueamgc5.strip("(").strip(")").strip(",").strip("'")
        pointvalueamgc5 = float(pointvalueamgc5)
        pointvalueamgc6 = pointvalueamgc6.strip("(").strip(")").strip(",").strip("'")
        pointvalueamgc6 = float(pointvalueamgc6)
        pointvalueamgc7 = pointvalueamgc7.strip("(").strip(")").strip(",").strip("'")
        pointvalueamgc7 = float(pointvalueamgc7)
        pointvalueamgc8 = pointvalueamgc8.strip("(").strip(")").strip(",").strip("'")
        pointvalueamgc8 = float(pointvalueamgc8)

        mycursor.execute("SELECT `Value B` FROM mountaingcomparison_table")
        pointvaluebmgc = mycursor.fetchall()
        pointvaluebmgc1, pointvaluebmgc2, pointvaluebmgc3, pointvaluebmgc4, pointvaluebmgc5, pointvaluebmgc6, pointvaluebmgc7, pointvaluebmgc8 = pointvaluebmgc
        pointvaluebmgc1 = str(pointvaluebmgc1)
        pointvaluebmgc2 = str(pointvaluebmgc2)
        pointvaluebmgc3 = str(pointvaluebmgc3)
        pointvaluebmgc4 = str(pointvaluebmgc4)
        pointvaluebmgc5 = str(pointvaluebmgc5)
        pointvaluebmgc6 = str(pointvaluebmgc6)
        pointvaluebmgc7 = str(pointvaluebmgc7)
        pointvaluebmgc8 = str(pointvaluebmgc8)          
        pointvaluebmgc1 = pointvaluebmgc1.strip("(").strip(")").strip(",").strip("'")
        pointvaluebmgc1 = float(pointvaluebmgc1)
        pointvaluebmgc2 = pointvaluebmgc2.strip("(").strip(")").strip(",").strip("'")
        pointvaluebmgc2 = float(pointvaluebmgc2)
        pointvaluebmgc3 = pointvaluebmgc3.strip("(").strip(")").strip(",").strip("'")
        pointvaluebmgc3 = float(pointvaluebmgc3)
        pointvaluebmgc4 = pointvaluebmgc4.strip("(").strip(")").strip(",").strip("'")
        pointvaluebmgc4 = float(pointvaluebmgc4)
        pointvaluebmgc5 = pointvaluebmgc5.strip("(").strip(")").strip(",").strip("'")
        pointvaluebmgc5 = float(pointvaluebmgc5)
        pointvaluebmgc6 = pointvaluebmgc6.strip("(").strip(")").strip(",").strip("'")
        pointvaluebmgc6 = float(pointvaluebmgc6)
        pointvaluebmgc7 = pointvaluebmgc7.strip("(").strip(")").strip(",").strip("'")
        pointvaluebmgc7 = float(pointvaluebmgc7)
        pointvaluebmgc8 = pointvaluebmgc8.strip("(").strip(")").strip(",").strip("'")
        pointvaluebmgc8 = float(pointvaluebmgc8)


        mycursor.execute("SELECT `Min Value` FROM mountaingcomparison_table")
        minpointvalue = mycursor.fetchone()
        my_floatmgc_minpointvalue = float(minpointvalue[0])
        
        mycursor.execute("SELECT `Max Value` FROM mountaingcomparison_table")
        maxpointvalue = mycursor.fetchone()
        my_floatmgc_maxpointvalue = float(maxpointvalue[0])

        mycursor.execute("SELECT `Decimals` FROM mountaingcomparison_table")
        decvalue = mycursor.fetchone()
        my_floatmgc_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `Range Numbers` FROM mountaingcomparison_table")
        rangenumber = mycursor.fetchone()
        my_floatmgc_rangenumber = int(rangenumber[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM mountaingcomparison_table")
        my_stringmgc_title = mycursor.fetchone()
        my_stringmgc_title = str(my_stringmgc_title)
        my_stringmgc_title = my_stringmgc_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM mountaingcomparison_table")
        my_stringmgc_subtitle = mycursor.fetchone()
        my_stringmgc_subtitle = str(my_stringmgc_subtitle)
        my_stringmgc_subtitle = my_stringmgc_subtitle.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Legend` FROM mountaingcomparison_table")
        my_stringmgc_legendtext = mycursor.fetchall()
        my_stringmgc_legendtext1 = str(my_stringmgc_legendtext[0])
        my_stringmgc_legendtext2 = str(my_stringmgc_legendtext[1])
        my_stringmgc_legendtext1 = my_stringmgc_legendtext1.strip("(").strip(")").strip(",").strip("'")
        my_stringmgc_legendtext2 = my_stringmgc_legendtext2.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_mgc = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_mgc.type == 'MESH':
                        mesh_name_mgc = selected_obj_mgc.name

                        # Check if the selected object has modifiers
                        if selected_obj_mgc.modifiers:
                                modifier_name_mgc = selected_obj_mgc.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_2"] = my_floatmgc_numberofpoints
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_22"] = my_floatmgc_minpointvalue
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_24"] = my_floatmgc_maxpointvalue
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_23"] = my_floatmgc_decvalue
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_21"] = my_floatmgc_rangenumber
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_3"] = pointvalueamgc1
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_4"] = pointvalueamgc2
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_67"] = pointvalueamgc3
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_6"] = pointvalueamgc4
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_7"] = pointvalueamgc5
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_8"] = pointvalueamgc6
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_9"] = pointvalueamgc7
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_10"] = pointvalueamgc8
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_30"] = pointvaluebmgc1
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_39"] = pointvaluebmgc2
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_40"] = pointvaluebmgc3
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_41"] = pointvaluebmgc4
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_42"] = pointvaluebmgc5
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_43"] = pointvaluebmgc6
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_44"] = pointvaluebmgc7
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_45"] = pointvaluebmgc8
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_13"] = my_stringmgc_pointtext1
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_14"] = my_stringmgc_pointtext2
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_15"] = my_stringmgc_pointtext3
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_16"] = my_stringmgc_pointtext4
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_17"] = my_stringmgc_pointtext5
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_18"] = my_stringmgc_pointtext6
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_19"] = my_stringmgc_pointtext7
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_20"] = my_stringmgc_pointtext8
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_54"] = my_stringmgc_title
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_55"] = my_stringmgc_subtitle
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_57"] = my_stringmgc_legendtext1
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_56"] = my_stringmgc_legendtext2

                                print(f"Set modifier input for object '{mesh_name_mgc}' and modifier '{modifier_name_mgc}'.")
                        else:
                                print(f"Selected object '{mesh_name_mgc}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorRGsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorrgsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringradar_graph
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of graphs (1-3)` FROM radarg_table")
        numberofpointsrg = mycursor.fetchone()
        nprg = int(numberofpointsrg[0])

        mycursor.execute("SELECT `Number of values (5-18)` FROM radarg_table")
        numberofpointsrg = mycursor.fetchone()
        nvrg = int(numberofpointsrg[0])

        mycursor.execute("SELECT `Value Names` FROM radarg_table")
        textrg_unclean = mycursor.fetchall()
        # List comprehension to clean and process all fetched values
        textrg = [str(row[0]).strip("(),'") for row in textrg_unclean[:18]]

        mycursor.execute("SELECT `Value A` FROM radarg_table")
        valuearg_unclean = mycursor.fetchall()
        # List comprehension to clean and convert values to float
        valuearg = [float(str(row[0]).strip("(),'")) for row in valuearg_unclean[:18]]

        mycursor.execute("SELECT `Value B` FROM radarg_table")
        valuebrg_unclean = mycursor.fetchall()
        # List comprehension to clean and convert values to float
        valuebrg = [float(str(row[0]).strip("(),'")) for row in valuebrg_unclean[:18]]

        mycursor.execute("SELECT `Value C` FROM radarg_table")
        valuecrg_unclean = mycursor.fetchall()
        # List comprehension to clean and convert values to float
        valuecrg = [float(str(row[0]).strip("(),'")) for row in valuecrg_unclean[:18]]


        mycursor.execute("SELECT `Min Value` FROM radarg_table")
        minpointvalue = mycursor.fetchone()
        minvrg = float(minpointvalue[0])
        
        mycursor.execute("SELECT `Max Value` FROM radarg_table")
        maxpointvalue = mycursor.fetchone()
        maxvrg = float(maxpointvalue[0])

        mycursor.execute("SELECT `Legend` FROM radarg_table")
        my_stringrg_legendtext = mycursor.fetchall()
        my_stringrg_legendtext1 = str(my_stringrg_legendtext[0])
        my_stringrg_legendtext2 = str(my_stringrg_legendtext[1])
        my_stringrg_legendtext3 = str(my_stringrg_legendtext[2])
        legendarg = my_stringrg_legendtext1.strip("(").strip(")").strip(",").strip("'")
        legendbrg = my_stringrg_legendtext2.strip("(").strip(")").strip(",").strip("'")
        legendcrg = my_stringrg_legendtext3.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `TITLE (in caps)` FROM radarg_table")
        my_stringrg_title = mycursor.fetchone()
        my_stringrg_title = str(my_stringrg_title)
        titlerg = my_stringrg_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM radarg_table")
        my_stringrg_subtitle = mycursor.fetchone()
        my_stringrg_subtitle = str(my_stringrg_subtitle)
        subtitlerg = my_stringrg_subtitle.strip("(").strip(")").strip(",").strip("'")


            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_rg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_rg.type == 'MESH':
                        mesh_name_rg = selected_obj_rg.name

                        # Check if the selected object has modifiers
                        if selected_obj_rg.modifiers:
                                modifier_name_rg = selected_obj_rg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_25"] = nprg
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_31"] = nvrg

                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_16"] = textrg[0]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_17"] = textrg[1]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_18"] = textrg[2]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_19"] = textrg[3]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_20"] = textrg[4]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_21"] = textrg[5]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_22"] = textrg[6]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_23"] = textrg[7]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_24"] = textrg[8]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_26"] = textrg[9]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_27"] = textrg[10]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_28"] = textrg[11]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_29"] = textrg[12]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_30"] = textrg[13]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_31"] = textrg[14]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_34"] = textrg[15]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_32"] = textrg[16]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_33"] = textrg[17]
                                
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_2"] = valuearg[0]
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_41"] = valuearg[1]
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_42"] = valuearg[2]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_1"] = valuearg[3]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_2"] = valuearg[4]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_3"] = valuearg[5]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_4"] = valuearg[6]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_5"] = valuearg[7]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_6"] = valuearg[8]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_7"] = valuearg[9]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_8"] = valuearg[10]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_9"] = valuearg[11]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_10"] = valuearg[12]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_11"] = valuearg[13]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_12"] = valuearg[14]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_13"] = valuearg[15]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_14"] = valuearg[16]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_15"] = valuearg[17]
                                
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_38"] = valuebrg[0]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_40"] = valuebrg[1]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_42"] = valuebrg[2]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_44"] = valuebrg[3]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_46"] = valuebrg[4]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_48"] = valuebrg[5]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_50"] = valuebrg[6]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_52"] = valuebrg[7]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_54"] = valuebrg[8]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_56"] = valuebrg[9]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_58"] = valuebrg[10]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_60"] = valuebrg[11]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_62"] = valuebrg[12]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_64"] = valuebrg[13]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_66"] = valuebrg[14]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_68"] = valuebrg[15] 
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_70"] = valuebrg[16]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_72"] = valuebrg[17]  

                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_39"] = valuecrg[0]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_41"] = valuecrg[1]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_43"] = valuecrg[2]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_45"] = valuecrg[3]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_47"] = valuecrg[4]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_49"] = valuecrg[5]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_51"] = valuecrg[6]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_53"] = valuecrg[7]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_55"] = valuecrg[8]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_57"] = valuecrg[9]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_59"] = valuecrg[10]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_61"] = valuecrg[11]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_63"] = valuecrg[12]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_65"] = valuecrg[13]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_67"] = valuecrg[14]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_69"] = valuecrg[15] 
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_71"] = valuecrg[16]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_73"] = valuecrg[17]

                                selected_obj_rg.modifiers[modifier_name_rg]["Input_10"] = minvrg
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_11"] = maxvrg

                                selected_obj_rg.modifiers[modifier_name_rg]["Input_39"] = legendarg
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_40"] = legendbrg
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_38"] = legendcrg                           
                                
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_22"] = titlerg
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_23"] = subtitlerg

                                print(f"Set modifier input for object '{mesh_name_rg}' and modifier '{modifier_name_rg}'.")
                        else:
                                print(f"Selected object '{mesh_name_rg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorSGCsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorsgcsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringscatter_graph
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of points (3-100)` FROM scattergcomparison_table")
        numberofpointssgc = mycursor.fetchone()
        my_floatsgc_numberofpoints = int(numberofpointssgc[0])

        mycursor.execute("SELECT `Value X` FROM scattergcomparison_table")
        valuexsgc = mycursor.fetchall()


        point_valuesx = [0.0] * 100  # initialize list with 100 zeros
        for i, valx in enumerate(valuexsgc):
            val_strx = valx[0].replace(',', '')  # remove commas from the string
            if val_strx:  # check if the string is not empty
                point_valuesx[i] = float(val_strx)  # assign value to corresponding index
            else:
                point_valuesx[i] = 0.0  # assign 0.0 if the string is empty
            

        mycursor.execute("SELECT `Value Y` FROM scattergcomparison_table")
        valueysgc = mycursor.fetchall()

        point_valuesy = [0.0] * 100  # initialize list with 100 zeros
        for i, valy in enumerate(valueysgc):
            val_stry = valy[0].replace(',', '')  # remove commas from the string
            if val_stry:  # check if the string is not empty
                point_valuesy[i] = float(val_stry)  # assign value to corresponding index
            else:
                point_valuesy[i] = 0.0  # assign 0.0 if the string is empty

        mycursor.execute("SELECT `xMin Value` FROM scattergcomparison_table")
        xminpointvalue = mycursor.fetchone()
        my_floatsgc_xminpointvalue = float(xminpointvalue[0])
        
        mycursor.execute("SELECT `xMax Value` FROM scattergcomparison_table")
        xmaxpointvalue = mycursor.fetchone()
        my_floatsgc_xmaxpointvalue = float(xmaxpointvalue[0])

        mycursor.execute("SELECT `yMin Value` FROM scattergcomparison_table")
        yminpointvalue = mycursor.fetchone()
        my_floatsgc_yminpointvalue = float(yminpointvalue[0])
        
        mycursor.execute("SELECT `yMax Value` FROM scattergcomparison_table")
        ymaxpointvalue = mycursor.fetchone()
        my_floatsgc_ymaxpointvalue = float(ymaxpointvalue[0])

        mycursor.execute("SELECT `Decimals` FROM scattergcomparison_table")
        decvalue = mycursor.fetchone()
        my_floatsgc_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `Range Numbers` FROM scattergcomparison_table")
        rangenumber = mycursor.fetchone()
        my_floatsgc_rangenumber = int(rangenumber[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM scattergcomparison_table")
        my_stringsgc_title = mycursor.fetchone()
        my_stringsgc_title = str(my_stringsgc_title)
        my_stringsgc_title = my_stringsgc_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM scattergcomparison_table")
        my_stringsgc_subtitle = mycursor.fetchone()
        my_stringsgc_subtitle = str(my_stringsgc_subtitle)
        my_stringsgc_subtitle = my_stringsgc_subtitle.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Legend` FROM scattergcomparison_table")
        my_stringsgc_legendtext = mycursor.fetchall()
        my_stringsgc_legendtext1 = str(my_stringsgc_legendtext[0])
        my_stringsgc_legendtext2 = str(my_stringsgc_legendtext[1])
        my_stringsgc_legendtext1 = my_stringsgc_legendtext1.strip("(").strip(")").strip(",").strip("'")
        my_stringsgc_legendtext2 = my_stringsgc_legendtext2.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_sgc = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_sgc.type == 'MESH':
                        mesh_name_sgc = selected_obj_sgc.name

                        # Check if the selected object has modifiers
                        if selected_obj_sgc.modifiers:
                                modifier_name_sgc = selected_obj_sgc.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_2"] = my_floatsgc_numberofpoints

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_2"] = my_floatsgc_xminpointvalue
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_3"] = my_floatsgc_xmaxpointvalue

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_22"] = my_floatsgc_yminpointvalue
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_24"] = my_floatsgc_ymaxpointvalue

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_23"] = my_floatsgc_decvalue
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_21"] = my_floatsgc_rangenumber

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_92"] = point_valuesx[0]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_93"] = point_valuesx[1]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_94"] = point_valuesx[2]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_95"] = point_valuesx[3]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_96"] = point_valuesx[4]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_97"] = point_valuesx[5]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_98"] = point_valuesx[6]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_99"] = point_valuesx[7]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_100"] = point_valuesx[8]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_101"] = point_valuesx[9]

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_102"] = point_valuesx[10]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_103"] = point_valuesx[11]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_104"] = point_valuesx[12]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_105"] = point_valuesx[13]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_106"] = point_valuesx[14]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_107"] = point_valuesx[15]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_108"] = point_valuesx[16]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_109"] = point_valuesx[17]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_110"] = point_valuesx[18]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_111"] = point_valuesx[19]
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_112"] = point_valuesx[20]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_113"] = point_valuesx[21]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_114"] = point_valuesx[22]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_115"] = point_valuesx[23]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_116"] = point_valuesx[24]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_117"] = point_valuesx[25]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_118"] = point_valuesx[26]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_119"] = point_valuesx[27]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_191"] = point_valuesx[28]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_120"] = point_valuesx[29]
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_121"] = point_valuesx[30]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_122"] = point_valuesx[31]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_123"] = point_valuesx[32]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_124"] = point_valuesx[33]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_125"] = point_valuesx[34]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_126"] = point_valuesx[35]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_127"] = point_valuesx[36]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_128"] = point_valuesx[37]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_129"] = point_valuesx[38]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_130"] = point_valuesx[39]
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_131"] = point_valuesx[40]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_132"] = point_valuesx[41]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_133"] = point_valuesx[42]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_134"] = point_valuesx[43]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_135"] = point_valuesx[44]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_136"] = point_valuesx[45]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_137"] = point_valuesx[46]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_138"] = point_valuesx[47]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_139"] = point_valuesx[48]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_140"] = point_valuesx[49]
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_141"] = point_valuesx[50]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_142"] = point_valuesx[51]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_143"] = point_valuesx[52]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_144"] = point_valuesx[53]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_145"] = point_valuesx[54]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_146"] = point_valuesx[55]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_147"] = point_valuesx[56]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_148"] = point_valuesx[57]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_149"] = point_valuesx[58]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_150"] = point_valuesx[59]
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_151"] = point_valuesx[60]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_152"] = point_valuesx[61]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_153"] = point_valuesx[62]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_154"] = point_valuesx[63]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_155"] = point_valuesx[64]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_156"] = point_valuesx[65]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_157"] = point_valuesx[66]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_158"] = point_valuesx[67]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_159"] = point_valuesx[68]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_160"] = point_valuesx[69]
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_161"] = point_valuesx[70]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_162"] = point_valuesx[71]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_163"] = point_valuesx[72]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_164"] = point_valuesx[73]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_165"] = point_valuesx[74]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_166"] = point_valuesx[75]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_167"] = point_valuesx[76]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_168"] = point_valuesx[77]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_169"] = point_valuesx[78]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_170"] = point_valuesx[79]
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_171"] = point_valuesx[80]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_172"] = point_valuesx[81]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_173"] = point_valuesx[82]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_174"] = point_valuesx[83]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_175"] = point_valuesx[84]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_176"] = point_valuesx[85]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_177"] = point_valuesx[86]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_178"] = point_valuesx[87]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_179"] = point_valuesx[88]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_180"] = point_valuesx[89]
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_181"] = point_valuesx[90]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_182"] = point_valuesx[91]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_183"] = point_valuesx[92]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_184"] = point_valuesx[93]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_185"] = point_valuesx[94]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_186"] = point_valuesx[95]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_187"] = point_valuesx[96]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_188"] = point_valuesx[97]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_189"] = point_valuesx[98]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_190"] = point_valuesx[99]


                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_3"] = point_valuesy[0]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_55"] = point_valuesy[1]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_56"] = point_valuesy[2]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_4"] = point_valuesy[3]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_57"] = point_valuesy[4]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_58"] = point_valuesy[5]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_5"] = point_valuesy[6]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_59"] = point_valuesy[7]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_60"] = point_valuesy[8]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_6"] = point_valuesy[9]

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_61"] = point_valuesy[10]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_62"] = point_valuesy[11]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_7"] = point_valuesy[12]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_63"] = point_valuesy[13]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_64"] = point_valuesy[14]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_8"] = point_valuesy[15]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_65"] = point_valuesy[16]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_66"] = point_valuesy[17]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_9"] = point_valuesy[18]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_67"] = point_valuesy[19]

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_68"] = point_valuesy[20]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_10"] = point_valuesy[21]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_69"] = point_valuesy[22]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_70"] = point_valuesy[23]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_4"] = point_valuesy[24]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_5"] = point_valuesy[25]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_6"] = point_valuesy[26]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_7"] = point_valuesy[27]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_192"] = point_valuesy[28]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_9"] = point_valuesy[29]

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_22"] = point_valuesy[30]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_23"] = point_valuesy[31]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_24"] = point_valuesy[32]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_25"] = point_valuesy[33]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_26"] = point_valuesy[34]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_27"] = point_valuesy[35]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_28"] = point_valuesy[36]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_29"] = point_valuesy[37]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_30"] = point_valuesy[38]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_31"] = point_valuesy[39]

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_32"] = point_valuesy[40]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_33"] = point_valuesy[41]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_34"] = point_valuesy[42]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_35"] = point_valuesy[43]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_36"] = point_valuesy[44]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_37"] = point_valuesy[45]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_38"] = point_valuesy[46]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_39"] = point_valuesy[47]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_40"] = point_valuesy[48]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_41"] = point_valuesy[49]

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_42"] = point_valuesy[50]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_43"] = point_valuesy[51]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_44"] = point_valuesy[52]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_45"] = point_valuesy[53]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_46"] = point_valuesy[54]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_47"] = point_valuesy[55]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_48"] = point_valuesy[56]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_49"] = point_valuesy[57]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_50"] = point_valuesy[58]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_51"] = point_valuesy[59]

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_52"] = point_valuesy[60]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_53"] = point_valuesy[61]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_54"] = point_valuesy[62]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_55"] = point_valuesy[63]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_56"] = point_valuesy[64]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_57"] = point_valuesy[65]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_58"] = point_valuesy[66]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_59"] = point_valuesy[67]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_60"] = point_valuesy[68]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_61"] = point_valuesy[69]

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_62"] = point_valuesy[70]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_63"] = point_valuesy[71]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_64"] = point_valuesy[72]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_65"] = point_valuesy[73]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_66"] = point_valuesy[74]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_67"] = point_valuesy[75]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_68"] = point_valuesy[76]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_69"] = point_valuesy[77]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_70"] = point_valuesy[78]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_71"] = point_valuesy[79]

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_72"] = point_valuesy[80]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_73"] = point_valuesy[81]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_74"] = point_valuesy[82]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_75"] = point_valuesy[83]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_76"] = point_valuesy[84]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_77"] = point_valuesy[85]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_78"] = point_valuesy[86]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_79"] = point_valuesy[87]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_80"] = point_valuesy[88]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_81"] = point_valuesy[89]

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_82"] = point_valuesy[90]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_83"] = point_valuesy[91]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_84"] = point_valuesy[92]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_85"] = point_valuesy[93]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_86"] = point_valuesy[94]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_87"] = point_valuesy[95]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_88"] = point_valuesy[96]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_89"] = point_valuesy[97]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_90"] = point_valuesy[98]
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_91"] = point_valuesy[99]

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_38"] = my_stringsgc_title
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_39"] = my_stringsgc_subtitle

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_12"] = my_stringsgc_legendtext1
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_14"] = my_stringsgc_legendtext2

                                print(f"Set modifier input for object '{mesh_name_sgc}' and modifier '{modifier_name_sgc}'.")
                        else:
                                print(f"Selected object '{mesh_name_sgc}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorBGSsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorbgssql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringbubble_graph
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of points (3-25)` FROM bubblegcomparison_table")
        numberofpointsbgs = mycursor.fetchone()
        my_floatbgs_numberofpoints = int(numberofpointsbgs[0])

        mycursor.execute("SELECT `Value X` FROM bubblegcomparison_table")
        valuexbgs = mycursor.fetchall()


        point_valuesx = [0.0] * 26  # initialize list with 26 zeros
        for i, valx in enumerate(valuexbgs):
            val_strx = valx[0].replace(',', '')  # remove commas from the string
            if val_strx:  # check if the string is not empty
                point_valuesx[i] = float(val_strx)  # assign value to corresponding index
            else:
                point_valuesx[i] = 0.0  # assign 0.0 if the string is empty
            

        mycursor.execute("SELECT `Value Y` FROM bubblegcomparison_table")
        valueybgs = mycursor.fetchall()

        point_valuesy = [0.0] * 26  # initialize list with 26 zeros
        for i, valy in enumerate(valueybgs):
            val_stry = valy[0].replace(',', '')  # remove commas from the string
            if val_stry:  # check if the string is not empty
                point_valuesy[i] = float(val_stry)  # assign value to corresponding index
            else:
                point_valuesy[i] = 0.0  # assign 0.0 if the string is empty

        mycursor.execute("SELECT `xMin Value` FROM bubblegcomparison_table")
        xminpointvalue = mycursor.fetchone()
        my_floatbgs_xminpointvalue = float(xminpointvalue[0])
        
        mycursor.execute("SELECT `xMax Value` FROM bubblegcomparison_table")
        xmaxpointvalue = mycursor.fetchone()
        my_floatbgs_xmaxpointvalue = float(xmaxpointvalue[0])

        mycursor.execute("SELECT `yMin Value` FROM bubblegcomparison_table")
        yminpointvalue = mycursor.fetchone()
        my_floatbgs_yminpointvalue = float(yminpointvalue[0])
        
        mycursor.execute("SELECT `yMax Value` FROM bubblegcomparison_table")
        ymaxpointvalue = mycursor.fetchone()
        my_floatbgs_ymaxpointvalue = float(ymaxpointvalue[0])

        mycursor.execute("SELECT `Decimals` FROM bubblegcomparison_table")
        decvalue = mycursor.fetchone()
        my_floatbgs_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `Range Numbers` FROM bubblegcomparison_table")
        rangenumber = mycursor.fetchone()
        my_floatbgs_rangenumber = int(rangenumber[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM bubblegcomparison_table")
        my_stringbgs_title = mycursor.fetchone()
        my_stringbgs_title = str(my_stringbgs_title)
        my_stringbgs_title = my_stringbgs_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM bubblegcomparison_table")
        my_stringbgs_subtitle = mycursor.fetchone()
        my_stringbgs_subtitle = str(my_stringbgs_subtitle)
        my_stringbgs_subtitle = my_stringbgs_subtitle.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Legend` FROM bubblegcomparison_table")
        my_stringbgs_legendtext = mycursor.fetchall()
        my_stringbgs_legendtext1 = str(my_stringbgs_legendtext[0])
        my_stringbgs_legendtext1 = my_stringbgs_legendtext1.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Bubble Value` FROM bubblegcomparison_table")
        valuebubblebgs = mycursor.fetchall()

        point_valuesbubble = [0.0] * 26  # initialize list with 26 zeros
        for i, valbubble in enumerate(valuebubblebgs):
            val_strbubble = valbubble[0].replace(',', '')  # remove commas from the string
            if val_strbubble:  # check if the string is not empty
                point_valuesbubble[i] = float(val_strbubble)  # assign value to corresponding index
            else:
                point_valuesbubble[i] = 0.0  # assign 0.0 if the string is empty

        mycursor.execute("SELECT `BubbleMin Value` FROM bubblegcomparison_table")
        bubbleminpointvalue = mycursor.fetchone()
        my_floatbgs_bubbleminpointvalue = float(bubbleminpointvalue[0])
        
        mycursor.execute("SELECT `BubbleMax Value` FROM bubblegcomparison_table")
        bubblemaxpointvalue = mycursor.fetchone()
        my_floatbgs_bubblemaxpointvalue = float(bubblemaxpointvalue[0])
        
        mycursor.execute("SELECT `Description` FROM bubblegcomparison_table")
        my_stringbgs_descriptiontext = mycursor.fetchall()
        my_stringbgs_descriptiontext1 = str(my_stringbgs_descriptiontext[0])
        my_stringbgs_descriptiontext1 = my_stringbgs_descriptiontext1.strip("(").strip(")").strip(",").strip("'")
        my_stringbgs_descriptiontext2 = str(my_stringbgs_descriptiontext[1])
        my_stringbgs_descriptiontext2 = my_stringbgs_descriptiontext2.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_bgs = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_bgs.type == 'MESH':
                        mesh_name_bgs = selected_obj_bgs.name

                        # Check if the selected object has modifiers
                        if selected_obj_bgs.modifiers:
                                modifier_name_bgs = selected_obj_bgs.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_2"] = my_floatbgs_numberofpoints

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_2"] = my_floatbgs_xminpointvalue
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_3"] = my_floatbgs_xmaxpointvalue

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_22"] = my_floatbgs_yminpointvalue
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_24"] = my_floatbgs_ymaxpointvalue

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_23"] = my_floatbgs_decvalue
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_21"] = my_floatbgs_rangenumber

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_92"] = point_valuesx[0]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_93"] = point_valuesx[1]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_94"] = point_valuesx[2]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_95"] = point_valuesx[3]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_96"] = point_valuesx[4]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_97"] = point_valuesx[5]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_98"] = point_valuesx[6]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_99"] = point_valuesx[7]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_100"] = point_valuesx[8]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_101"] = point_valuesx[9]

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_102"] = point_valuesx[10]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_103"] = point_valuesx[11]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_104"] = point_valuesx[12]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_105"] = point_valuesx[13]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_106"] = point_valuesx[14]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_107"] = point_valuesx[15]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_108"] = point_valuesx[16]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_109"] = point_valuesx[17]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_110"] = point_valuesx[18]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_111"] = point_valuesx[19]
                                
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_112"] = point_valuesx[20]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_113"] = point_valuesx[21]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_114"] = point_valuesx[22]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_115"] = point_valuesx[23]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_116"] = point_valuesx[24]


                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_3"] = point_valuesy[0]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_55"] = point_valuesy[1]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_56"] = point_valuesy[2]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_4"] = point_valuesy[3]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_57"] = point_valuesy[4]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_58"] = point_valuesy[5]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_5"] = point_valuesy[6]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_59"] = point_valuesy[7]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_60"] = point_valuesy[8]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_6"] = point_valuesy[9]

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_61"] = point_valuesy[10]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_62"] = point_valuesy[11]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_7"] = point_valuesy[12]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_63"] = point_valuesy[13]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_64"] = point_valuesy[14]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_8"] = point_valuesy[15]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_65"] = point_valuesy[16]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_66"] = point_valuesy[17]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_9"] = point_valuesy[18]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_67"] = point_valuesy[19]

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_68"] = point_valuesy[20]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_10"] = point_valuesy[21]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_69"] = point_valuesy[22]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_70"] = point_valuesy[23]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_4"] = point_valuesy[24]

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_38"] = my_stringbgs_title
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_39"] = my_stringbgs_subtitle

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_199"] = my_stringbgs_legendtext1

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_202"] = point_valuesbubble[0]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_203"] = point_valuesbubble[1]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_204"] = point_valuesbubble[2]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_205"] = point_valuesbubble[3]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_206"] = point_valuesbubble[4]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_207"] = point_valuesbubble[5]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_208"] = point_valuesbubble[6]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_209"] = point_valuesbubble[7]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_210"] = point_valuesbubble[8]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_211"] = point_valuesbubble[9]

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_212"] = point_valuesbubble[10]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_213"] = point_valuesbubble[11]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_214"] = point_valuesbubble[12]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_215"] = point_valuesbubble[13]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_216"] = point_valuesbubble[14]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_217"] = point_valuesbubble[15]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_218"] = point_valuesbubble[16]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_219"] = point_valuesbubble[17]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_220"] = point_valuesbubble[18]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_221"] = point_valuesbubble[19]

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_222"] = point_valuesbubble[20]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_223"] = point_valuesbubble[21]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_224"] = point_valuesbubble[22]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_225"] = point_valuesbubble[23]
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_226"] = point_valuesbubble[24]

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_200"] = my_floatbgs_bubbleminpointvalue
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_201"] = my_floatbgs_bubblemaxpointvalue
                                
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_12"] = my_stringbgs_descriptiontext1
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_14"] = my_stringbgs_descriptiontext2

                                print(f"Set modifier input for object '{mesh_name_bgs}' and modifier '{modifier_name_bgs}'.")
                        else:
                                print(f"Selected object '{mesh_name_bgs}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class Myoperatorusmapsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorusmapsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        usmap_object = bpy.context.view_layer.objects.active
        usmap_object_name = usmap_object.name
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringusmap
        )
            
        mycursor = mydb.cursor(buffered=True)

        mycursor.execute("SELECT `US State Name` FROM usmaptable")
        my_stringusmapg_usstatename = mycursor.fetchall()
        usstatename_list = [str(item).strip("(").strip(")").strip(",").strip("'") for item in my_stringusmapg_usstatename]
 
        mycursor.execute("SELECT `Data` FROM usmaptable")
        datausmapg = mycursor.fetchall()
        # Convert the fetched data to a list of floats in one line
        datausmapg = [float(str(point).strip("(), '")) for point in datausmapg]

        mycursor.execute("SELECT `Min Value` FROM usmaptable")
        minpointvalue = mycursor.fetchone()
        my_floatusmapg_minpointvalue = float(minpointvalue[0])
        
        mycursor.execute("SELECT `Max Value` FROM usmaptable")
        maxpointvalue = mycursor.fetchone()
        my_floatusmapg_maxpointvalue = float(maxpointvalue[0])

        mycursor.execute("SELECT `Decimals` FROM usmaptable")
        decvalue = mycursor.fetchone()
        my_floatusmapg_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM usmaptable")
        my_stringusmapg_title = mycursor.fetchone()
        my_stringusmapg_title = str(my_stringusmapg_title)
        my_stringusmapg_title = my_stringusmapg_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM usmaptable")
        my_stringusmapg_subtitle = mycursor.fetchone()
        my_stringusmapg_subtitle = str(my_stringusmapg_subtitle)
        my_stringusmapg_subtitle = my_stringusmapg_subtitle.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Source Title` FROM usmaptable")
        my_stringusmapg_sourcetitle = mycursor.fetchone()
        my_stringusmapg_sourcetitle = str(my_stringusmapg_sourcetitle)
        my_stringusmapg_sourcetitle = my_stringusmapg_sourcetitle.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Source Text` FROM usmaptable")
        my_stringusmapg_sourcesubtitle = mycursor.fetchone()
        my_stringusmapg_sourcesubtitle = str(my_stringusmapg_sourcesubtitle)
        my_stringusmapg_sourcesubtitle = my_stringusmapg_sourcesubtitle.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Credit Title` FROM usmaptable")
        my_stringusmapg_credittitle = mycursor.fetchone()
        my_stringusmapg_credittitle = str(my_stringusmapg_credittitle)
        my_stringusmapg_credittitle = my_stringusmapg_credittitle.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Credit Text` FROM usmaptable")
        my_stringusmapg_creditsubtitle = mycursor.fetchone()
        my_stringusmapg_creditsubtitle = str(my_stringusmapg_creditsubtitle)
        my_stringusmapg_creditsubtitle = my_stringusmapg_creditsubtitle.strip("(").strip(")").strip(",").strip("'")
            
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_112"] = my_floatusmapg_minpointvalue
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_113"] = my_floatusmapg_maxpointvalue
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_168"] = my_floatusmapg_decvalue
        
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_185"] = usstatename_list[0]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_184"] = usstatename_list[1]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_183"] = usstatename_list[2]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_182"] = usstatename_list[3]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_181"] = usstatename_list[4]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_180"] = usstatename_list[5]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_179"] = usstatename_list[6]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_178"] = usstatename_list[7]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_177"] = usstatename_list[8]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_176"] = usstatename_list[9]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_175"] = usstatename_list[10]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_174"] = usstatename_list[11]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_173"] = usstatename_list[12]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_172"] = usstatename_list[13]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_171"] = usstatename_list[14]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_170"] = usstatename_list[15]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_167"] = usstatename_list[16]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_186"] = usstatename_list[17]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_187"] = usstatename_list[18]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_188"] = usstatename_list[19]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_189"] = usstatename_list[20]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_190"] = usstatename_list[21]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_191"] = usstatename_list[22]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_192"] = usstatename_list[23]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_193"] = usstatename_list[24]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_194"] = usstatename_list[25]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_195"] = usstatename_list[26]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_196"] = usstatename_list[27]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_197"] = usstatename_list[28]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_198"] = usstatename_list[29]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_199"] = usstatename_list[30]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_200"] = usstatename_list[31]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_201"] = usstatename_list[32]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_202"] = usstatename_list[33]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_203"] = usstatename_list[34]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_204"] = usstatename_list[35]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_205"] = usstatename_list[36]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_206"] = usstatename_list[37]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_207"] = usstatename_list[38]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_208"] = usstatename_list[39]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_209"] = usstatename_list[40]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_210"] = usstatename_list[41]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_211"] = usstatename_list[42]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_212"] = usstatename_list[43]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_213"] = usstatename_list[44]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_214"] = usstatename_list[45]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_215"] = usstatename_list[46]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_216"] = usstatename_list[47]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_217"] = usstatename_list[48]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_218"] = usstatename_list[49]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_219"] = usstatename_list[50]



            
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_13"] = datausmapg[0]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_14"] = datausmapg[1] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_15"] = datausmapg[2]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_16"] = datausmapg[3] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_17"] = datausmapg[4]          
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_18"] = datausmapg[5]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_19"] = datausmapg[6] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_20"] = datausmapg[7] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_62"] = datausmapg[8]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_21"] = datausmapg[9]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_22"] = datausmapg[10] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_23"] = datausmapg[11] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_24"] = datausmapg[12] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_25"] = datausmapg[13] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_26"] = datausmapg[14] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_27"] = datausmapg[15]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_12"] = datausmapg[16]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_28"] = datausmapg[17]  
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_29"] = datausmapg[18] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_30"] = datausmapg[19]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_31"] = datausmapg[20]  
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_32"] = datausmapg[21]  
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_33"] = datausmapg[22]  
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_34"] = datausmapg[23] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_166"] = datausmapg[24]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_35"] = datausmapg[25] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_36"] = datausmapg[26]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_37"] = datausmapg[27]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_38"] = datausmapg[28]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_39"] = datausmapg[29]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_40"] = datausmapg[30]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_41"] = datausmapg[31]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_42"] = datausmapg[32]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_43"] = datausmapg[33]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_44"] = datausmapg[34]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_45"] = datausmapg[35]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_46"] = datausmapg[36]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_47"] = datausmapg[37]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_48"] = datausmapg[38]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_49"] = datausmapg[39]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_50"] = datausmapg[40]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_51"] = datausmapg[41]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_52"] = datausmapg[42]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_53"] = datausmapg[43]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_54"] = datausmapg[44]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_55"] = datausmapg[45]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_56"] = datausmapg[46]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_57"] = datausmapg[47]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_58"] = datausmapg[48]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_59"] = datausmapg[49]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_60"] = datausmapg[50]
           
    
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_232"] = my_stringusmapg_title
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_233"] = my_stringusmapg_subtitle
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_234"] = my_stringusmapg_sourcetitle
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_235"] = my_stringusmapg_sourcesubtitle
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_236"] = my_stringusmapg_credittitle
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_237"] = my_stringusmapg_creditsubtitle
        
        bpy.context.object.data.update()
        return {'FINISHED'}   
    
class MyoperatorVBGsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorvbgsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringvertical_bar_graph
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of bars (1-8)` FROM vertical_bargtable")
        numberofbarsvbg = mycursor.fetchone()
        my_floatvbg_numberofbars = int(numberofbarsvbg[0])
        
        mycursor.execute("SELECT `Bar Text` FROM vertical_bargtable")
        my_stringvbg_bartext = mycursor.fetchall()
        my_stringvbg_bartext1 = str(my_stringvbg_bartext[0])
        my_stringvbg_bartext2 = str(my_stringvbg_bartext[1])
        my_stringvbg_bartext3 = str(my_stringvbg_bartext[2])
        my_stringvbg_bartext4 = str(my_stringvbg_bartext[3])
        my_stringvbg_bartext5 = str(my_stringvbg_bartext[4])
        my_stringvbg_bartext6 = str(my_stringvbg_bartext[5])
        my_stringvbg_bartext7 = str(my_stringvbg_bartext[6])
        my_stringvbg_bartext8 = str(my_stringvbg_bartext[7])
        my_stringvbg_bartext1 = my_stringvbg_bartext1.strip("(").strip(")").strip(",").strip("'")
        my_stringvbg_bartext2 = my_stringvbg_bartext2.strip("(").strip(")").strip(",").strip("'")
        my_stringvbg_bartext3 = my_stringvbg_bartext3.strip("(").strip(")").strip(",").strip("'")
        my_stringvbg_bartext4 = my_stringvbg_bartext4.strip("(").strip(")").strip(",").strip("'")
        my_stringvbg_bartext5 = my_stringvbg_bartext5.strip("(").strip(")").strip(",").strip("'")
        my_stringvbg_bartext6 = my_stringvbg_bartext6.strip("(").strip(")").strip(",").strip("'")
        my_stringvbg_bartext7 = my_stringvbg_bartext7.strip("(").strip(")").strip(",").strip("'")
        my_stringvbg_bartext8 = my_stringvbg_bartext8.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Max Value` FROM vertical_bargtable")
        maxvalue = mycursor.fetchone()
        my_floatvbg_maxvalue = float(maxvalue[0])

        mycursor.execute("SELECT `Bar Value` FROM vertical_bargtable")
        valuevbg = mycursor.fetchall()
        valuevbg1, valuevbg2, valuevbg3, valuevbg4, valuevbg5, valuevbg6, valuevbg7, valuevbg8 = valuevbg
        valuevbg1 = str(valuevbg1)
        valuevbg2 = str(valuevbg2)
        valuevbg3 = str(valuevbg3)
        valuevbg4 = str(valuevbg4)  
        valuevbg5 = str(valuevbg5)
        valuevbg6 = str(valuevbg6)
        valuevbg7 = str(valuevbg7)
        valuevbg8 = str(valuevbg8)        
        valuevbg1 = valuevbg1.strip("(").strip(")").strip(",").strip("'")
        valuevbg1 = float(valuevbg1)
        valuevbg2 = valuevbg2.strip("(").strip(")").strip(",").strip("'")
        valuevbg2 = float(valuevbg2)
        valuevbg3 = valuevbg3.strip("(").strip(")").strip(",").strip("'")
        valuevbg3 = float(valuevbg3)
        valuevbg4 = valuevbg4.strip("(").strip(")").strip(",").strip("'")
        valuevbg4 = float(valuevbg4)
        valuevbg5 = valuevbg5.strip("(").strip(")").strip(",").strip("'")
        valuevbg5 = float(valuevbg5)
        valuevbg6 = valuevbg6.strip("(").strip(")").strip(",").strip("'")
        valuevbg6 = float(valuevbg6)
        valuevbg7 = valuevbg7.strip("(").strip(")").strip(",").strip("'")
        valuevbg7 = float(valuevbg7)
        valuevbg8 = valuevbg8.strip("(").strip(")").strip(",").strip("'")
        valuevbg8 = float(valuevbg8)

        mycursor.execute("SELECT `Min Value` FROM vertical_bargtable")
        minvalue = mycursor.fetchone()
        my_floatvbg_minvalue = float(minvalue[0])

        mycursor.execute("SELECT `Decimals` FROM vertical_bargtable")
        decvalue = mycursor.fetchone()
        my_floatvbg_decvalue = float(decvalue[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM vertical_bargtable")
        my_stringvbg_title = mycursor.fetchone()
        my_stringvbg_title = str(my_stringvbg_title)
        my_stringvbg_title = my_stringvbg_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM vertical_bargtable")
        my_stringvbg_subtitle = mycursor.fetchone()
        my_stringvbg_subtitle = str(my_stringvbg_subtitle)
        my_stringvbg_subtitle = my_stringvbg_subtitle.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Text for total` FROM vertical_bargtable")
        my_stringvbg_textfortotal = mycursor.fetchone()
        my_stringvbg_textfortotal = str(my_stringvbg_textfortotal)
        my_stringvbg_textfortotal = my_stringvbg_textfortotal.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_vbg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_vbg.type == 'MESH':
                        mesh_name_vbg = selected_obj_vbg.name

                        # Check if the selected object has modifiers
                        if selected_obj_vbg.modifiers:
                                modifier_name_vbg = selected_obj_vbg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_57"] = my_floatvbg_numberofbars
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_14"] = valuevbg1
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_41"] = valuevbg2
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_15"] = valuevbg3
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_44"] = valuevbg4
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_16"] = valuevbg5
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_48"] = valuevbg6
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_17"] = valuevbg7
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_50"] = valuevbg8
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_10"] = my_floatvbg_minvalue
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_11"] = my_floatvbg_maxvalue
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_12"] = my_floatvbg_decvalue
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_2"] = my_stringvbg_bartext1
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_42"] = my_stringvbg_bartext2
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_3"] = my_stringvbg_bartext3
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_45"] = my_stringvbg_bartext4
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_4"] = my_stringvbg_bartext5
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_47"] = my_stringvbg_bartext6
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_5"] = my_stringvbg_bartext7
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_49"] = my_stringvbg_bartext8
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_7"] = my_stringvbg_title
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_8"] = my_stringvbg_subtitle
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_6"] = my_stringvbg_textfortotal

                                print(f"Set modifier input for object '{mesh_name_vbg}' and modifier '{modifier_name_vbg}'.")
                        else:
                                print(f"Selected object '{mesh_name_vbg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorPLsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorplgsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringprofitloss_bar_graph
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of bars (1-8)` FROM profitloss_bargtable")
        numberofbarspl = mycursor.fetchone()
        my_floatpl_numberofbars = int(numberofbarspl[0])
        
        mycursor.execute("SELECT `Bar Text` FROM profitloss_bargtable")
        my_stringpl_bartext = mycursor.fetchall()
        my_stringpl_bartext1 = str(my_stringpl_bartext[0])
        my_stringpl_bartext2 = str(my_stringpl_bartext[1])
        my_stringpl_bartext3 = str(my_stringpl_bartext[2])
        my_stringpl_bartext4 = str(my_stringpl_bartext[3])
        my_stringpl_bartext5 = str(my_stringpl_bartext[4])
        my_stringpl_bartext6 = str(my_stringpl_bartext[5])
        my_stringpl_bartext7 = str(my_stringpl_bartext[6])
        my_stringpl_bartext8 = str(my_stringpl_bartext[7])
        my_stringpl_bartext1 = my_stringpl_bartext1.strip("(").strip(")").strip(",").strip("'")
        my_stringpl_bartext2 = my_stringpl_bartext2.strip("(").strip(")").strip(",").strip("'")
        my_stringpl_bartext3 = my_stringpl_bartext3.strip("(").strip(")").strip(",").strip("'")
        my_stringpl_bartext4 = my_stringpl_bartext4.strip("(").strip(")").strip(",").strip("'")
        my_stringpl_bartext5 = my_stringpl_bartext5.strip("(").strip(")").strip(",").strip("'")
        my_stringpl_bartext6 = my_stringpl_bartext6.strip("(").strip(")").strip(",").strip("'")
        my_stringpl_bartext7 = my_stringpl_bartext7.strip("(").strip(")").strip(",").strip("'")
        my_stringpl_bartext8 = my_stringpl_bartext8.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Max Value` FROM profitloss_bargtable")
        maxvalue = mycursor.fetchone()
        my_floatpl_maxvalue = float(maxvalue[0])

        mycursor.execute("SELECT `Bar Value` FROM profitloss_bargtable")
        valuepl = mycursor.fetchall()
        valuepl1, valuepl2, valuepl3, valuepl4, valuepl5, valuepl6, valuepl7, valuepl8 = valuepl
        valuepl1 = str(valuepl1)
        valuepl2 = str(valuepl2)
        valuepl3 = str(valuepl3)
        valuepl4 = str(valuepl4)  
        valuepl5 = str(valuepl5)
        valuepl6 = str(valuepl6)
        valuepl7 = str(valuepl7)
        valuepl8 = str(valuepl8)        
        valuepl1 = valuepl1.strip("(").strip(")").strip(",").strip("'")
        valuepl1 = float(valuepl1)
        valuepl2 = valuepl2.strip("(").strip(")").strip(",").strip("'")
        valuepl2 = float(valuepl2)
        valuepl3 = valuepl3.strip("(").strip(")").strip(",").strip("'")
        valuepl3 = float(valuepl3)
        valuepl4 = valuepl4.strip("(").strip(")").strip(",").strip("'")
        valuepl4 = float(valuepl4)
        valuepl5 = valuepl5.strip("(").strip(")").strip(",").strip("'")
        valuepl5 = float(valuepl5)
        valuepl6 = valuepl6.strip("(").strip(")").strip(",").strip("'")
        valuepl6 = float(valuepl6)
        valuepl7 = valuepl7.strip("(").strip(")").strip(",").strip("'")
        valuepl7 = float(valuepl7)
        valuepl8 = valuepl8.strip("(").strip(")").strip(",").strip("'")
        valuepl8 = float(valuepl8)

        mycursor.execute("SELECT `Min Value` FROM profitloss_bargtable")
        minvalue = mycursor.fetchone()
        my_floatpl_minvalue = float(minvalue[0])

        mycursor.execute("SELECT `Decimals` FROM profitloss_bargtable")
        decvalue = mycursor.fetchone()
        my_floatpl_decvalue = float(decvalue[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM profitloss_bargtable")
        my_stringpl_title = mycursor.fetchone()
        my_stringpl_title = str(my_stringpl_title)
        my_stringpl_title = my_stringpl_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM profitloss_bargtable")
        my_stringpl_subtitle = mycursor.fetchone()
        my_stringpl_subtitle = str(my_stringpl_subtitle)
        my_stringpl_subtitle = my_stringpl_subtitle.strip("(").strip(")").strip(",").strip("'")
        

            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_pl = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_pl.type == 'MESH':
                        mesh_name_pl = selected_obj_pl.name

                        # Check if the selected object has modifiers
                        if selected_obj_pl.modifiers:
                                modifier_name_pl = selected_obj_pl.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_pl.modifiers[modifier_name_pl]["Input_57"] = my_floatpl_numberofbars
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_14"] = valuepl1
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_41"] = valuepl2
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_15"] = valuepl3
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_44"] = valuepl4
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_16"] = valuepl5
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_48"] = valuepl6
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_17"] = valuepl7
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_50"] = valuepl8
                                selected_obj_pl.modifiers[modifier_name_pl]["Socket_13"] = my_floatpl_minvalue
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_11"] = my_floatpl_maxvalue
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_12"] = my_floatpl_decvalue
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_2"] = my_stringpl_bartext1
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_42"] = my_stringpl_bartext2
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_3"] = my_stringpl_bartext3
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_45"] = my_stringpl_bartext4
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_4"] = my_stringpl_bartext5
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_47"] = my_stringpl_bartext6
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_5"] = my_stringpl_bartext7
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_49"] = my_stringpl_bartext8
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_7"] = my_stringpl_title
                                selected_obj_pl.modifiers[modifier_name_pl]["Input_8"] = my_stringpl_subtitle


                                print(f"Set modifier input for object '{mesh_name_pl}' and modifier '{modifier_name_pl}'.")
                        else:
                                print(f"Selected object '{mesh_name_pl}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorVBGCsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorvbgcsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringvertical_bar_graph_comparison
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of bars (1-8)` FROM vertical_bar_comparison_gtable")
        numberofbarsvbgc = mycursor.fetchone()
        my_floatvbgc_numberofbars = int(numberofbarsvbgc[0])
        
        mycursor.execute("SELECT `Bar Text` FROM vertical_bar_comparison_gtable")
        my_stringvbgc_bartext = mycursor.fetchall()
        my_stringvbgc_bartext1 = str(my_stringvbgc_bartext[0])
        my_stringvbgc_bartext2 = str(my_stringvbgc_bartext[1])
        my_stringvbgc_bartext3 = str(my_stringvbgc_bartext[2])
        my_stringvbgc_bartext4 = str(my_stringvbgc_bartext[3])
        my_stringvbgc_bartext5 = str(my_stringvbgc_bartext[4])
        my_stringvbgc_bartext6 = str(my_stringvbgc_bartext[5])
        my_stringvbgc_bartext7 = str(my_stringvbgc_bartext[6])
        my_stringvbgc_bartext8 = str(my_stringvbgc_bartext[7])
        my_stringvbgc_bartext1 = my_stringvbgc_bartext1.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgc_bartext2 = my_stringvbgc_bartext2.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgc_bartext3 = my_stringvbgc_bartext3.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgc_bartext4 = my_stringvbgc_bartext4.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgc_bartext5 = my_stringvbgc_bartext5.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgc_bartext6 = my_stringvbgc_bartext6.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgc_bartext7 = my_stringvbgc_bartext7.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgc_bartext8 = my_stringvbgc_bartext8.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Max Value` FROM vertical_bar_comparison_gtable")
        maxvalue = mycursor.fetchone()
        my_floatvbgc_maxvalue = float(maxvalue[0])

        mycursor.execute("SELECT `Bar Value A` FROM vertical_bar_comparison_gtable")
        valueavbgc = mycursor.fetchall()
        valueavbgc1, valueavbgc2, valueavbgc3, valueavbgc4, valueavbgc5, valueavbgc6, valueavbgc7, valueavbgc8 = valueavbgc
        valueavbgc1 = str(valueavbgc1)
        valueavbgc2 = str(valueavbgc2)
        valueavbgc3 = str(valueavbgc3)
        valueavbgc4 = str(valueavbgc4)  
        valueavbgc5 = str(valueavbgc5)
        valueavbgc6 = str(valueavbgc6)
        valueavbgc7 = str(valueavbgc7)
        valueavbgc8 = str(valueavbgc8)        
        valueavbgc1 = valueavbgc1.strip("(").strip(")").strip(",").strip("'")
        valueavbgc1 = float(valueavbgc1)
        valueavbgc2 = valueavbgc2.strip("(").strip(")").strip(",").strip("'")
        valueavbgc2 = float(valueavbgc2)
        valueavbgc3 = valueavbgc3.strip("(").strip(")").strip(",").strip("'")
        valueavbgc3 = float(valueavbgc3)
        valueavbgc4 = valueavbgc4.strip("(").strip(")").strip(",").strip("'")
        valueavbgc4 = float(valueavbgc4)
        valueavbgc5 = valueavbgc5.strip("(").strip(")").strip(",").strip("'")
        valueavbgc5 = float(valueavbgc5)
        valueavbgc6 = valueavbgc6.strip("(").strip(")").strip(",").strip("'")
        valueavbgc6 = float(valueavbgc6)
        valueavbgc7 = valueavbgc7.strip("(").strip(")").strip(",").strip("'")
        valueavbgc7 = float(valueavbgc7)
        valueavbgc8 = valueavbgc8.strip("(").strip(")").strip(",").strip("'")
        valueavbgc8 = float(valueavbgc8)

        mycursor.execute("SELECT `Bar Value B` FROM vertical_bar_comparison_gtable")
        valuebvbgc = mycursor.fetchall()
        valuebvbgc1, valuebvbgc2, valuebvbgc3, valuebvbgc4, valuebvbgc5, valuebvbgc6, valuebvbgc7, valuebvbgc8 = valuebvbgc
        valuebvbgc1 = str(valuebvbgc1)
        valuebvbgc2 = str(valuebvbgc2)
        valuebvbgc3 = str(valuebvbgc3)
        valuebvbgc4 = str(valuebvbgc4)  
        valuebvbgc5 = str(valuebvbgc5)
        valuebvbgc6 = str(valuebvbgc6)
        valuebvbgc7 = str(valuebvbgc7)
        valuebvbgc8 = str(valuebvbgc8)        
        valuebvbgc1 = valuebvbgc1.strip("(").strip(")").strip(",").strip("'")
        valuebvbgc1 = float(valuebvbgc1)
        valuebvbgc2 = valuebvbgc2.strip("(").strip(")").strip(",").strip("'")
        valuebvbgc2 = float(valuebvbgc2)
        valuebvbgc3 = valuebvbgc3.strip("(").strip(")").strip(",").strip("'")
        valuebvbgc3 = float(valuebvbgc3)
        valuebvbgc4 = valuebvbgc4.strip("(").strip(")").strip(",").strip("'")
        valuebvbgc4 = float(valuebvbgc4)
        valuebvbgc5 = valuebvbgc5.strip("(").strip(")").strip(",").strip("'")
        valuebvbgc5 = float(valuebvbgc5)
        valuebvbgc6 = valuebvbgc6.strip("(").strip(")").strip(",").strip("'")
        valuebvbgc6 = float(valuebvbgc6)
        valuebvbgc7 = valuebvbgc7.strip("(").strip(")").strip(",").strip("'")
        valuebvbgc7 = float(valuebvbgc7)
        valuebvbgc8 = valuebvbgc8.strip("(").strip(")").strip(",").strip("'")
        valuebvbgc8 = float(valuebvbgc8)

        mycursor.execute("SELECT `Min Value` FROM vertical_bar_comparison_gtable")
        minvalue = mycursor.fetchone()
        my_floatvbgc_minvalue = float(minvalue[0])

        mycursor.execute("SELECT `Decimals` FROM vertical_bar_comparison_gtable")
        decvalue = mycursor.fetchone()
        my_floatvbgc_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM vertical_bar_comparison_gtable")
        my_stringvbgc_title = mycursor.fetchone()
        my_stringvbgc_title = str(my_stringvbgc_title)
        my_stringvbgc_title = my_stringvbgc_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM vertical_bar_comparison_gtable")
        my_stringvbgc_subtitle = mycursor.fetchone()
        my_stringvbgc_subtitle = str(my_stringvbgc_subtitle)
        my_stringvbgc_subtitle = my_stringvbgc_subtitle.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Legend Text` FROM vertical_bar_comparison_gtable")
        my_stringvbgc_legendtext = mycursor.fetchall()
        my_stringvbgc_legendtext1 = str(my_stringvbgc_legendtext[0])
        my_stringvbgc_legendtext2 = str(my_stringvbgc_legendtext[1])
        my_stringvbgc_legendtext1 = my_stringvbgc_legendtext1.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgc_legendtext2 = my_stringvbgc_legendtext2.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_vbgc = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_vbgc.type == 'MESH':
                        mesh_name_vbgc = selected_obj_vbgc.name

                        # Check if the selected object has modifiers
                        if selected_obj_vbgc.modifiers:
                                modifier_name_vbgc = selected_obj_vbgc.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_71"] = my_floatvbgc_numberofbars
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_2"] = my_stringvbgc_bartext1
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_42"] = my_stringvbgc_bartext2
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_3"] = my_stringvbgc_bartext3
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_45"] = my_stringvbgc_bartext4
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_4"] = my_stringvbgc_bartext5
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_47"] = my_stringvbgc_bartext6
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_5"] = my_stringvbgc_bartext7
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_49"] = my_stringvbgc_bartext8
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_10"] = my_floatvbgc_minvalue
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_11"] = my_floatvbgc_maxvalue
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_12"] = my_floatvbgc_decvalue
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_14"] = valueavbgc1
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_41"] = valueavbgc2
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_15"] = valueavbgc3
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_44"] = valueavbgc4
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_16"] = valueavbgc5
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_48"] = valueavbgc6
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_17"] = valueavbgc7
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_50"] = valueavbgc8
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_57"] = valuebvbgc1
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_58"] = valuebvbgc2
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_59"] = valuebvbgc3
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_64"] = valuebvbgc4
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_60"] = valuebvbgc5
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_61"] = valuebvbgc6
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_62"] = valuebvbgc7
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_63"] = valuebvbgc8
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_7"] = my_stringvbgc_title
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_8"] = my_stringvbgc_subtitle
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_70"] = my_stringvbgc_legendtext1
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_69"] = my_stringvbgc_legendtext2


                                print(f"Set modifier input for object '{mesh_name_vbgc}' and modifier '{modifier_name_vbgc}'.")
                        else:
                                print(f"Selected object '{mesh_name_vbgc}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorVBGMsql(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorvbgmsql"
    bl_label = "Import MySQL Data"
    
    def execute(self, context):
        layout = self.layout
        scene = context.scene
        mytool = scene.my_tool
        
        mydb = mysql.connector.connect(
        host= mytool.my_stringhost,
        user= mytool.my_stringuser,
        password= mytool.my_stringpassword,
        database= mytool.my_stringvertical_bar_graph_multiple
        )
            
        mycursor = mydb.cursor(buffered=True)

        
        mycursor.execute("SELECT `Number of bars (1-8)` FROM vertical_bar_multiple_gtable")
        numberofbarsvbgm = mycursor.fetchone()
        my_floatvbgm_numberofbars = int(numberofbarsvbgm[0])

        mycursor.execute("SELECT `Number of vertical bars (3-4)` FROM vertical_bar_multiple_gtable")
        numberofverticalbarsvbgm = mycursor.fetchone()
        my_floatvbgm_numberofverticalbars = int(numberofverticalbarsvbgm[0])
        
        mycursor.execute("SELECT `Bar Text` FROM vertical_bar_multiple_gtable")
        my_stringvbgm_bartext = mycursor.fetchall()
        my_stringvbgm_bartext1 = str(my_stringvbgm_bartext[0])
        my_stringvbgm_bartext2 = str(my_stringvbgm_bartext[1])
        my_stringvbgm_bartext3 = str(my_stringvbgm_bartext[2])
        my_stringvbgm_bartext4 = str(my_stringvbgm_bartext[3])
        my_stringvbgm_bartext5 = str(my_stringvbgm_bartext[4])
        my_stringvbgm_bartext6 = str(my_stringvbgm_bartext[5])
        my_stringvbgm_bartext7 = str(my_stringvbgm_bartext[6])
        my_stringvbgm_bartext8 = str(my_stringvbgm_bartext[7])
        my_stringvbgm_bartext1 = my_stringvbgm_bartext1.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgm_bartext2 = my_stringvbgm_bartext2.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgm_bartext3 = my_stringvbgm_bartext3.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgm_bartext4 = my_stringvbgm_bartext4.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgm_bartext5 = my_stringvbgm_bartext5.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgm_bartext6 = my_stringvbgm_bartext6.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgm_bartext7 = my_stringvbgm_bartext7.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgm_bartext8 = my_stringvbgm_bartext8.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Max Value` FROM vertical_bar_multiple_gtable")
        maxvalue = mycursor.fetchone()
        my_floatvbgm_maxvalue = float(maxvalue[0])

        mycursor.execute("SELECT `Bar Value A` FROM vertical_bar_multiple_gtable")
        valueavbgm = mycursor.fetchall()
        valueavbgm1, valueavbgm2, valueavbgm3, valueavbgm4, valueavbgm5, valueavbgm6, valueavbgm7, valueavbgm8 = valueavbgm
        valueavbgm1 = str(valueavbgm1)
        valueavbgm2 = str(valueavbgm2)
        valueavbgm3 = str(valueavbgm3)
        valueavbgm4 = str(valueavbgm4)  
        valueavbgm5 = str(valueavbgm5)
        valueavbgm6 = str(valueavbgm6)
        valueavbgm7 = str(valueavbgm7)
        valueavbgm8 = str(valueavbgm8)        
        valueavbgm1 = valueavbgm1.strip("(").strip(")").strip(",").strip("'")
        valueavbgm1 = float(valueavbgm1)
        valueavbgm2 = valueavbgm2.strip("(").strip(")").strip(",").strip("'")
        valueavbgm2 = float(valueavbgm2)
        valueavbgm3 = valueavbgm3.strip("(").strip(")").strip(",").strip("'")
        valueavbgm3 = float(valueavbgm3)
        valueavbgm4 = valueavbgm4.strip("(").strip(")").strip(",").strip("'")
        valueavbgm4 = float(valueavbgm4)
        valueavbgm5 = valueavbgm5.strip("(").strip(")").strip(",").strip("'")
        valueavbgm5 = float(valueavbgm5)
        valueavbgm6 = valueavbgm6.strip("(").strip(")").strip(",").strip("'")
        valueavbgm6 = float(valueavbgm6)
        valueavbgm7 = valueavbgm7.strip("(").strip(")").strip(",").strip("'")
        valueavbgm7 = float(valueavbgm7)
        valueavbgm8 = valueavbgm8.strip("(").strip(")").strip(",").strip("'")
        valueavbgm8 = float(valueavbgm8)

        mycursor.execute("SELECT `Bar Value B` FROM vertical_bar_multiple_gtable")
        valuebvbgm = mycursor.fetchall()
        valuebvbgm1, valuebvbgm2, valuebvbgm3, valuebvbgm4, valuebvbgm5, valuebvbgm6, valuebvbgm7, valuebvbgm8 = valuebvbgm
        valuebvbgm1 = str(valuebvbgm1)
        valuebvbgm2 = str(valuebvbgm2)
        valuebvbgm3 = str(valuebvbgm3)
        valuebvbgm4 = str(valuebvbgm4)  
        valuebvbgm5 = str(valuebvbgm5)
        valuebvbgm6 = str(valuebvbgm6)
        valuebvbgm7 = str(valuebvbgm7)
        valuebvbgm8 = str(valuebvbgm8)        
        valuebvbgm1 = valuebvbgm1.strip("(").strip(")").strip(",").strip("'")
        valuebvbgm1 = float(valuebvbgm1)
        valuebvbgm2 = valuebvbgm2.strip("(").strip(")").strip(",").strip("'")
        valuebvbgm2 = float(valuebvbgm2)
        valuebvbgm3 = valuebvbgm3.strip("(").strip(")").strip(",").strip("'")
        valuebvbgm3 = float(valuebvbgm3)
        valuebvbgm4 = valuebvbgm4.strip("(").strip(")").strip(",").strip("'")
        valuebvbgm4 = float(valuebvbgm4)
        valuebvbgm5 = valuebvbgm5.strip("(").strip(")").strip(",").strip("'")
        valuebvbgm5 = float(valuebvbgm5)
        valuebvbgm6 = valuebvbgm6.strip("(").strip(")").strip(",").strip("'")
        valuebvbgm6 = float(valuebvbgm6)
        valuebvbgm7 = valuebvbgm7.strip("(").strip(")").strip(",").strip("'")
        valuebvbgm7 = float(valuebvbgm7)
        valuebvbgm8 = valuebvbgm8.strip("(").strip(")").strip(",").strip("'")
        valuebvbgm8 = float(valuebvbgm8)

        mycursor.execute("SELECT `Bar Value C` FROM vertical_bar_multiple_gtable")
        valuecvbgm = mycursor.fetchall()
        valuecvbgm1, valuecvbgm2, valuecvbgm3, valuecvbgm4, valuecvbgm5, valuecvbgm6, valuecvbgm7, valuecvbgm8 = valuecvbgm
        valuecvbgm1 = str(valuecvbgm1)
        valuecvbgm2 = str(valuecvbgm2)
        valuecvbgm3 = str(valuecvbgm3)
        valuecvbgm4 = str(valuecvbgm4)  
        valuecvbgm5 = str(valuecvbgm5)
        valuecvbgm6 = str(valuecvbgm6)
        valuecvbgm7 = str(valuecvbgm7)
        valuecvbgm8 = str(valuecvbgm8)        
        valuecvbgm1 = valuecvbgm1.strip("(").strip(")").strip(",").strip("'")
        valuecvbgm1 = float(valuecvbgm1)
        valuecvbgm2 = valuecvbgm2.strip("(").strip(")").strip(",").strip("'")
        valuecvbgm2 = float(valuecvbgm2)
        valuecvbgm3 = valuecvbgm3.strip("(").strip(")").strip(",").strip("'")
        valuecvbgm3 = float(valuecvbgm3)
        valuecvbgm4 = valuecvbgm4.strip("(").strip(")").strip(",").strip("'")
        valuecvbgm4 = float(valuecvbgm4)
        valuecvbgm5 = valuecvbgm5.strip("(").strip(")").strip(",").strip("'")
        valuecvbgm5 = float(valuecvbgm5)
        valuecvbgm6 = valuecvbgm6.strip("(").strip(")").strip(",").strip("'")
        valuecvbgm6 = float(valuecvbgm6)
        valuecvbgm7 = valuecvbgm7.strip("(").strip(")").strip(",").strip("'")
        valuecvbgm7 = float(valuecvbgm7)
        valuecvbgm8 = valuecvbgm8.strip("(").strip(")").strip(",").strip("'")
        valuecvbgm8 = float(valuecvbgm8)

        mycursor.execute("SELECT `Bar Value D` FROM vertical_bar_multiple_gtable")
        valuedvbgm = mycursor.fetchall()
        valuedvbgm1, valuedvbgm2, valuedvbgm3, valuedvbgm4, valuedvbgm5, valuedvbgm6, valuedvbgm7, valuedvbgm8 = valuedvbgm
        valuedvbgm1 = str(valuedvbgm1)
        valuedvbgm2 = str(valuedvbgm2)
        valuedvbgm3 = str(valuedvbgm3)
        valuedvbgm4 = str(valuedvbgm4)  
        valuedvbgm5 = str(valuedvbgm5)
        valuedvbgm6 = str(valuedvbgm6)
        valuedvbgm7 = str(valuedvbgm7)
        valuedvbgm8 = str(valuedvbgm8)        
        valuedvbgm1 = valuedvbgm1.strip("(").strip(")").strip(",").strip("'")
        valuedvbgm1 = float(valuedvbgm1)
        valuedvbgm2 = valuedvbgm2.strip("(").strip(")").strip(",").strip("'")
        valuedvbgm2 = float(valuedvbgm2)
        valuedvbgm3 = valuedvbgm3.strip("(").strip(")").strip(",").strip("'")
        valuedvbgm3 = float(valuedvbgm3)
        valuedvbgm4 = valuedvbgm4.strip("(").strip(")").strip(",").strip("'")
        valuedvbgm4 = float(valuedvbgm4)
        valuedvbgm5 = valuedvbgm5.strip("(").strip(")").strip(",").strip("'")
        valuedvbgm5 = float(valuedvbgm5)
        valuedvbgm6 = valuedvbgm6.strip("(").strip(")").strip(",").strip("'")
        valuedvbgm6 = float(valuedvbgm6)
        valuedvbgm7 = valuedvbgm7.strip("(").strip(")").strip(",").strip("'")
        valuedvbgm7 = float(valuedvbgm7)
        valuedvbgm8 = valuedvbgm8.strip("(").strip(")").strip(",").strip("'")
        valuedvbgm8 = float(valuedvbgm8)

        mycursor.execute("SELECT `Min Value` FROM vertical_bar_multiple_gtable")
        minvalue = mycursor.fetchone()
        my_floatvbgm_minvalue = float(minvalue[0])

        mycursor.execute("SELECT `Decimals` FROM vertical_bar_multiple_gtable")
        decvalue = mycursor.fetchone()
        my_floatvbgm_decvalue = int(decvalue[0])

        mycursor.execute("SELECT `TITLE (in caps)` FROM vertical_bar_multiple_gtable")
        my_stringvbgm_title = mycursor.fetchone()
        my_stringvbgm_title = str(my_stringvbgm_title)
        my_stringvbgm_title = my_stringvbgm_title.strip("(").strip(")").strip(",").strip("'")

        mycursor.execute("SELECT `Subtitle` FROM vertical_bar_multiple_gtable")
        my_stringvbgm_subtitle = mycursor.fetchone()
        my_stringvbgm_subtitle = str(my_stringvbgm_subtitle)
        my_stringvbgm_subtitle = my_stringvbgm_subtitle.strip("(").strip(")").strip(",").strip("'")
        
        mycursor.execute("SELECT `Legend Text` FROM vertical_bar_multiple_gtable")
        my_stringvbgm_legendtext = mycursor.fetchall()
        my_stringvbgm_legendtext1 = str(my_stringvbgm_legendtext[0])
        my_stringvbgm_legendtext2 = str(my_stringvbgm_legendtext[1])
        my_stringvbgm_legendtext3 = str(my_stringvbgm_legendtext[2])
        my_stringvbgm_legendtext4 = str(my_stringvbgm_legendtext[3])
        my_stringvbgm_legendtext1 = my_stringvbgm_legendtext1.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgm_legendtext2 = my_stringvbgm_legendtext2.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgm_legendtext3 = my_stringvbgm_legendtext3.strip("(").strip(")").strip(",").strip("'")
        my_stringvbgm_legendtext4 = my_stringvbgm_legendtext4.strip("(").strip(")").strip(",").strip("'")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_vbgm = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_vbgm.type == 'MESH':
                        mesh_name_vbgm = selected_obj_vbgm.name

                        # Check if the selected object has modifiers
                        if selected_obj_vbgm.modifiers:
                                modifier_name_vbgm = selected_obj_vbgm.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_71"] = my_floatvbgm_numberofbars
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_2"] = my_stringvbgm_bartext1
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_42"] = my_stringvbgm_bartext2
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_3"] = my_stringvbgm_bartext3
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_45"] = my_stringvbgm_bartext4
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_4"] = my_stringvbgm_bartext5
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_47"] = my_stringvbgm_bartext6
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_5"] = my_stringvbgm_bartext7
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_49"] = my_stringvbgm_bartext8
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_10"] = my_floatvbgm_minvalue
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_11"] = my_floatvbgm_maxvalue
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_12"] = my_floatvbgm_decvalue

                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_14"] = valueavbgm1
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_41"] = valueavbgm2
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_15"] = valueavbgm3
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_44"] = valueavbgm4
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_16"] = valueavbgm5
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_48"] = valueavbgm6
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_17"] = valueavbgm7
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_50"] = valueavbgm8

                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_57"] = valuebvbgm1
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_58"] = valuebvbgm2
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_59"] = valuebvbgm3
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_64"] = valuebvbgm4
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_60"] = valuebvbgm5
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_61"] = valuebvbgm6
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_62"] = valuebvbgm7
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_63"] = valuebvbgm8

                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_0"] = valuecvbgm1
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_2"] = valuecvbgm2
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_4"] = valuecvbgm3
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_6"] = valuecvbgm4
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_8"] = valuecvbgm5
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_10"] = valuecvbgm6
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_12"] = valuecvbgm7
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_14"] = valuecvbgm8

                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_1"] = valuedvbgm1
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_3"] = valuedvbgm2
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_5"] = valuedvbgm3
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_7"] = valuedvbgm4
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_9"] = valuedvbgm5
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_11"] = valuedvbgm6
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_13"] = valuedvbgm7
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_15"] = valuedvbgm8

                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_7"] = my_stringvbgm_title
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_8"] = my_stringvbgm_subtitle
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_70"] = my_stringvbgm_legendtext1
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_69"] = my_stringvbgm_legendtext2
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_43"] = my_stringvbgm_legendtext3
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_44"] = my_stringvbgm_legendtext4


                                print(f"Set modifier input for object '{mesh_name_vbgm}' and modifier '{modifier_name_vbgm}'.")
                        else:
                                print(f"Selected object '{mesh_name_vbgm}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}

class MyoperatorCGcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorcgcsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full = bpy.path.abspath(mytool.my_path)
        with open(filepath_full) as f:
            readout = list(csv.reader(f))
            gregory = float(readout[1][0])
            mallory = float(readout[1][1])
            olatunji = float(readout[1][2])
            titlecirclegraph = str(readout[1][3])
            subtitlecirclegraph = str(readout[1][4])
            descriptioncirclegraph = str(readout[1][5])
            gregorypercentage = float(gregory/olatunji)
            
            # Ensure an object is selected
        if bpy.context.selected_objects:
            selected_obj = bpy.context.active_object  # Get the active (selected) object

            if selected_obj.type == 'MESH':
                mesh_name = selected_obj.name

                # Check if the selected object has modifiers
                if selected_obj.modifiers:
                    modifier_name = selected_obj.modifiers.active.name  # Get the name of the active modifier



                    selected_obj.modifiers[modifier_name]["Input_11"] = olatunji
                    selected_obj.modifiers[modifier_name]["Input_10"] = mallory
                    selected_obj.modifiers[modifier_name]["Input_2"] = gregorypercentage
                    selected_obj.modifiers[modifier_name]["Input_22"] = titlecirclegraph
                    selected_obj.modifiers[modifier_name]["Input_23"] = subtitlecirclegraph
                    selected_obj.modifiers[modifier_name]["Input_16"] = descriptioncirclegraph
        

                    print(f"Set modifier input for object '{mesh_name}' and modifier '{modifier_name}'.")
                else:
                    print(f"Selected object '{mesh_name}' has no modifiers.")
            else:
                print("Selected object is not a mesh.")
        else:
            print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorCGCcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorcgccsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full23c = bpy.path.abspath(mytool.my_path23c)
        with open(filepath_full23c) as f:
            readout = list(csv.reader(f))
            ncg23c = int(readout[1][0])
            wta23c = str(readout[1][1])
            wtb23c = str(readout[2][1])
            try:
                wtc23c = str(readout[3][1])
            except IndexError:
                wtc23c = "0"  # set default value to 0 if missing
            psa23c = float(readout[1][2])
            psb23c = float(readout[2][2])
            try:
                psc23c = str(readout[3][2])
            except IndexError:
                psc23c = "0"  # set default value to 0 if missing
            minv23c = float(readout[1][3])
            maxv23c = float(readout[1][4])
            title23c = str(readout[1][5])
            subtitle23c = str(readout[1][6])
            desc23c = str(readout[1][7])
            wtpa23c = float(float(psa23c)/maxv23c)
            wtpb23c = float(float(psb23c)/maxv23c)
            if psc23c == 0:
                wtpc23c = 0.0  # avoid division by zero
            else:
                wtpc23c = float(float(psc23c)/maxv23c)

        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_23cg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_23cg.type == 'MESH':
                        mesh_name_23cg = selected_obj_23cg.name

                        # Check if the selected object has modifiers
                        if selected_obj_23cg.modifiers:
                                modifier_name_23cg = selected_obj_23cg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_31"] = ncg23c
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_39"] = wta23c
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_40"] = wtb23c
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_38"] = wtc23c
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_2"] = wtpa23c
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_41"] = wtpb23c
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_42"] = wtpc23c
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_10"] = minv23c
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_11"] = maxv23c
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_22"] = title23c
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_23"] = subtitle23c
                                selected_obj_23cg.modifiers[modifier_name_23cg]["Input_16"] = desc23c

                                print(f"Set modifier input for object '{mesh_name_23cg}' and modifier '{modifier_name_23cg}'.")
                        else:
                                print(f"Selected object '{mesh_name_23cg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorCANDLEcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorcandlecsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        candle_object = bpy.context.view_layer.objects.active
        candle_object_name = candle_object.name
        filepath_fullcandle = bpy.path.abspath(mytool.my_pathcandle)
        with open(filepath_fullcandle) as f:
            readout = list(csv.reader(f))
            npcandleg = int(readout[1][0])
            minvcandleg = float(readout[1][6])
            maxvcandleg = float(readout[1][7])
            decimalcandleg = int(readout[1][8])
            rncandleg = int(readout[1][9])

            num_elementspointhigh = 32
            pointhigh_candleg = []
            for i in range(1, num_elementspointhigh+1):
                if i < len(readout) and 1 < len(readout[i]):
                    valueph = readout[i][1]
                else:
                    valueph = 0.0  # or some other default value
                if valueph is None or valueph == "":
                    valueph = 0.0
                pointhigh_candleg.append(float(valueph))
                
            num_elementspointopen = 32
            pointopen_candleg = []
            for i in range(1, num_elementspointopen+1):
                if i < len(readout) and 2 < len(readout[i]):
                    valuepo = readout[i][2]
                else:
                    valuepo = 0.0  # or some other default value
                if valuepo is None or valuepo == "":
                    valuepo = 0.0
                pointopen_candleg.append(float(valuepo))

            num_elementspointclose = 32
            pointclose_candleg = []
            for i in range(1, num_elementspointclose+1):
                if i < len(readout) and 3 < len(readout[i]):
                    valuepc = readout[i][3]
                else:
                    valuepc = 0.0  # or some other default value
                if valuepc is None or valuepc == "":
                    valuepc = 0.0
                pointclose_candleg.append(float(valuepc))

            num_elementspointlow = 32
            pointlow_candleg = []
            for i in range(1, num_elementspointlow+1):
                if i < len(readout) and 4 < len(readout[i]):
                    valuepl = readout[i][4]
                else:
                    valuepl = 0.0  # or some other default value
                if valuepl is None or valuepl == "":
                    valuepl = 0.0
                pointlow_candleg.append(float(valuepl))

            num_elementstexts = 32
            texts_candleg = []
            for i in range(1, num_elementstexts+1):
                if i < len(readout) and 5 < len(readout[i]):
                    valuet = readout[i][5]
                else:
                    valuet = ""  # or some other default value
                if valuet is None:
                    valuet = ""
                texts_candleg.append(str(valuet))

                
            titlecandleg = str(readout[1][10])
            subtitlecandleg = str(readout[1][11])

            
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_3"] = npcandleg
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_12"] = minvcandleg
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_13"] = maxvcandleg
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_14"] = decimalcandleg
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_15"] = rncandleg
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_4"] = texts_candleg[0]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_5"] = texts_candleg[1]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_6"] = texts_candleg[2]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_7"] = texts_candleg[3]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_8"] = texts_candleg[4]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_9"] = texts_candleg[5]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_10"] = texts_candleg[6]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_11"] = texts_candleg[7]
        
        cube_objecttextcandle = bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]
        for i in range(8, 32):
            input_index = i - 8 + 71
            input_name = f"Input_{input_index:02d}"
            cube_objecttextcandle[input_name] = texts_candleg[i]
        
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_38"] = pointhigh_candleg[0]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_103"] = pointhigh_candleg[1] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_107"] = pointhigh_candleg[2]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_168"] = pointhigh_candleg[3] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_172"] = pointhigh_candleg[4]          
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_176"] = pointhigh_candleg[5]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_99"] = pointhigh_candleg[6]
        for i in range(7, 32):
            input_numpointhigh_candleg = 180 + (i - 7) * 4
            bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_" + str(input_numpointhigh_candleg)] = pointhigh_candleg[i]  
            
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_97"] = pointopen_candleg[0]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_104"] = pointopen_candleg[1] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_108"] = pointopen_candleg[2]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_169"] = pointopen_candleg[3] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_173"] = pointopen_candleg[4]          
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_177"] = pointopen_candleg[5]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_100"] = pointopen_candleg[6]
        for i in range(7, 32):
            input_numpointopen_candleg = 181 + (i - 7) * 4
            bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_" + str(input_numpointopen_candleg)] = pointopen_candleg[i]
            
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_98"] = pointclose_candleg[0]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_105"] = pointclose_candleg[1] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_109"] = pointclose_candleg[2]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_170"] = pointclose_candleg[3] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_174"] = pointclose_candleg[4]          
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_178"] = pointclose_candleg[5]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_101"] = pointclose_candleg[6]
        for i in range(7, 32):
            input_numpointclose_candleg = 182 + (i - 7) * 4
            bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_" + str(input_numpointclose_candleg)] = pointclose_candleg[i]
            
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_96"] = pointlow_candleg[0]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_106"] = pointlow_candleg[1] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_110"] = pointlow_candleg[2]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_171"] = pointlow_candleg[3] 
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_175"] = pointlow_candleg[4]          
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_179"] = pointlow_candleg[5]
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_102"] = pointlow_candleg[6]
        for i in range(7, 32):
            input_numpointlow_candleg = 183 + (i - 7) * 4
            bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_" + str(input_numpointlow_candleg)] = pointlow_candleg[i]        
    
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_23"] = titlecandleg
        bpy.data.objects[candle_object_name].modifiers["GeometryNodes"]["Input_22"] = subtitlecandleg
        
        bpy.context.object.data.update()
        return {'FINISHED'}  
    
class MyoperatorPGCcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorpgccsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full23p = bpy.path.abspath(mytool.my_path23p)
        with open(filepath_full23p) as f:
            readout = list(csv.reader(f))
            ncg23p = int(readout[1][0])
            wta23p = str(readout[1][1])
            wtb23p = str(readout[2][1])
            try:
                wtc23p = str(readout[3][1])
            except IndexError:
                wtc23p = "0"  # set default value to 0 if missing
            psa23p = float(readout[1][2])
            psb23p = float(readout[2][2])
            try:
                psc23p = str(readout[3][2])
            except IndexError:
                psc23p = "0"  # set default value to 0 if missing
            minv23p = float(readout[1][3])
            maxv23p = float(readout[1][4])
            title23p = str(readout[1][5])
            subtitle23p = str(readout[1][6])
            desc23p = str(readout[1][7])
            wtpa23p = float(psa23p/maxv23p)
            wtpb23p = float(psb23p/maxv23p)
            if psc23p == 0:
                wtpc23p = 0.0  # avoid division by zero
            else:
                wtpc23p = float(float(psc23p)/maxv23p)
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_23pg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_23pg.type == 'MESH':
                        mesh_name_23pg = selected_obj_23pg.name

                        # Check if the selected object has modifiers
                        if selected_obj_23pg.modifiers:
                                modifier_name_23pg = selected_obj_23pg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_26"] = ncg23p
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_31"] = wta23p
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_32"] = wtb23p
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_33"] = wtc23p
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_2"] = wtpa23p
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_27"] = wtpb23p
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_28"] = wtpc23p
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_10"] = minv23p
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_11"] = maxv23p
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_15"] = title23p
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_17"] = subtitle23p
                                selected_obj_23pg.modifiers[modifier_name_23pg]["Input_19"] = desc23p

                                print(f"Set modifier input for object '{mesh_name_23pg}' and modifier '{modifier_name_23pg}'.")
                        else:
                                print(f"Selected object '{mesh_name_23pg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorPGcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorpgcsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full2 = bpy.path.abspath(mytool.my_pathpie)
        with open(filepath_full2) as f:
            readout = list(csv.reader(f))
            gregorypg = float(readout[1][0])
            mallorypg = float(readout[1][1])
            olatunjipg = float(readout[1][2])
            titlepg = str(readout[1][3])
            subtitlepg = str(readout[1][4])
            percentpg = str(readout[1][5])
            gregorypercentagepg = float(gregorypg/olatunjipg)
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_pg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_pg.type == 'MESH':
                        mesh_name_pg = selected_obj_pg.name

                        # Check if the selected object has modifiers
                        if selected_obj_pg.modifiers:
                                modifier_name_pg = selected_obj_pg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_pg.modifiers[modifier_name_pg]["Input_2"] = gregorypercentagepg
                                selected_obj_pg.modifiers[modifier_name_pg]["Input_10"] = mallorypg
                                selected_obj_pg.modifiers[modifier_name_pg]["Input_11"] = olatunjipg
                                selected_obj_pg.modifiers[modifier_name_pg]["Input_15"] = titlepg
                                selected_obj_pg.modifiers[modifier_name_pg]["Input_17"] = subtitlepg
                                selected_obj_pg.modifiers[modifier_name_pg]["Input_19"] = percentpg

                                print(f"Set modifier input for object '{mesh_name_pg}' and modifier '{modifier_name_pg}'.")
                        else:
                                print(f"Selected object '{mesh_name_pg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorCGgenai(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorcggenai"
    bl_label = "Import Gen AI Data"

    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        api_key_file_path = bpy.path.abspath(mytool.my_pathapi_key)
        filepath_fullcircleaisiteurl = bpy.path.abspath(mytool.my_stringsiteurl)
        filepath_fullcircleaiappname = bpy.path.abspath(mytool.my_stringappname)
        filepath_fullcircleaiapikey = read_api_key(api_key_file_path)
        
        if not filepath_fullcircleaiapikey:
            print("Failed to read API key. Aborting operation.")
            return {'CANCELLED'}
        
        filepath_fullcircleaimodelname1 = bpy.path.abspath(mytool.my_stringmodelname1)
        filepath_fullcircleaimodelname2 = bpy.path.abspath(mytool.my_stringmodelname2)
        filepath_fullcircleaiinput1 = bpy.path.abspath(mytool.my_stringcirclegengraph1)
        filepath_fullcircleaiinput2 = bpy.path.abspath(mytool.my_stringcirclegengraph2)
        filepath_fullcircleaiinput3 = bpy.path.abspath(mytool.my_stringcirclegengraph3)
        filepath_fullurl = bpy.path.abspath(mytool.my_stringresponseurl)

        sub_question = filepath_fullcircleaiinput1
        main_question = filepath_fullcircleaiinput2.format(sub_question)

        question = f"{main_question} {sub_question}"

        # Replace with your actual values
        YOUR_SITE_URL = filepath_fullcircleaisiteurl
        YOUR_APP_NAME = filepath_fullcircleaiappname
        YOUR_API_KEY = filepath_fullcircleaiapikey

        response = requests.post(
            url=filepath_fullurl,
            headers={
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": YOUR_APP_NAME,
                "Authorization": f"Bearer {YOUR_API_KEY}",  # Include your API key in the Authorization header
            },
            data=json.dumps({
                "model": filepath_fullcircleaimodelname1,
                "messages": [
                    {"role": "user", "content": question}
                ]
            })
        )

        # Parse the JSON response
        response_json = response.json()
        
        # Print the response for debugging
        print("Response JSON:", response_json)

        # Extract the answer if available
        answer_circle = response_json.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

        # Print the answer for debugging
        print("Answer Circle:", answer_circle)
        
        relevant_info = answer_circle
        
        if relevant_info:
            # Extract necessary details from relevant_info
            # Modify the construction of the new question based on the extracted information
            new_question = f"{filepath_fullcircleaiinput3}. Here's the text: {relevant_info}"

            # Make another API request with the new question
            new_response = requests.post(
                url=filepath_fullurl,
                headers={
                    "HTTP-Referer": YOUR_SITE_URL,
                    "X-Title": YOUR_APP_NAME,
                    "Authorization": f"Bearer {YOUR_API_KEY}",
                },
                data=json.dumps({
                    "model": filepath_fullcircleaimodelname2,
                    "messages": [
                        {"role": "user", "content": new_question}
                    ]
                })
            )

            # Parse the JSON response for the new question
            new_response_json = new_response.json()
            
            # Extract the answer if available
            answer_circle1 = new_response_json.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

            # Print the answer for debugging
            print("Answer Circle1:", answer_circle1)

            # Split the answer into variables based on commas
            answer_variables_circle = answer_circle1.split(';')

            # Now you can use the individual variables as needed
            title_variable_circle = answer_variables_circle[0].replace("Step A:", "").strip().upper()
            subtitle_variable_circle = answer_variables_circle[1].replace("Step B:", "").strip()
            value_variable_circle = re.sub(r"[^0-9.]", "", answer_variables_circle[2].replace("Step C:", "").strip())

            # Check if the last character is a period
            if value_variable_circle.endswith('.'):
                # Remove the last character
                value_variable_circle = value_variable_circle[:-1]

            # Check if the string starts with a period
            if value_variable_circle.startswith('.'):
                # Remove the first character
                value_variable_circle = value_variable_circle[1:]

            # Print or use the variables as needed
            print(f"Title: {title_variable_circle}, Subtitle: {subtitle_variable_circle}, Value: {value_variable_circle}")

            # Ensure an object is selected
            if bpy.context.selected_objects:
                    selected_obj_cg = bpy.context.active_object  # Get the active (selected) object

                    if selected_obj_cg.type == 'MESH':
                            mesh_name_cg = selected_obj_cg.name

                            # Check if the selected object has modifiers
                            if selected_obj_cg.modifiers:
                                    modifier_name_cg = selected_obj_cg.modifiers.active.name  # Get the name of the active modifier

                                    selected_obj_cg.modifiers[modifier_name_cg]["Input_22"] = title_variable_circle
                                    selected_obj_cg.modifiers[modifier_name_cg]["Input_23"] = subtitle_variable_circle
                                    maxv_circle = selected_obj_cg.modifiers[modifier_name_cg]["Input_11"] 
                                    selected_obj_cg.modifiers[modifier_name_cg]["Input_2"] = float(value_variable_circle) / maxv_circle


                                    print(f"Set modifier input for object '{mesh_name_cg}' and modifier '{modifier_name_cg}'.")
                            else:
                                    print(f"Selected object '{mesh_name_cg}' has no modifiers.")
                    else:
                            print("Selected object is not a mesh.")
            else:
                    print("No object selected.")
            bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorPGgenai(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorpggenai"
    bl_label = "Import Gen AI Data"

    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        api_key_file_path = bpy.path.abspath(mytool.my_pathapi_key)
        filepath_fullpieaisiteurl = bpy.path.abspath(mytool.my_stringsiteurl)
        filepath_fullpieaiappname = bpy.path.abspath(mytool.my_stringappname)
        filepath_fullpieaiapikey = read_api_key(api_key_file_path)
        
        if not filepath_fullpieaiapikey:
            print("Failed to read API key. Aborting operation.")
            return {'CANCELLED'}
        filepath_fullpieaimodelname1 = bpy.path.abspath(mytool.my_stringmodelname1)
        filepath_fullpieaimodelname2 = bpy.path.abspath(mytool.my_stringmodelname2)
        filepath_fullpieaiinput1 = bpy.path.abspath(mytool.my_stringpiegengraph1)
        filepath_fullpieaiinput2 = bpy.path.abspath(mytool.my_stringpiegengraph2)
        filepath_fullpieaiinput3 = bpy.path.abspath(mytool.my_stringpiegengraph3)
        filepath_fullurl = bpy.path.abspath(mytool.my_stringresponseurl)

        sub_questionpg = filepath_fullpieaiinput1
        main_questionpg = filepath_fullpieaiinput2.format(sub_questionpg)

        question = f"{main_questionpg} {sub_questionpg}"

        # Replace with your actual values
        YOUR_SITE_URL = filepath_fullpieaisiteurl
        YOUR_APP_NAME = filepath_fullpieaiappname
        YOUR_API_KEY = filepath_fullpieaiapikey

        response = requests.post(
            url=filepath_fullurl,
            headers={
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": YOUR_APP_NAME,
                "Authorization": f"Bearer {YOUR_API_KEY}",  # Include your API key in the Authorization header
            },
            data=json.dumps({
                "model": filepath_fullpieaimodelname1,
                "messages": [
                    {"role": "user", "content": question}
                ]
            })
        )

        # Parse the JSON response
        response_json = response.json()
        
        # Print the response for debugging
        print("Response JSON:", response_json)

        # Extract the answer if available
        answer_pie = response_json.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

        # Print the answer for debugging
        print("Answer Pie:", answer_pie)
        
        relevant_infopg = answer_pie
        
        if relevant_infopg:
            # Extract necessary details from relevant_infopg
            # Modify the construction of the new question based on the extracted information
            new_questionpg = f"{filepath_fullpieaiinput3}. Here's the text: {relevant_infopg}"

            # Make another API request with the new question
            new_response = requests.post(
                url=filepath_fullurl,
                headers={
                    "HTTP-Referer": YOUR_SITE_URL,
                    "X-Title": YOUR_APP_NAME,
                    "Authorization": f"Bearer {YOUR_API_KEY}",
                },
                data=json.dumps({
                    "model": filepath_fullpieaimodelname2,
                    "messages": [
                        {"role": "user", "content": new_questionpg}
                    ]
                })
            )

            # Parse the JSON response for the new question
            new_response_json = new_response.json()
            
            # Extract the answer if available
            answer_pie1 = new_response_json.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

            # Print the answer for debugging
            print("Answer Pie1:", answer_pie1)

            # Split the answer into variables based on commas
            answer_variables_pie = answer_pie1.split(';')

            # Now you can use the individual variables as needed
            title_variable_pie = answer_variables_pie[0].replace("Step A:", "").strip().upper()
            subtitle_variable_pie = answer_variables_pie[1].replace("Step B:", "").strip()
            value_variable_pie = re.sub(r"[^0-9.]", "", answer_variables_pie[2].replace("Step C:", "").strip())

            # Check if the last character is a period
            if value_variable_pie.endswith('.'):
                # Remove the last character
                value_variable_pie = value_variable_pie[:-1]

            # Check if the string starts with a period
            if value_variable_pie.startswith('.'):
                # Remove the first character
                value_variable_pie = value_variable_pie[1:]

            # Print or use the variables as needed
            print(f"Title: {title_variable_pie}, Subtitle: {subtitle_variable_pie}, Value: {value_variable_pie}")

            # Ensure an object is selected
            if bpy.context.selected_objects:
                    selected_obj_pg = bpy.context.active_object  # Get the active (selected) object

                    if selected_obj_pg.type == 'MESH':
                            mesh_name_pg = selected_obj_pg.name

                            # Check if the selected object has modifiers
                            if selected_obj_pg.modifiers:
                                    modifier_name_pg = selected_obj_pg.modifiers.active.name  # Get the name of the active modifier

                                    selected_obj_pg.modifiers[modifier_name_pg]["Input_15"] = title_variable_pie
                                    selected_obj_pg.modifiers[modifier_name_pg]["Input_17"] = subtitle_variable_pie
                                    maxv_pie = selected_obj_pg.modifiers[modifier_name_pg]["Input_11"] 
                                    selected_obj_pg.modifiers[modifier_name_pg]["Input_2"] = float(value_variable_pie) / maxv_pie


                                    print(f"Set modifier input for object '{mesh_name_pg}' and modifier '{modifier_name_pg}'.")
                            else:
                                    print(f"Selected object '{mesh_name_pg}' has no modifiers.")
                    else:
                            print("Selected object is not a mesh.")
            else:
                    print("No object selected.")
            bpy.context.object.data.update()
        return {'FINISHED'}
    
class Myoperator23CGgenai(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperator23cggenai"
    bl_label = "Import Gen AI Data"

    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        api_key_file_path = bpy.path.abspath(mytool.my_pathapi_key)
        filepath_full23circleaisiteurl = bpy.path.abspath(mytool.my_stringsiteurl)
        filepath_full23circleaiappname = bpy.path.abspath(mytool.my_stringappname)
        filepath_full23circleaiapikey = read_api_key(api_key_file_path)
        
        if not filepath_full23circleaiapikey:
            print("Failed to read API key. Aborting operation.")
            return {'CANCELLED'}
        filepath_full23circleaimodelname1 = bpy.path.abspath(mytool.my_stringmodelname1)
        filepath_full23circleaimodelname2 = bpy.path.abspath(mytool.my_stringmodelname2)        
        filepath_full23circleaiinput1 = bpy.path.abspath(mytool.my_stringcircle23gen_graph1)
        filepath_full23circleaiinput2 = bpy.path.abspath(mytool.my_stringcircle23gen_graph2)
        filepath_full23circleaiinput3 = bpy.path.abspath(mytool.my_stringcircle23gen_graph3)
        filepath_fullurl = bpy.path.abspath(mytool.my_stringresponseurl)

        sub_question23cg = filepath_full23circleaiinput1
        main_question23cg = filepath_full23circleaiinput2.format(sub_question23cg)

        question23cg = f"{main_question23cg} {sub_question23cg}"

        # Replace with your actual values
        YOUR_SITE_URL = filepath_full23circleaisiteurl
        YOUR_APP_NAME = filepath_full23circleaiappname
        YOUR_API_KEY = filepath_full23circleaiapikey

        response = requests.post(
            url=filepath_fullurl,
            headers={
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": YOUR_APP_NAME,
                "Authorization": f"Bearer {YOUR_API_KEY}",  # Include your API key in the Authorization header
            },
            data=json.dumps({
                "model": filepath_full23circleaimodelname1,
                "messages": [
                    {"role": "user", "content": question23cg}
                ]
            })
        )

        # Parse the JSON response
        response_json23cga = response.json()
        
        # Print the response for debugging
        print("Response JSON:", response_json23cga)

        # Extract the answer if available
        answer_23circle = response_json23cga.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

        # Print the answer for debugging
        print("Answer Circle:", answer_23circle)
        
                
        relevant_info23cg = answer_23circle
        
        if relevant_info23cg:
            # Extract necessary details from relevant_info
            # Modify the construction of the new question based on the extracted information
            new_question23cg = f"{filepath_full23circleaiinput3}. Here's the text: {relevant_info23cg}"

            # Make another API request with the new question
            new_response = requests.post(
                url=filepath_fullurl,
                headers={
                    "HTTP-Referer": YOUR_SITE_URL,
                    "X-Title": YOUR_APP_NAME,
                    "Authorization": f"Bearer {YOUR_API_KEY}",
                },
                data=json.dumps({
                    "model": filepath_full23circleaimodelname2,
                    "messages": [
                        {"role": "user", "content": new_question23cg}
                    ]
                })
            )

            # Parse the JSON response for the new question
            new_response_json23cgb = new_response.json()
            
            # Extract the answer if available
            answer_23circle1 = new_response_json23cgb.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

            # Print the answer for debugging
            print("Answer Circle1:", answer_23circle1)

            # Split the answer into variables based on commas
            answer_variables_23circle = answer_23circle1.split(';')
            
            # Split the answer further
            float_values23cg = [value for value in answer_variables_23circle[2].split(',')]
            float_names23cg = [value for value in answer_variables_23circle[3].split(',')]

            # Now you can use the individual variables as needed
            title_variable_23circle = answer_variables_23circle[0].replace("Step A:", "").strip().upper()
            subtitle_variable_23circle = answer_variables_23circle[1].replace("Step B:", "").strip()
            value_variable_23circle1 = re.sub(r"[^0-9.]", "", float_values23cg[0].replace("Step C:", "").strip())
            value_variable_23circle2 = re.sub(r"[^0-9.]", "", float_values23cg[1].replace("Step C:", "").strip())
            
            # Check if float_values23cg[2] is not empty
            if float_values23cg and len(float_values23cg) > 2:
                value_variable_23circle3 = re.sub(r"[^0-9.]", "", float_values23cg[2].replace("Step C:", "").strip())
            else:
                # Handle the case where float_values23cg[2] is empty or not provided
                value_variable_23circle3 = None  # or any default value you want
            
            
            
            
            name_variable_23circle1 = float_names23cg[0].replace("Step D:", "").strip()
            name_variable_23circle2 = float_names23cg[1].replace("Step D:", "").strip()
            
            # Check if float_names23cg[2] is not empty
            if float_names23cg and len(float_names23cg) > 2:
                name_variable_23circle3 = float_names23cg[2].replace("Step D:", "").strip()
            else:
                # Handle the case where float_names23cg[2] is empty or not provided
                name_variable_23circle3 = None  # or any default name you want

            # Variable 1
            if value_variable_23circle1.endswith('.'):
                value_variable_23circle1 = value_variable_23circle1[:-1]
            if value_variable_23circle1.startswith('.'):
                value_variable_23circle1 = value_variable_23circle1[1:]

            # Variable 2
            if value_variable_23circle2.endswith('.'):
                value_variable_23circle2 = value_variable_23circle2[:-1]
            if value_variable_23circle2.startswith('.'):
                value_variable_23circle2 = value_variable_23circle2[1:]

            if value_variable_23circle3 is not None:
                if value_variable_23circle3.endswith('.'):
                    value_variable_23circle3 = value_variable_23circle3[:-1]
                if value_variable_23circle3.startswith('.'):
                    value_variable_23circle3 = value_variable_23circle3[1:]

            # Print or use the variables as needed
            print(f"Title: {title_variable_23circle}, Subtitle: {subtitle_variable_23circle}, Value 1: {value_variable_23circle1}, Value 2: {value_variable_23circle2}, Value 3: {value_variable_23circle3}")

            # Ensure an object is selected
            if bpy.context.selected_objects:
                    selected_obj_23cg = bpy.context.active_object  # Get the active (selected) object

                    if selected_obj_23cg.type == 'MESH':
                            mesh_name_23cg = selected_obj_23cg.name

                            # Check if the selected object has modifiers
                            if selected_obj_23cg.modifiers:
                                    modifier_name_23cg = selected_obj_23cg.modifiers.active.name  # Get the name of the active modifier
                                    
                                    # Check if float_values23cg has exactly 2 elements
                                    if len(float_values23cg) == 2:
                                        selected_obj_23cg.modifiers[modifier_name_23cg]["Input_31"] = 2
                                    else:
                                        selected_obj_23cg.modifiers[modifier_name_23cg]["Input_31"] = 3

                                    selected_obj_23cg.modifiers[modifier_name_23cg]["Input_22"] = title_variable_23circle
                                    selected_obj_23cg.modifiers[modifier_name_23cg]["Input_23"] = subtitle_variable_23circle
                                    maxv_23circle = selected_obj_23cg.modifiers[modifier_name_23cg]["Input_11"] 
                                    selected_obj_23cg.modifiers[modifier_name_23cg]["Input_2"] = float(value_variable_23circle1) / maxv_23circle
                                    selected_obj_23cg.modifiers[modifier_name_23cg]["Input_41"] = float(value_variable_23circle2) / maxv_23circle

                                    # Check if value_variable_23circle3 is not empty
                                    if value_variable_23circle3:
                                        selected_obj_23cg.modifiers[modifier_name_23cg]["Input_42"] = float(value_variable_23circle3) / maxv_23circle
                                    else:
                                        print("Value for Input_42 is empty or not provided.")


                                    selected_obj_23cg.modifiers[modifier_name_23cg]["Input_39"] = name_variable_23circle1
                                    selected_obj_23cg.modifiers[modifier_name_23cg]["Input_40"] = name_variable_23circle2
                                    # Check if name_variable_23circle3 is not empty before setting the input
                                    if name_variable_23circle3:
                                        selected_obj_23cg.modifiers[modifier_name_23cg]["Input_38"] = name_variable_23circle3
                                    else:
                                        print("Name for Input_38 is empty or not provided.")                                    



                                    print(f"Set modifier input for object '{mesh_name_23cg}' and modifier '{modifier_name_23cg}'.")
                            else:
                                    print(f"Selected object '{mesh_name_23cg}' has no modifiers.")
                    else:
                            print("Selected object is not a mesh.")
            else:
                    print("No object selected.")
            bpy.context.object.data.update()
        return {'FINISHED'}
    
class Myoperator23PGgenai(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperator23pggenai"
    bl_label = "Import Gen AI Data"

    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        api_key_file_path = bpy.path.abspath(mytool.my_pathapi_key)
        filepath_full23pieaisiteurl = bpy.path.abspath(mytool.my_stringsiteurl)
        filepath_full23pieaiappname = bpy.path.abspath(mytool.my_stringappname)
        filepath_full23pieaiapikey = read_api_key(api_key_file_path)
        
        if not filepath_full23pieaiapikey:
            print("Failed to read API key. Aborting operation.")
            return {'CANCELLED'}
        filepath_full23pieaimodelname1 = bpy.path.abspath(mytool.my_stringmodelname1)
        filepath_full23pieaimodelname2 = bpy.path.abspath(mytool.my_stringmodelname2)        
        filepath_full23pieaiinput1 = bpy.path.abspath(mytool.my_stringpie23gen_graph1)
        filepath_full23pieaiinput2 = bpy.path.abspath(mytool.my_stringpie23gen_graph2)
        filepath_full23pieaiinput3 = bpy.path.abspath(mytool.my_stringpie23gen_graph3)
        filepath_fullurl = bpy.path.abspath(mytool.my_stringresponseurl)

        sub_question23pg = filepath_full23pieaiinput1
        main_question23pg = filepath_full23pieaiinput2.format(sub_question23pg)

        question23pg = f"{main_question23pg} {sub_question23pg}"

        # Replace with your actual values
        YOUR_SITE_URL = filepath_full23pieaisiteurl
        YOUR_APP_NAME = filepath_full23pieaiappname
        YOUR_API_KEY = filepath_full23pieaiapikey

        response = requests.post(
            url=filepath_fullurl,
            headers={
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": YOUR_APP_NAME,
                "Authorization": f"Bearer {YOUR_API_KEY}",  # Include your API key in the Authorization header
            },
            data=json.dumps({
                "model": filepath_full23pieaimodelname1,
                "messages": [
                    {"role": "user", "content": question23pg}
                ]
            })
        )

        # Parse the JSON response
        response_json23pga = response.json()
        
        # Print the response for debugging
        print("Response JSON:", response_json23pga)

        # Extract the answer if available
        answer_23pie = response_json23pga.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

        # Print the answer for debugging
        print("Answer Circle:", answer_23pie)
        
                
        relevant_info23pg = answer_23pie
        
        if relevant_info23pg:
            # Extract necessary details from relevant_info
            # Modify the construction of the new question based on the extracted information
            new_question23pg = f"{filepath_full23pieaiinput3}. Here's the text: {relevant_info23pg}"

            # Make another API request with the new question
            new_response = requests.post(
                url=filepath_fullurl,
                headers={
                    "HTTP-Referer": YOUR_SITE_URL,
                    "X-Title": YOUR_APP_NAME,
                    "Authorization": f"Bearer {YOUR_API_KEY}",
                },
                data=json.dumps({
                    "model": filepath_full23pieaimodelname2,
                    "messages": [
                        {"role": "user", "content": new_question23pg}
                    ]
                })
            )

            # Parse the JSON response for the new question
            new_response_json23pgb = new_response.json()
            
            # Extract the answer if available
            answer_23pie1 = new_response_json23pgb.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

            # Print the answer for debugging
            print("Answer Circle1:", answer_23pie1)

            # Split the answer into variables based on commas
            answer_variables_23pie = answer_23pie1.split(';')
            
            # Split the answer further
            float_values23pg = [value for value in answer_variables_23pie[2].split(',')]
            float_names23pg = [value for value in answer_variables_23pie[3].split(',')]

            # Now you can use the individual variables as needed
            title_variable_23pie = answer_variables_23pie[0].replace("Step A:", "").strip().upper()
            subtitle_variable_23pie = answer_variables_23pie[1].replace("Step B:", "").strip()
            value_variable_23pie1 = re.sub(r"[^0-9.]", "", float_values23pg[0].replace("Step C:", "").strip())
            value_variable_23pie2 = re.sub(r"[^0-9.]", "", float_values23pg[1].replace("Step C:", "").strip())
            
            # Check if float_values23pg[2] is not empty
            if float_values23pg and len(float_values23pg) > 2:
                value_variable_23pie3 = re.sub(r"[^0-9.]", "", float_values23pg[2].replace("Step C:", "").strip())
            else:
                # Handle the case where float_values23pg[2] is empty or not provided
                value_variable_23pie3 = None  # or any default value you want
            
            
            
            
            name_variable_23pie1 = float_names23pg[0].replace("Step D:", "").strip()
            name_variable_23pie2 = float_names23pg[1].replace("Step D:", "").strip()
            
            # Check if float_names23pg[2] is not empty
            if float_names23pg and len(float_names23pg) > 2:
                name_variable_23pie3 = float_names23pg[2].replace("Step D:", "").strip()
            else:
                # Handle the case where float_names23pg[2] is empty or not provided
                name_variable_23pie3 = None  # or any default name you want

            # Variable 1
            if value_variable_23pie1.endswith('.'):
                value_variable_23pie1 = value_variable_23pie1[:-1]
            if value_variable_23pie1.startswith('.'):
                value_variable_23pie1 = value_variable_23pie1[1:]

            # Variable 2
            if value_variable_23pie2.endswith('.'):
                value_variable_23pie2 = value_variable_23pie2[:-1]
            if value_variable_23pie2.startswith('.'):
                value_variable_23pie2 = value_variable_23pie2[1:]

            if value_variable_23pie3 is not None:
                if value_variable_23pie3.endswith('.'):
                    value_variable_23pie3 = value_variable_23pie3[:-1]
                if value_variable_23pie3.startswith('.'):
                    value_variable_23pie3 = value_variable_23pie3[1:]

            # Print or use the variables as needed
            print(f"Title: {title_variable_23pie}, Subtitle: {subtitle_variable_23pie}, Value 1: {value_variable_23pie1}, Value 2: {value_variable_23pie2}, Value 3: {value_variable_23pie3}")

            # Ensure an object is selected
            if bpy.context.selected_objects:
                    selected_obj_23pg = bpy.context.active_object  # Get the active (selected) object

                    if selected_obj_23pg.type == 'MESH':
                            mesh_name_23pg = selected_obj_23pg.name

                            # Check if the selected object has modifiers
                            if selected_obj_23pg.modifiers:
                                    modifier_name_23pg = selected_obj_23pg.modifiers.active.name  # Get the name of the active modifier
                                    
                                    # Check if float_values23pg has exactly 2 elements
                                    if len(float_values23pg) == 2:
                                        selected_obj_23pg.modifiers[modifier_name_23pg]["Input_26"] = 2
                                    else:
                                        selected_obj_23pg.modifiers[modifier_name_23pg]["Input_26"] = 3

                                    selected_obj_23pg.modifiers[modifier_name_23pg]["Input_15"] = title_variable_23pie
                                    selected_obj_23pg.modifiers[modifier_name_23pg]["Input_17"] = subtitle_variable_23pie
                                    maxv_23pie = selected_obj_23pg.modifiers[modifier_name_23pg]["Input_11"] 
                                    selected_obj_23pg.modifiers[modifier_name_23pg]["Input_2"] = float(value_variable_23pie1) / maxv_23pie
                                    selected_obj_23pg.modifiers[modifier_name_23pg]["Input_27"] = float(value_variable_23pie2) / maxv_23pie

                                    # Check if value_variable_23pie3 is not empty
                                    if value_variable_23pie3:
                                        selected_obj_23pg.modifiers[modifier_name_23pg]["Input_28"] = float(value_variable_23pie3) / maxv_23pie
                                    else:
                                        print("Value for Input_28 is empty or not provided.")


                                    selected_obj_23pg.modifiers[modifier_name_23pg]["Input_31"] = name_variable_23pie1
                                    selected_obj_23pg.modifiers[modifier_name_23pg]["Input_32"] = name_variable_23pie2
                                    # Check if name_variable_23pie3 is not empty before setting the input
                                    if name_variable_23pie3:
                                        selected_obj_23pg.modifiers[modifier_name_23pg]["Input_33"] = name_variable_23pie3
                                    else:
                                        print("Name for Input_33 is empty or not provided.")                                    



                                    print(f"Set modifier input for object '{mesh_name_23pg}' and modifier '{modifier_name_23pg}'.")
                            else:
                                    print(f"Selected object '{mesh_name_23pg}' has no modifiers.")
                    else:
                            print("Selected object is not a mesh.")
            else:
                    print("No object selected.")
            bpy.context.object.data.update()
        return {'FINISHED'}

    
class MyoperatorMCGgenai(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatormcggenai"
    bl_label = "Import Gen AI Data"

    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        api_key_file_path = bpy.path.abspath(mytool.my_pathapi_key)
        filepath_fullmcgaisiteurl = bpy.path.abspath(mytool.my_stringsiteurl)
        filepath_fullmcgaiappname = bpy.path.abspath(mytool.my_stringappname)
        filepath_fullmcgaiapikey = read_api_key(api_key_file_path)
        
        if not filepath_fullmcgaiapikey:
            print("Failed to read API key. Aborting operation.")
            return {'CANCELLED'}
        filepath_fullmcgaimodelname1 = bpy.path.abspath(mytool.my_stringmodelname1)
        filepath_fullmcgaimodelname2 = bpy.path.abspath(mytool.my_stringmodelname2)        
        filepath_fullmcgaiinput1 = bpy.path.abspath(mytool.my_stringmultiple_circle_gengraph1)
        filepath_fullmcgaiinput2 = bpy.path.abspath(mytool.my_stringmultiple_circle_gengraph2)
        filepath_fullmcgaiinput3 = bpy.path.abspath(mytool.my_stringmultiple_circle_gengraph3)
        filepath_fullurl = bpy.path.abspath(mytool.my_stringresponseurl)

        sub_questionmcg = filepath_fullmcgaiinput1
        main_questionmcg = filepath_fullmcgaiinput2.format(sub_questionmcg)

        questionmcg = f"{main_questionmcg} {sub_questionmcg}"

        # Replace with your actual values
        YOUR_SITE_URL = filepath_fullmcgaisiteurl
        YOUR_APP_NAME = filepath_fullmcgaiappname
        YOUR_API_KEY = filepath_fullmcgaiapikey

        response = requests.post(
            url=filepath_fullurl,
            headers={
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": YOUR_APP_NAME,
                "Authorization": f"Bearer {YOUR_API_KEY}",  # Include your API key in the Authorization header
            },
            data=json.dumps({
                "model": filepath_fullmcgaimodelname1,
                "messages": [
                    {"role": "user", "content": questionmcg}
                ]
            })
        )

        # Parse the JSON response
        response_jsonmcga = response.json()
        
        # Print the response for debugging
        print("Response JSON:", response_jsonmcga)

        # Extract the answer if available
        answer_mcg = response_jsonmcga.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

        # Print the answer for debugging
        print("Answer Circle:", answer_mcg)
        
                
        relevant_infomcg = answer_mcg
        
        if relevant_infomcg:
            # Extract necessary details from relevant_info
            # Modify the construction of the new question based on the extracted information
            new_questionmcg = f"{filepath_fullmcgaiinput3}. Here's the text: {relevant_infomcg}"

            # Make another API request with the new question
            new_response = requests.post(
                url=filepath_fullurl,
                headers={
                    "HTTP-Referer": YOUR_SITE_URL,
                    "X-Title": YOUR_APP_NAME,
                    "Authorization": f"Bearer {YOUR_API_KEY}",
                },
                data=json.dumps({
                    "model": filepath_fullmcgaimodelname2,
                    "messages": [
                        {"role": "user", "content": new_questionmcg}
                    ]
                })
            )

            # Parse the JSON response for the new question
            new_response_jsonmcgb = new_response.json()
            
            # Extract the answer if available
            answer_mcg1 = new_response_jsonmcgb.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

            # Print the answer for debugging
            print("Answer Circle1:", answer_mcg1)

            # Split the answer into variables based on commas
            answer_variables_mcg = answer_mcg1.split(';')
            
            # Split the answer further
            float_valuesmcg = [value for value in answer_variables_mcg[2].split(',')]
            float_namesmcg = [value for value in answer_variables_mcg[3].split(',')]

            # Now you can use the individual variables as needed
            title_variable_mcg = answer_variables_mcg[0].replace("Step A:", "").strip().upper()
            subtitle_variable_mcg = answer_variables_mcg[1].replace("Step B:", "").strip()
            value_variable_mcg1 = re.sub(r"[^0-9.]", "", float_valuesmcg[0].replace("Step C:", "").strip())

            # Check if float_valuesmcg[1] is not empty
            if float_valuesmcg and len(float_valuesmcg) > 1:
                value_variable_mcg2 = re.sub(r"[^0-9.]", "", float_valuesmcg[1].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmcg[1] is empty or not provided
                value_variable_mcg2 = None  # or any default value you want

            # Check if float_valuesmcg[2] is not empty
            if float_valuesmcg and len(float_valuesmcg) > 2:
                value_variable_mcg3 = re.sub(r"[^0-9.]", "", float_valuesmcg[2].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmcg[2] is empty or not provided
                value_variable_mcg3 = None  # or any default value you want

            # Check if float_valuesmcg[3] is not empty
            if float_valuesmcg and len(float_valuesmcg) > 3:
                value_variable_mcg4 = re.sub(r"[^0-9.]", "", float_valuesmcg[3].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmcg[3] is empty or not provided
                value_variable_mcg4 = None  # or any default value you want

            # Check if float_valuesmcg[4] is not empty
            if float_valuesmcg and len(float_valuesmcg) > 4:
                value_variable_mcg5 = re.sub(r"[^0-9.]", "", float_valuesmcg[4].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmcg[4] is empty or not provided
                value_variable_mcg5 = None  # or any default value you want

            # Check if float_valuesmcg[5] is not empty
            if float_valuesmcg and len(float_valuesmcg) > 5:
                value_variable_mcg6 = re.sub(r"[^0-9.]", "", float_valuesmcg[5].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmcg[5] is empty or not provided
                value_variable_mcg6 = None  # or any default value you want

            # Check if float_valuesmcg[6] is not empty
            if float_valuesmcg and len(float_valuesmcg) > 6:
                value_variable_mcg7 = re.sub(r"[^0-9.]", "", float_valuesmcg[6].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmcg[6] is empty or not provided
                value_variable_mcg7 = None  # or any default value you want

            # Check if float_valuesmcg[7] is not empty
            if float_valuesmcg and len(float_valuesmcg) > 7:
                value_variable_mcg8 = re.sub(r"[^0-9.]", "", float_valuesmcg[7].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmcg[6] is empty or not provided
                value_variable_mcg8 = None  # or any default value you want

                       
            
            name_variable_mcg1 = float_namesmcg[0].replace("Step D:", "").strip()

            # Check if float_namesmcg[1] is not empty
            if float_namesmcg and len(float_namesmcg) > 1:
                name_variable_mcg2 = float_namesmcg[1].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmcg[1] is empty or not provided
                name_variable_mcg2 = None  # or any default name you want

            # Check if float_namesmcg[2] is not empty
            if float_namesmcg and len(float_namesmcg) > 2:
                name_variable_mcg3 = float_namesmcg[2].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmcg[2] is empty or not provided
                name_variable_mcg3 = None  # or any default name you want

            # Check if float_namesmcg[3] is not empty
            if float_namesmcg and len(float_namesmcg) > 3:
                name_variable_mcg4 = float_namesmcg[3].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmcg[3] is empty or not provided
                name_variable_mcg4 = None  # or any default name you want

            # Check if float_namesmcg[4] is not empty
            if float_namesmcg and len(float_namesmcg) > 4:
                name_variable_mcg5 = float_namesmcg[4].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmcg[4] is empty or not provided
                name_variable_mcg5 = None  # or any default name you want

            # Check if float_namesmcg[5] is not empty
            if float_namesmcg and len(float_namesmcg) > 5:
                name_variable_mcg6 = float_namesmcg[5].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmcg[5] is empty or not provided
                name_variable_mcg6 = None  # or any default name you want

            # Check if float_namesmcg[6] is not empty
            if float_namesmcg and len(float_namesmcg) > 6:
                name_variable_mcg7 = float_namesmcg[6].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmcg[6] is empty or not provided
                name_variable_mcg7 = None  # or any default name you want

            # Check if float_namesmcg[7] is not empty
            if float_namesmcg and len(float_namesmcg) > 7:
                name_variable_mcg8 = float_namesmcg[7].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmcg[7] is empty or not provided
                name_variable_mcg8 = None  # or any default name you want



            if value_variable_mcg1.endswith('.'):
                value_variable_mcg1 = value_variable_mcg1[:-1]
            if value_variable_mcg1.startswith('.'):
                value_variable_mcg1 = value_variable_mcg1[1:]

            if value_variable_mcg2 is not None:
                if value_variable_mcg2.endswith('.'):
                    value_variable_mcg2 = value_variable_mcg2[:-1]
                if value_variable_mcg2.startswith('.'):
                    value_variable_mcg2 = value_variable_mcg2[1:]

            if value_variable_mcg3 is not None:
                if value_variable_mcg3.endswith('.'):
                    value_variable_mcg3 = value_variable_mcg3[:-1]
                if value_variable_mcg3.startswith('.'):
                    value_variable_mcg3 = value_variable_mcg3[1:]

            if value_variable_mcg4 is not None:
                if value_variable_mcg4.endswith('.'):
                    value_variable_mcg4 = value_variable_mcg4[:-1]
                if value_variable_mcg4.startswith('.'):
                    value_variable_mcg4 = value_variable_mcg4[1:]

            if value_variable_mcg5 is not None:
                if value_variable_mcg5.endswith('.'):
                    value_variable_mcg5 = value_variable_mcg5[:-1]
                if value_variable_mcg5.startswith('.'):
                    value_variable_mcg5 = value_variable_mcg5[1:]

            if value_variable_mcg6 is not None:
                if value_variable_mcg6.endswith('.'):
                    value_variable_mcg6 = value_variable_mcg6[:-1]
                if value_variable_mcg6.startswith('.'):
                    value_variable_mcg6 = value_variable_mcg6[1:]

            if value_variable_mcg7 is not None:
                if value_variable_mcg7.endswith('.'):
                    value_variable_mcg7 = value_variable_mcg7[:-1]
                if value_variable_mcg7.startswith('.'):
                    value_variable_mcg7 = value_variable_mcg7[1:]

            if value_variable_mcg8 is not None:
                if value_variable_mcg8.endswith('.'):
                    value_variable_mcg8 = value_variable_mcg8[:-1]
                if value_variable_mcg8.startswith('.'):
                    value_variable_mcg8 = value_variable_mcg8[1:]


            # Ensure an object is selected
            if bpy.context.selected_objects:
                    selected_obj_mcg = bpy.context.active_object  # Get the active (selected) object

                    if selected_obj_mcg.type == 'MESH':
                            mesh_name_mcg = selected_obj_mcg.name

                            # Check if the selected object has modifiers
                            if selected_obj_mcg.modifiers:
                                    modifier_name_mcg = selected_obj_mcg.modifiers.active.name  # Get the name of the active modifier
                                    
                                    # Check if float_valuesmcg has 1 to 8 elements and assign the length directly
                                    num_elements = len(float_valuesmcg)
                                    if 1 <= num_elements <= 8:
                                        selected_obj_mcg.modifiers[modifier_name_mcg]["Input_55"] = num_elements


                                    selected_obj_mcg.modifiers[modifier_name_mcg]["Input_40"] = title_variable_mcg
                                    selected_obj_mcg.modifiers[modifier_name_mcg]["Input_41"] = subtitle_variable_mcg
                                    maxv_mcg = selected_obj_mcg.modifiers[modifier_name_mcg]["Input_11"] 
                                    selected_obj_mcg.modifiers[modifier_name_mcg]["Input_2"] = float(value_variable_mcg1) / maxv_mcg

                                    # Check if value_variable_mcg2 is not empty
                                    if value_variable_mcg2:
                                        selected_obj_mcg.modifiers[modifier_name_mcg]["Input_12"] = float(value_variable_mcg2) / maxv_mcg
                                    else:
                                        print("Value for Input_12 is empty or not provided.")

                                    # Check if value_variable_mcg3 is not empty
                                    if value_variable_mcg3:
                                        selected_obj_mcg.modifiers[modifier_name_mcg]["Input_14"] = float(value_variable_mcg3) / maxv_mcg
                                    else:
                                        print("Value for Input_14 is empty or not provided.")

                                    # Check if value_variable_mcg4 is not empty
                                    if value_variable_mcg4:
                                        selected_obj_mcg.modifiers[modifier_name_mcg]["Input_15"] = float(value_variable_mcg4) / maxv_mcg
                                    else:
                                        print("Value for Input_15 is empty or not provided.")

                                    # Check if value_variable_mcg5 is not empty
                                    if value_variable_mcg5:
                                        selected_obj_mcg.modifiers[modifier_name_mcg]["Input_16"] = float(value_variable_mcg5) / maxv_mcg
                                    else:
                                        print("Value for Input_16 is empty or not provided.")

                                    # Check if value_variable_mcg6 is not empty
                                    if value_variable_mcg6:
                                        selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_7"] = float(value_variable_mcg6) / maxv_mcg
                                    else:
                                        print("Value for Socket_7 is empty or not provided.")

                                    # Check if value_variable_mcg7 is not empty
                                    if value_variable_mcg7:
                                        selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_8"] = float(value_variable_mcg7) / maxv_mcg
                                    else:
                                        print("Value for Socket_8 is empty or not provided.")

                                    # Check if value_variable_mcg8 is not empty
                                    if value_variable_mcg8:
                                        selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_9"] = float(value_variable_mcg8) / maxv_mcg
                                    else:
                                        print("Value for Socket_9 is empty or not provided.")


                                    selected_obj_mcg.modifiers[modifier_name_mcg]["Input_42"] = name_variable_mcg1

                                    # Check if name_variable_mcg2 is not empty before setting the input
                                    if name_variable_mcg2:
                                        selected_obj_mcg.modifiers[modifier_name_mcg]["Input_43"] = name_variable_mcg2
                                    else:
                                        print("Name for Input_43 is empty or not provided.")     

                                    # Check if name_variable_mcg3 is not empty before setting the input
                                    if name_variable_mcg3:
                                        selected_obj_mcg.modifiers[modifier_name_mcg]["Input_44"] = name_variable_mcg3
                                    else:
                                        print("Name for Input_44 is empty or not provided.")    

                                    # Check if name_variable_mcg4 is not empty before setting the input
                                    if name_variable_mcg4:
                                        selected_obj_mcg.modifiers[modifier_name_mcg]["Input_46"] = name_variable_mcg4
                                    else:
                                        print("Name for Input_46 is empty or not provided.")    

                                    # Check if name_variable_mcg5 is not empty before setting the input
                                    if name_variable_mcg5:
                                        selected_obj_mcg.modifiers[modifier_name_mcg]["Input_45"] = name_variable_mcg5
                                    else:
                                        print("Name for Input_45 is empty or not provided.")    

                                    # Check if name_variable_mcg6 is not empty before setting the input
                                    if name_variable_mcg6:
                                        selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_13"] = name_variable_mcg6
                                    else:
                                        print("Name for Socket_13 is empty or not provided.")  

                                    # Check if name_variable_mcg7 is not empty before setting the input
                                    if name_variable_mcg7:
                                        selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_18"] = name_variable_mcg7
                                    else:
                                        print("Name for Socket_18 is empty or not provided.")  

                                    # Check if name_variable_mcg8 is not empty before setting the input
                                    if name_variable_mcg8:
                                        selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_23"] = name_variable_mcg8
                                    else:
                                        print("Name for Socket_23 is empty or not provided.")                                   



                                    print(f"Set modifier input for object '{mesh_name_mcg}' and modifier '{modifier_name_mcg}'.")
                            else:
                                    print(f"Selected object '{mesh_name_mcg}' has no modifiers.")
                    else:
                            print("Selected object is not a mesh.")
            else:
                    print("No object selected.")
            bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorMPGgenai(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatormpggenai"
    bl_label = "Import Gen AI Data"

    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        api_key_file_path = bpy.path.abspath(mytool.my_pathapi_key)
        filepath_fullmpgaisiteurl = bpy.path.abspath(mytool.my_stringsiteurl)
        filepath_fullmpgaiappname = bpy.path.abspath(mytool.my_stringappname)
        filepath_fullmpgaiapikey = read_api_key(api_key_file_path)
        
        if not filepath_fullmpgaiapikey:
            print("Failed to read API key. Aborting operation.")
            return {'CANCELLED'}
        filepath_fullmpgaimodelname1 = bpy.path.abspath(mytool.my_stringmodelname1)
        filepath_fullmpgaimodelname2 = bpy.path.abspath(mytool.my_stringmodelname2)        
        filepath_fullmpgaiinput1 = bpy.path.abspath(mytool.my_stringmultiple_pie_gengraph1)
        filepath_fullmpgaiinput2 = bpy.path.abspath(mytool.my_stringmultiple_pie_gengraph2)
        filepath_fullmpgaiinput3 = bpy.path.abspath(mytool.my_stringmultiple_pie_gengraph3)
        filepath_fullurl = bpy.path.abspath(mytool.my_stringresponseurl)

        sub_questionmpg = filepath_fullmpgaiinput1
        main_questionmpg = filepath_fullmpgaiinput2.format(sub_questionmpg)

        questionmpg = f"{main_questionmpg} {sub_questionmpg}"

        # Replace with your actual values
        YOUR_SITE_URL = filepath_fullmpgaisiteurl
        YOUR_APP_NAME = filepath_fullmpgaiappname
        YOUR_API_KEY = filepath_fullmpgaiapikey

        response = requests.post(
            url=filepath_fullurl,
            headers={
                "HTTP-Referer": YOUR_SITE_URL,
                "X-Title": YOUR_APP_NAME,
                "Authorization": f"Bearer {YOUR_API_KEY}",  # Include your API key in the Authorization header
            },
            data=json.dumps({
                "model": filepath_fullmpgaimodelname1,
                "messages": [
                    {"role": "user", "content": questionmpg}
                ]
            })
        )

        # Parse the JSON response
        response_jsonmpga = response.json()
        
        # Print the response for debugging
        print("Response JSON:", response_jsonmpga)

        # Extract the answer if available
        answer_mpg = response_jsonmpga.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

        # Print the answer for debugging
        print("Answer Circle:", answer_mpg)
        
                
        relevant_infompg = answer_mpg
        
        if relevant_infompg:
            # Extract necessary details from relevant_info
            # Modify the construction of the new question based on the extracted information
            new_questionmpg = f"{filepath_fullmpgaiinput3}. Here's the text: {relevant_infompg}"

            # Make another API request with the new question
            new_response = requests.post(
                url=filepath_fullurl,
                headers={
                    "HTTP-Referer": YOUR_SITE_URL,
                    "X-Title": YOUR_APP_NAME,
                    "Authorization": f"Bearer {YOUR_API_KEY}",
                },
                data=json.dumps({
                    "model": filepath_fullmpgaimodelname2,
                    "messages": [
                        {"role": "user", "content": new_questionmpg}
                    ]
                })
            )

            # Parse the JSON response for the new question
            new_response_jsonmpgb = new_response.json()
            
            # Extract the answer if available
            answer_mpg1 = new_response_jsonmpgb.get("choices", [{}])[0].get("message", {}).get("content", "No answer found")

            # Print the answer for debugging
            print("Answer Circle1:", answer_mpg1)

            # Split the answer into variables based on commas
            answer_variables_mpg = answer_mpg1.split(';')
            
            # Split the answer further
            float_valuesmpg = [value for value in answer_variables_mpg[2].split(',')]
            float_namesmpg = [value for value in answer_variables_mpg[3].split(',')]

            # Now you can use the individual variables as needed
            title_variable_mpg = answer_variables_mpg[0].replace("Step A:", "").strip().upper()
            subtitle_variable_mpg = answer_variables_mpg[1].replace("Step B:", "").strip()
            value_variable_mpg1 = re.sub(r"[^0-9.]", "", float_valuesmpg[0].replace("Step C:", "").strip())

            # Check if float_valuesmpg[1] is not empty
            if float_valuesmpg and len(float_valuesmpg) > 1:
                value_variable_mpg2 = re.sub(r"[^0-9.]", "", float_valuesmpg[1].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmpg[1] is empty or not provided
                value_variable_mpg2 = None  # or any default value you want

            # Check if float_valuesmpg[2] is not empty
            if float_valuesmpg and len(float_valuesmpg) > 2:
                value_variable_mpg3 = re.sub(r"[^0-9.]", "", float_valuesmpg[2].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmpg[2] is empty or not provided
                value_variable_mpg3 = None  # or any default value you want

            # Check if float_valuesmpg[3] is not empty
            if float_valuesmpg and len(float_valuesmpg) > 3:
                value_variable_mpg4 = re.sub(r"[^0-9.]", "", float_valuesmpg[3].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmpg[3] is empty or not provided
                value_variable_mpg4 = None  # or any default value you want

            # Check if float_valuesmpg[4] is not empty
            if float_valuesmpg and len(float_valuesmpg) > 4:
                value_variable_mpg5 = re.sub(r"[^0-9.]", "", float_valuesmpg[4].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmpg[4] is empty or not provided
                value_variable_mpg5 = None  # or any default value you want

            # Check if float_valuesmpg[5] is not empty
            if float_valuesmpg and len(float_valuesmpg) > 5:
                value_variable_mpg6 = re.sub(r"[^0-9.]", "", float_valuesmpg[5].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmpg[5] is empty or not provided
                value_variable_mpg6 = None  # or any default value you want

            # Check if float_valuesmpg[6] is not empty
            if float_valuesmpg and len(float_valuesmpg) > 6:
                value_variable_mpg7 = re.sub(r"[^0-9.]", "", float_valuesmpg[6].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmpg[6] is empty or not provided
                value_variable_mpg7 = None  # or any default value you want

            # Check if float_valuesmpg[7] is not empty
            if float_valuesmpg and len(float_valuesmpg) > 7:
                value_variable_mpg8 = re.sub(r"[^0-9.]", "", float_valuesmpg[7].replace("Step C:", "").strip())
            else:
                # Handle the case where float_valuesmpg[6] is empty or not provided
                value_variable_mpg8 = None  # or any default value you want

                       
            
            name_variable_mpg1 = float_namesmpg[0].replace("Step D:", "").strip()

            # Check if float_namesmpg[1] is not empty
            if float_namesmpg and len(float_namesmpg) > 1:
                name_variable_mpg2 = float_namesmpg[1].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmpg[1] is empty or not provided
                name_variable_mpg2 = None  # or any default name you want

            # Check if float_namesmpg[2] is not empty
            if float_namesmpg and len(float_namesmpg) > 2:
                name_variable_mpg3 = float_namesmpg[2].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmpg[2] is empty or not provided
                name_variable_mpg3 = None  # or any default name you want

            # Check if float_namesmpg[3] is not empty
            if float_namesmpg and len(float_namesmpg) > 3:
                name_variable_mpg4 = float_namesmpg[3].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmpg[3] is empty or not provided
                name_variable_mpg4 = None  # or any default name you want

            # Check if float_namesmpg[4] is not empty
            if float_namesmpg and len(float_namesmpg) > 4:
                name_variable_mpg5 = float_namesmpg[4].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmpg[4] is empty or not provided
                name_variable_mpg5 = None  # or any default name you want

            # Check if float_namesmpg[5] is not empty
            if float_namesmpg and len(float_namesmpg) > 5:
                name_variable_mpg6 = float_namesmpg[5].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmpg[5] is empty or not provided
                name_variable_mpg6 = None  # or any default name you want

            # Check if float_namesmpg[6] is not empty
            if float_namesmpg and len(float_namesmpg) > 6:
                name_variable_mpg7 = float_namesmpg[6].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmpg[6] is empty or not provided
                name_variable_mpg7 = None  # or any default name you want

            # Check if float_namesmpg[7] is not empty
            if float_namesmpg and len(float_namesmpg) > 7:
                name_variable_mpg8 = float_namesmpg[7].replace("Step D:", "").strip()
            else:
                # Handle the case where float_namesmpg[7] is empty or not provided
                name_variable_mpg8 = None  # or any default name you want



            if value_variable_mpg1.endswith('.'):
                value_variable_mpg1 = value_variable_mpg1[:-1]
            if value_variable_mpg1.startswith('.'):
                value_variable_mpg1 = value_variable_mpg1[1:]

            if value_variable_mpg2 is not None:
                if value_variable_mpg2.endswith('.'):
                    value_variable_mpg2 = value_variable_mpg2[:-1]
                if value_variable_mpg2.startswith('.'):
                    value_variable_mpg2 = value_variable_mpg2[1:]

            if value_variable_mpg3 is not None:
                if value_variable_mpg3.endswith('.'):
                    value_variable_mpg3 = value_variable_mpg3[:-1]
                if value_variable_mpg3.startswith('.'):
                    value_variable_mpg3 = value_variable_mpg3[1:]

            if value_variable_mpg4 is not None:
                if value_variable_mpg4.endswith('.'):
                    value_variable_mpg4 = value_variable_mpg4[:-1]
                if value_variable_mpg4.startswith('.'):
                    value_variable_mpg4 = value_variable_mpg4[1:]

            if value_variable_mpg5 is not None:
                if value_variable_mpg5.endswith('.'):
                    value_variable_mpg5 = value_variable_mpg5[:-1]
                if value_variable_mpg5.startswith('.'):
                    value_variable_mpg5 = value_variable_mpg5[1:]

            if value_variable_mpg6 is not None:
                if value_variable_mpg6.endswith('.'):
                    value_variable_mpg6 = value_variable_mpg6[:-1]
                if value_variable_mpg6.startswith('.'):
                    value_variable_mpg6 = value_variable_mpg6[1:]

            if value_variable_mpg7 is not None:
                if value_variable_mpg7.endswith('.'):
                    value_variable_mpg7 = value_variable_mpg7[:-1]
                if value_variable_mpg7.startswith('.'):
                    value_variable_mpg7 = value_variable_mpg7[1:]

            if value_variable_mpg8 is not None:
                if value_variable_mpg8.endswith('.'):
                    value_variable_mpg8 = value_variable_mpg8[:-1]
                if value_variable_mpg8.startswith('.'):
                    value_variable_mpg8 = value_variable_mpg8[1:]


            # Ensure an object is selected
            if bpy.context.selected_objects:
                    selected_obj_mpg = bpy.context.active_object  # Get the active (selected) object

                    if selected_obj_mpg.type == 'MESH':
                            mesh_name_mpg = selected_obj_mpg.name

                            # Check if the selected object has modifiers
                            if selected_obj_mpg.modifiers:
                                    modifier_name_mpg = selected_obj_mpg.modifiers.active.name  # Get the name of the active modifier
                                    
                                    # Check if float_valuesmpg has 1 to 8 elements and assign the length directly
                                    num_elementsmpg = len(float_valuesmpg)
                                    if 1 <= num_elementsmpg <= 8:
                                        selected_obj_mpg.modifiers[modifier_name_mpg]["Input_54"] = num_elementsmpg


                                    selected_obj_mpg.modifiers[modifier_name_mpg]["Input_40"] = title_variable_mpg
                                    selected_obj_mpg.modifiers[modifier_name_mpg]["Input_41"] = subtitle_variable_mpg
                                    maxv_mpg = selected_obj_mpg.modifiers[modifier_name_mpg]["Input_11"] 
                                    selected_obj_mpg.modifiers[modifier_name_mpg]["Input_2"] = float(value_variable_mpg1) / maxv_mpg

                                    # Check if value_variable_mpg2 is not empty
                                    if value_variable_mpg2:
                                        selected_obj_mpg.modifiers[modifier_name_mpg]["Input_12"] = float(value_variable_mpg2) / maxv_mpg
                                    else:
                                        print("Value for Input_12 is empty or not provided.")

                                    # Check if value_variable_mpg3 is not empty
                                    if value_variable_mpg3:
                                        selected_obj_mpg.modifiers[modifier_name_mpg]["Input_14"] = float(value_variable_mpg3) / maxv_mpg
                                    else:
                                        print("Value for Input_14 is empty or not provided.")

                                    # Check if value_variable_mpg4 is not empty
                                    if value_variable_mpg4:
                                        selected_obj_mpg.modifiers[modifier_name_mpg]["Input_15"] = float(value_variable_mpg4) / maxv_mpg
                                    else:
                                        print("Value for Input_15 is empty or not provided.")

                                    # Check if value_variable_mpg5 is not empty
                                    if value_variable_mpg5:
                                        selected_obj_mpg.modifiers[modifier_name_mpg]["Input_16"] = float(value_variable_mpg5) / maxv_mpg
                                    else:
                                        print("Value for Input_16 is empty or not provided.")

                                    # Check if value_variable_mpg6 is not empty
                                    if value_variable_mpg6:
                                        selected_obj_mpg.modifiers[modifier_name_mpg]["Input_93"] = float(value_variable_mpg6) / maxv_mpg
                                    else:
                                        print("Value for Input_93 is empty or not provided.")

                                    # Check if value_variable_mpg7 is not empty
                                    if value_variable_mpg7:
                                        selected_obj_mpg.modifiers[modifier_name_mpg]["Socket_0"] = float(value_variable_mpg7) / maxv_mpg
                                    else:
                                        print("Value for Socket_0 is empty or not provided.")

                                    # Check if value_variable_mpg8 is not empty
                                    if value_variable_mpg8:
                                        selected_obj_mpg.modifiers[modifier_name_mpg]["Socket_1"] = float(value_variable_mpg8) / maxv_mpg
                                    else:
                                        print("Value for Socket_1 is empty or not provided.")


                                    selected_obj_mpg.modifiers[modifier_name_mpg]["Input_42"] = name_variable_mpg1

                                    # Check if name_variable_mpg2 is not empty before setting the input
                                    if name_variable_mpg2:
                                        selected_obj_mpg.modifiers[modifier_name_mpg]["Input_43"] = name_variable_mpg2
                                    else:
                                        print("Name for Input_43 is empty or not provided.")     

                                    # Check if name_variable_mpg3 is not empty before setting the input
                                    if name_variable_mpg3:
                                        selected_obj_mpg.modifiers[modifier_name_mpg]["Input_44"] = name_variable_mpg3
                                    else:
                                        print("Name for Input_44 is empty or not provided.")    

                                    # Check if name_variable_mpg4 is not empty before setting the input
                                    if name_variable_mpg4:
                                        selected_obj_mpg.modifiers[modifier_name_mpg]["Input_46"] = name_variable_mpg4
                                    else:
                                        print("Name for Input_46 is empty or not provided.")    

                                    # Check if name_variable_mpg5 is not empty before setting the input
                                    if name_variable_mpg5:
                                        selected_obj_mpg.modifiers[modifier_name_mpg]["Input_45"] = name_variable_mpg5
                                    else:
                                        print("Name for Input_45 is empty or not provided.")    

                                    # Check if name_variable_mpg6 is not empty before setting the input
                                    if name_variable_mpg6:
                                        selected_obj_mpg.modifiers[modifier_name_mpg]["Input_88"] = name_variable_mpg6
                                    else:
                                        print("Name for Input_88 is empty or not provided.")  

                                    # Check if name_variable_mpg7 is not empty before setting the input
                                    if name_variable_mpg7:
                                        selected_obj_mpg.modifiers[modifier_name_mpg]["Socket_4"] = name_variable_mpg7
                                    else:
                                        print("Name for Socket_4 is empty or not provided.")  

                                    # Check if name_variable_mpg8 is not empty before setting the input
                                    if name_variable_mpg8:
                                        selected_obj_mpg.modifiers[modifier_name_mpg]["Socket_9"] = name_variable_mpg8
                                    else:
                                        print("Name for Socket_9 is empty or not provided.")                                   



                                    print(f"Set modifier input for object '{mesh_name_mpg}' and modifier '{modifier_name_mpg}'.")
                            else:
                                    print(f"Selected object '{mesh_name_mpg}' has no modifiers.")
                    else:
                            print("Selected object is not a mesh.")
            else:
                    print("No object selected.")
            bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorLGcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorlgcsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full3 = bpy.path.abspath(mytool.my_pathline)
        with open(filepath_full3) as f:
            readout = list(csv.reader(f))
            nplg = int(readout[1][0])
            minvlg = float(readout[1][3])
            maxvlg = float(readout[1][4])
            decimallg = int(readout[1][5])
            rnlg = int(readout[1][6])

            valuelg = []
            for i in range(1, 31):
                try:
                    valuelgg = readout[i][1]
                    if valuelgg:  # check if the string is not empty
                        valuelg.append(float(valuelgg))
                    else:
                        valuelg.append(0.0)
                except IndexError:
                    valuelg.append(0.0)

            textlg = []
            for i in range(1, 31):
                try:
                    textlg.append(str(readout[i][2]))
                except IndexError:
                    textlg.append("")


            titlelg = str(readout[1][7])
            subtitlelg = str(readout[1][8])
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj = bpy.context.active_object  # Get the active (selected) object

                if selected_obj.type == 'MESH':
                        mesh_name = selected_obj.name

                        # Check if the selected object has modifiers
                        if selected_obj.modifiers:
                                if len(selected_obj.modifiers) >= 2:  # Ensure at least two modifiers exist
                                        modifier_0 = selected_obj.modifiers.get("GeometryNodes")
                                        modifier_1 = selected_obj.modifiers.get("GeometryNodes.001")

                                if modifier_0 and modifier_1:
                                        modifier_0["Input_2"] = nplg
                                        modifier_0["Input_13"] = minvlg
                                        modifier_0["Input_14"] = maxvlg
                                        modifier_0["Input_15"] = decimallg
                                        modifier_0["Input_18"] = rnlg
                                        modifier_0["Input_4"] = valuelg[0]
                                        modifier_0["Input_5"] = valuelg[1]
                                        modifier_0["Input_6"] = valuelg[2]
                                        modifier_0["Input_7"] = valuelg[3]
                                        modifier_0["Input_8"] = valuelg[4]
                                        modifier_0["Input_9"] = valuelg[5]
                                        modifier_0["Input_10"] = valuelg[6]
                                        modifier_0["Input_11"] = valuelg[7]
                                        modifier_0["Socket_0"] = valuelg[8]
                                        modifier_0["Socket_1"] = valuelg[9]
                                        modifier_0["Socket_2"] = valuelg[10]
                                        modifier_0["Socket_3"] = valuelg[11]
                                        modifier_0["Socket_4"] = valuelg[12]
                                        modifier_0["Socket_5"] = valuelg[13]
                                        modifier_0["Socket_6"] = valuelg[14]
                                        modifier_0["Socket_7"] = valuelg[15]
                                        modifier_0["Socket_8"] = valuelg[16]
                                        modifier_0["Socket_9"] = valuelg[17]
                                        modifier_0["Socket_10"] = valuelg[18]
                                        modifier_0["Socket_11"] = valuelg[19]
                                        modifier_0["Socket_12"] = valuelg[20]
                                        modifier_0["Socket_13"] = valuelg[21]
                                        modifier_0["Socket_14"] = valuelg[22]
                                        modifier_0["Socket_15"] = valuelg[23]
                                        modifier_0["Socket_16"] = valuelg[24]
                                        modifier_0["Socket_17"] = valuelg[25]
                                        modifier_0["Socket_18"] = valuelg[26]
                                        modifier_0["Socket_19"] = valuelg[27]
                                        modifier_0["Socket_20"] = valuelg[28]
                                        modifier_0["Socket_21"] = valuelg[29]

                                        modifier_1["Input_4"] = textlg[0]
                                        modifier_1["Input_5"] = textlg[1]
                                        modifier_1["Input_6"] = textlg[2]
                                        modifier_1["Input_7"] = textlg[3]
                                        modifier_1["Input_8"] = textlg[4]
                                        modifier_1["Input_9"] = textlg[5]
                                        modifier_1["Input_10"] = textlg[6]
                                        modifier_1["Input_11"] = textlg[7]
                                        modifier_1["Socket_0"] = textlg[8]
                                        modifier_1["Socket_1"] = textlg[9]
                                        modifier_1["Socket_2"] = textlg[10]
                                        modifier_1["Socket_3"] = textlg[11]
                                        modifier_1["Socket_4"] = textlg[12]
                                        modifier_1["Socket_5"] = textlg[13]
                                        modifier_1["Socket_6"] = textlg[14]
                                        modifier_1["Socket_7"] = textlg[15]
                                        modifier_1["Socket_8"] = textlg[16]
                                        modifier_1["Socket_9"] = textlg[17]
                                        modifier_1["Socket_10"] = textlg[18]
                                        modifier_1["Socket_11"] = textlg[19]
                                        modifier_1["Socket_12"] = textlg[20]
                                        modifier_1["Socket_13"] = textlg[21]
                                        modifier_1["Socket_14"] = textlg[22]
                                        modifier_1["Socket_15"] = textlg[23]
                                        modifier_1["Socket_16"] = textlg[24]
                                        modifier_1["Socket_17"] = textlg[25]
                                        modifier_1["Socket_18"] = textlg[26]
                                        modifier_1["Socket_19"] = textlg[27]
                                        modifier_1["Socket_20"] = textlg[28]
                                        modifier_1["Socket_21"] = textlg[29]
                                        modifier_1["Input_23"] = titlelg
                                        modifier_1["Input_22"] = subtitlelg

                                        print(f"Set modifier input for object '{mesh_name}'.")
                                else:
                                        print("Selected object does not have both modifiers.")
                        else:
                                print(f"Selected object '{mesh_name}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorLGCcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorlgccsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full3c = bpy.path.abspath(mytool.my_pathlinec)
        with open(filepath_full3c) as f:
            readout = list(csv.reader(f))
            nplgc = int(readout[1][0])
            minvlgc = float(readout[1][4])
            maxvlgc = float(readout[1][5])
            decimallgc = int(readout[1][6])
            rnlgc = int(readout[1][7])
            
            valuealgc = []
            for i in range(1, 9):
                try:
                    valuealgcg = readout[i][2]
                    if valuealgcg:  # check if the string is not empty
                        valuealgc.append(float(valuealgcg))
                    else:
                        valuealgc.append(0.0)
                except IndexError:
                    valuealgc.append(0.0)
            
            valueblgc = []
            for i in range(1, 9):
                try:
                    valueblgcg = readout[i][3]
                    if valueblgcg:  # check if the string is not empty
                        valueblgc.append(float(valueblgcg))
                    else:
                        valueblgc.append(0.0)
                except IndexError:
                    valueblgc.append(0.0)
            
            textlgc = []
            for i in range(1, 9):
                try:
                    textlgc.append(str(readout[i][1]))
                except IndexError:
                    textlgc.append("")
            
            titlelgc = str(readout[1][8])
            subtitlelgc = str(readout[1][9])
            legendalgc = str(readout[1][10])
            legendblgc = str(readout[2][10])
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj = bpy.context.active_object  # Get the active (selected) object

                if selected_obj.type == 'MESH':
                        mesh_name = selected_obj.name

                        # Check if the selected object has modifiers
                        if selected_obj.modifiers:
                                if len(selected_obj.modifiers) >= 2:  # Ensure at least two modifiers exist
                                        modifier_0c = selected_obj.modifiers.get("GeometryNodes")
                                        modifier_1c = selected_obj.modifiers.get("GeometryNodes.001")

                                if modifier_0c and modifier_1c:
                                        modifier_0c["Input_2"] = nplgc
                                        modifier_0c["Input_13"] = minvlgc
                                        modifier_0c["Input_14"] = maxvlgc
                                        modifier_0c["Input_15"] = decimallgc
                                        modifier_0c["Input_18"] = rnlgc
                                        
                                        modifier_0c["Input_4"] = valuealgc[0]
                                        modifier_0c["Input_5"] = valuealgc[1]
                                        modifier_0c["Input_6"] = valuealgc[2]
                                        modifier_0c["Input_7"] = valuealgc[3]
                                        modifier_0c["Input_8"] = valuealgc[4]
                                        modifier_0c["Input_9"] = valuealgc[5]
                                        modifier_0c["Input_10"] = valuealgc[6]
                                        modifier_0c["Input_11"] = valuealgc[7]
                                        
                                        modifier_0c["Input_34"] = valueblgc[0]
                                        modifier_0c["Input_35"] = valueblgc[1]
                                        modifier_0c["Input_36"] = valueblgc[2]
                                        modifier_0c["Input_37"] = valueblgc[3]
                                        modifier_0c["Input_38"] = valueblgc[4]
                                        modifier_0c["Input_39"] = valueblgc[5]
                                        modifier_0c["Input_40"] = valueblgc[6]
                                        modifier_0c["Input_41"] = valueblgc[7]

                                        modifier_1c["Input_4"] = textlgc[0]
                                        modifier_1c["Input_5"] = textlgc[1]
                                        modifier_1c["Input_6"] = textlgc[2]
                                        modifier_1c["Input_7"] = textlgc[3]
                                        modifier_1c["Input_8"] = textlgc[4]
                                        modifier_1c["Input_9"] = textlgc[5]
                                        modifier_1c["Input_10"] = textlgc[6]
                                        modifier_1c["Input_11"] = textlgc[7]
                                        
                                        modifier_1c["Input_23"] = titlelgc
                                        modifier_1c["Input_22"] = subtitlelgc
                                        modifier_1c["Input_29"] = legendalgc
                                        modifier_1c["Input_30"] = legendblgc

                                        print(f"Set modifier input for object '{mesh_name}'.")
                                else:
                                        print("Selected object does not have both modifiers.")
                        else:
                                print(f"Selected object '{mesh_name}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")

        # Optionally, you can update the mesh data if needed.
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorHBcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorhbcsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full4 = bpy.path.abspath(mytool.my_pathhbar)
        with open(filepath_full4) as f:
            readout = list(csv.reader(f))
            gregoryhbar = int(readout[1][0])
            
            malloryhbar = []
            for i in range(1, 11):
                try:
                    malloryhbar.append(float(readout[i][2]))
                except IndexError:
                    malloryhbar.append(0.0)

            
            olatunjihbar1 = float(readout[1][3])
            olatunjihbar2 = float(readout[1][4])
            
            jeopardyhbar1 = int(readout[1][5])
            
            hogwashhbar = []
            for i in range(1, 11):
                try:
                    hogwashhbar.append(str(readout[i][1]))
                except IndexError:
                    hogwashhbar.append("")


            titlehbar1 = str(readout[1][6])
            subtitlehbar1 = str(readout[1][7])
            totalhbar1 = str(readout[1][8])
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_hbg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_hbg.type == 'MESH':
                        mesh_name_hbg = selected_obj_hbg.name

                        # Check if the selected object has modifiers
                        if selected_obj_hbg.modifiers:
                                modifier_name_hbg = selected_obj_hbg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_36"] = gregoryhbar
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_14"] = malloryhbar[0]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_15"] = malloryhbar[1]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_16"] = malloryhbar[2]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_17"] = malloryhbar[3]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_16"] = malloryhbar[4]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_17"] = malloryhbar[5]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_18"] = malloryhbar[6]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_19"] = malloryhbar[7]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_20"] = malloryhbar[8]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_21"] = malloryhbar[9]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_10"] = olatunjihbar1
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_11"] = olatunjihbar2
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_12"] = jeopardyhbar1
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_2"] = hogwashhbar[0]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_3"] = hogwashhbar[1]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_4"] = hogwashhbar[2]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_5"] = hogwashhbar[3]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_10"] = hogwashhbar[4]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_11"] = hogwashhbar[5]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_12"] = hogwashhbar[6]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_13"] = hogwashhbar[7]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_14"] = hogwashhbar[8]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Socket_15"] = hogwashhbar[9]
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_7"] = titlehbar1
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_8"] = subtitlehbar1
                                selected_obj_hbg.modifiers[modifier_name_hbg]["Input_6"] = totalhbar1

                                print(f"Set modifier input for object '{mesh_name_hbg}' and modifier '{modifier_name_hbg}'.")
                        else:
                                print(f"Selected object '{mesh_name_hbg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'} 
    
class MyoperatorHBCcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorhbccsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full4c = bpy.path.abspath(mytool.my_pathhbarc)
        with open(filepath_full4c) as f:
            readout = list(csv.reader(f))
            nbhbarc = int(readout[1][0])
            
            bthbarc = []
            for i in range(1, 10):
                try:
                    bthbarc.append(str(readout[i][1]))
                except IndexError:
                    bthbarc.append("")
                    
            minvhbarc1 = float(readout[1][4])
            maxvhbarc2 = float(readout[1][5])
            decimalhbarc1 = int(readout[1][6])
            
            bvahbarc = []
            for i in range(1, 10):
                try:
                    value = readout[i][2]
                    if value:  # check if the string is not empty
                        bvahbarc.append(float(value))
                    else:
                        bvahbarc.append(0.0)
                except IndexError:
                    bvahbarc.append(0.0)

                    
            bvbhbarc = []
            for i in range(1, 10):
                try:
                    value = readout[i][3]
                    if value:  # check if the string is not empty
                        bvbhbarc.append(float(value))
                    else:
                        bvbhbarc.append(0.0)
                except IndexError:
                    bvbhbarc.append(0.0)
                    
            titlehbarc1 = str(readout[1][7])
            subtitlehbarc1 = str(readout[1][8])
            legendhbarc1 = str(readout[1][9])
            legendhbarc2 = str(readout[2][9])
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_hbgc = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_hbgc.type == 'MESH':
                        mesh_name_hbgc = selected_obj_hbgc.name

                        # Check if the selected object has modifiers
                        if selected_obj_hbgc.modifiers:
                                modifier_name_hbgc = selected_obj_hbgc.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_45"] = nbhbarc
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_2"] = bthbarc[0]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_3"] = bthbarc[1]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_4"] = bthbarc[2]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_5"] = bthbarc[3]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_66"] = bthbarc[4]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_67"] = bthbarc[5]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_68"] = bthbarc[6]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_69"] = bthbarc[7]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_70"] = bthbarc[8]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_10"] = minvhbarc1
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_11"] = maxvhbarc2
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_12"] = decimalhbarc1
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_14"] = bvahbarc[0]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_15"] = bvahbarc[1]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_16"] = bvahbarc[2]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_17"] = bvahbarc[3]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_71"] = bvahbarc[4]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_73"] = bvahbarc[5]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_75"] = bvahbarc[6]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_77"] = bvahbarc[7]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_79"] = bvahbarc[8]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_36"] = bvbhbarc[0]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_37"] = bvbhbarc[1]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_38"] = bvbhbarc[2]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_39"] = bvbhbarc[3]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_72"] = bvbhbarc[4]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_74"] = bvbhbarc[5]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_76"] = bvbhbarc[6]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_78"] = bvbhbarc[7]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_80"] = bvbhbarc[8]
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_7"] = titlehbarc1
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_8"] = subtitlehbarc1
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_6"] = legendhbarc1
                                selected_obj_hbgc.modifiers[modifier_name_hbgc]["Input_40"] = legendhbarc2

                                print(f"Set modifier input for object '{mesh_name_hbgc}' and modifier '{modifier_name_hbgc}'.")
                        else:
                                print(f"Selected object '{mesh_name_hbgc}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'} 

class MyoperatorHBOcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorhbocsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full4o = bpy.path.abspath(mytool.my_pathhbaro)
        with open(filepath_full4o) as f:
            readout = list(csv.reader(f))
            nbhbaro = int(readout[1][0])
            
            bthbaro = []
            for i in range(1, 11):
                try:
                    bthbaro.append(str(readout[i][1]))
                except IndexError:
                    bthbaro.append("")
                    
            minvhbaro1 = float(readout[1][4])
            maxvhbaro2 = float(readout[1][5])
            decimalhbaro1 = int(readout[1][6])
            
            bvahbaro = []
            for i in range(1, 11):
                try:
                    value = readout[i][2]
                    if value:  # check if the string is not empty
                        bvahbaro.append(float(value))
                    else:
                        bvahbaro.append(0.0)
                except IndexError:
                    bvahbaro.append(0.0)
                    
            bvbhbaro = []
            for i in range(1, 11):
                try:
                    value = readout[i][3]
                    if value:  # check if the string is not empty
                        bvbhbaro.append(float(value))
                    else:
                        bvbhbaro.append(0.0)
                except IndexError:
                    bvbhbaro.append(0.0)
                    
            titlehbaro1 = str(readout[1][7])
            subtitlehbaro1 = str(readout[1][8])
            legendhbaro1 = str(readout[1][9])
            legendhbaro2 = str(readout[2][9])
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_hbgo = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_hbgo.type == 'MESH':
                        mesh_name_hbgo = selected_obj_hbgo.name

                        # Check if the selected object has modifiers
                        if selected_obj_hbgo.modifiers:
                                modifier_name_hbgo = selected_obj_hbgo.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_36"] = nbhbaro
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_2"] = bthbaro[0]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_3"] = bthbaro[1]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_4"] = bthbaro[2]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_5"] = bthbaro[3]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_10"] = bthbaro[4]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_11"] = bthbaro[5]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_12"] = bthbaro[6]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_13"] = bthbaro[7]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_14"] = bthbaro[8]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_15"] = bthbaro[9]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_10"] = minvhbaro1
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_11"] = maxvhbaro2
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_12"] = decimalhbaro1
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_16"] = bvahbaro[0]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_17"] = bvahbaro[1]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_19"] = bvahbaro[2]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_20"] = bvahbaro[3]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_21"] = bvahbaro[4]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_22"] = bvahbaro[5]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_23"] = bvahbaro[6]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_24"] = bvahbaro[7]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_25"] = bvahbaro[8]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_26"] = bvahbaro[9]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_14"] = bvbhbaro[0]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_15"] = bvbhbaro[1]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_16"] = bvbhbaro[2]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_17"] = bvbhbaro[3]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_28"] = bvbhbaro[4]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_29"] = bvbhbaro[5]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_18"] = bvbhbaro[6]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_30"] = bvbhbaro[7]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_31"] = bvbhbaro[8]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_27"] = bvbhbaro[9]
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_7"] = titlehbaro1
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_8"] = subtitlehbaro1
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Input_6"] = legendhbaro1
                                selected_obj_hbgo.modifiers[modifier_name_hbgo]["Socket_34"] = legendhbaro2

                                print(f"Set modifier input for object '{mesh_name_hbgo}' and modifier '{modifier_name_hbgo}'.")
                        else:
                                print(f"Selected object '{mesh_name_hbgo}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorHBScsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorshbgcsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full4s = bpy.path.abspath(mytool.my_pathhbars)
        with open(filepath_full4s) as f:
            readout = list(csv.reader(f))
            nbhbars = int(readout[1][0])
            nbsbars = int(readout[1][1])
            
            bthbars = []
            for i in range(1, 11):
                try:
                    bthbars.append(str(readout[i][2]))
                except IndexError:
                    bthbars.append("")
            
            minvhbars1 = float(readout[1][6])
            maxvhbars2 = float(readout[1][7])
            decimalhbars1 = int(readout[1][8])
            
            bvahbars = []
            for i in range(1, 11):
                try:
                    value = readout[i][3]
                    if value:  # check if the string is not empty
                        bvahbars.append(float(value))
                    else:
                        bvahbars.append(0.0)
                except IndexError:
                    bvahbars.append(0.0)
            
            bvbhbars = []
            for i in range(1, 11):
                try:
                    value = readout[i][4]
                    if value:  # check if the string is not empty
                        bvbhbars.append(float(value))
                    else:
                        bvbhbars.append(0.0)
                except IndexError:
                    bvbhbars.append(0.0)
            
            bvchbars = []
            for i in range(1, 11):
                try:
                    value = readout[i][5]
                    if value:  # check if the string is not empty
                        bvchbars.append(float(value))
                    else:
                        bvchbars.append(0.0)
                except IndexError:
                    bvchbars.append(0.0)
            
            titlehbars1 = str(readout[1][9])
            subtitlehbars1 = str(readout[1][10])
            
            legendhbars = []
            for i in range(1, 4):
                try:
                    legendhbars.append(str(readout[i][11]))
                except IndexError:
                    legendhbars.append("")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_shbg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_shbg.type == 'MESH':
                        mesh_name_shbg = selected_obj_shbg.name

                        # Check if the selected object has modifiers
                        if selected_obj_shbg.modifiers:
                                modifier_name_shbg = selected_obj_shbg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_shbg.modifiers[modifier_name_shbg]["Input_36"] = nbhbars
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_9"] = nbsbars
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Input_2"] = bthbars[0]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Input_3"] = bthbars[1]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Input_4"] = bthbars[2]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Input_5"] = bthbars[3]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_27"] = bthbars[4]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_28"] = bthbars[5]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_12"] = bthbars[6]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_13"] = bthbars[7]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_14"] = bthbars[8]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_15"] = bthbars[9]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Input_10"] = minvhbars1
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Input_11"] = maxvhbars2
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Input_12"] = decimalhbars1
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Input_14"] = bvahbars[0]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Input_15"] = bvahbars[1]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Input_16"] = bvahbars[2]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Input_17"] = bvahbars[3]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_16"] = bvahbars[4]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_17"] = bvahbars[5]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_18"] = bvahbars[6]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_19"] = bvahbars[7]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_20"] = bvahbars[8]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_21"] = bvahbars[9]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_29"] = bvbhbars[0]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_31"] = bvbhbars[1]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_33"] = bvbhbars[2]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_35"] = bvbhbars[3]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_37"] = bvbhbars[4]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_39"] = bvbhbars[5]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_41"] = bvbhbars[6]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_43"] = bvbhbars[7]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_45"] = bvbhbars[8]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_47"] = bvbhbars[9]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_30"] = bvchbars[0]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_32"] = bvchbars[1]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_34"] = bvchbars[2]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_36"] = bvchbars[3]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_38"] = bvchbars[4]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_40"] = bvchbars[5]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_42"] = bvchbars[6]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_44"] = bvchbars[7]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_46"] = bvchbars[8]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_48"] = bvchbars[9]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Input_7"] = titlehbars1
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Input_8"] = subtitlehbars1
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Input_6"] = legendhbars[0]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_2"] = legendhbars[1]
                                selected_obj_shbg.modifiers[modifier_name_shbg]["Socket_8"] = legendhbars[2]

                                print(f"Set modifier input for object '{mesh_name_shbg}' and modifier '{modifier_name_shbg}'.")
                        else:
                                print(f"Selected object '{mesh_name_shbg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}  
    
class MyoperatorVBScsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorsvbgcsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full4vs = bpy.path.abspath(mytool.my_pathsvbg)
        with open(filepath_full4vs) as f:
            readout = list(csv.reader(f))
            nbvbars = int(readout[1][0])
            nbsvbars = int(readout[1][1])
            
            btvbars = []
            for i in range(1, 9):
                try:
                    btvbars.append(str(readout[i][2]))
                except IndexError:
                    btvbars.append("")

            minvvbars1 = float(readout[1][6])
            maxvvbars2 = float(readout[1][7])
            decimalvbars1 = int(readout[1][8])
            
            bvavbars = []
            for i in range(1, 9):
                try:
                    bvavbarsg = readout[i][3]
                    if bvavbarsg:  # check if the string is not empty
                        bvavbars.append(float(bvavbarsg))
                    else:
                        bvavbars.append(0.0)
                except IndexError:
                    bvavbars.append(0.0)
            
            bvbvbars = []
            for i in range(1, 9):
                try:
                    bvbvbarsg = readout[i][4]
                    if bvbvbarsg:  # check if the string is not empty
                        bvbvbars.append(float(bvbvbarsg))
                    else:
                        bvbvbars.append(0.0)
                except IndexError:
                    bvbvbars.append(0.0)

            bvcvbars = []
            for i in range(1, 9):
                try:
                    bvcvbarsg = readout[i][5]
                    if bvcvbarsg:  # check if the string is not empty
                        bvcvbars.append(float(bvcvbarsg))
                    else:
                        bvcvbars.append(0.0)
                except IndexError:
                    bvcvbars.append(0.0)

            titlevbars1 = str(readout[1][9])
            subtitlevbars1 = str(readout[1][10])
            
            legendvbars = []
            for i in range(1, 4):
                try:
                    legendvbars.append(str(readout[i][11]))
                except IndexError:
                    legendvbars.append("")
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_svbg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_svbg.type == 'MESH':
                        mesh_name_svbg = selected_obj_svbg.name

                        # Check if the selected object has modifiers
                        if selected_obj_svbg.modifiers:
                                modifier_name_svbg = selected_obj_svbg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_57"] = nbvbars
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_31"] = nbsvbars

                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_2"] = btvbars[0]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_42"] = btvbars[1]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_3"] = btvbars[2]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_45"] = btvbars[3]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_4"] = btvbars[4]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_47"] = btvbars[5]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_5"] = btvbars[6]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_49"] = btvbars[7]

                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_10"] = minvvbars1
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_11"] = maxvvbars2
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_12"] = decimalvbars1

                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_14"] = bvavbars[0]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_41"] = bvavbars[1]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_15"] = bvavbars[2]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_44"] = bvavbars[3]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_16"] = bvavbars[4]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_48"] = bvavbars[5]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_17"] = bvavbars[6]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_50"] = bvavbars[7]

                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_13"] = bvbvbars[0]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_15"] = bvbvbars[1]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_17"] = bvbvbars[2]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_19"] = bvbvbars[3]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_21"] = bvbvbars[4]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_23"] = bvbvbars[5]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_25"] = bvbvbars[6]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_29"] = bvbvbars[7]

                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_14"] = bvcvbars[0]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_16"] = bvcvbars[1]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_18"] = bvcvbars[2]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_20"] = bvcvbars[3]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_22"] = bvcvbars[4]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_24"] = bvcvbars[5]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_26"] = bvcvbars[6]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_28"] = bvcvbars[7]

                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_7"] = titlevbars1
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_8"] = subtitlevbars1
                                
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Input_6"] = legendvbars[0]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_34"] = legendvbars[1]
                                selected_obj_svbg.modifiers[modifier_name_svbg]["Socket_35"] = legendvbars[2]

                                print(f"Set modifier input for object '{mesh_name_svbg}' and modifier '{modifier_name_svbg}'.")
                        else:
                                print(f"Selected object '{mesh_name_svbg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}  
    
class MyoperatorMCcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatormccsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full5 = bpy.path.abspath(mytool.my_pathmcircle)
        with open(filepath_full5) as f:
            readout = list(csv.reader(f))
            gregorymcircle = int(readout[1][0])
            
            mallorymcirclemgc = []
            for i in range(1, 9):
                try:
                    mallorymcirclemgcg = readout[i][2]
                    if mallorymcirclemgcg:  # check if the string is not empty
                        mallorymcirclemgc.append(float(mallorymcirclemgcg))
                    else:
                        mallorymcirclemgc.append(0.0)
                except IndexError:
                    mallorymcirclemgc.append(0.0)
            
            hogwashcircle = []
            for i in range(1, 9):
                try:
                    hogwashcircle.append(str(readout[i][1]))
                except IndexError:
                    hogwashcircle.append("")
            
            minvaluemcircle = float(readout[1][3])
            maxvaluemcircle = float(readout[1][4])
            decimalmcircle = int(readout[1][5])
            titlemcircle = str(readout[1][6])
            subtitlemcircle = str(readout[1][7])
            
            if mallorymcirclemgc[0] == 0:
                mallorympercentage1 = 0.0  # avoid division by zero
            else:
                mallorympercentage1 = float(float(mallorymcirclemgc[0])/maxvaluemcircle)
                
            if mallorymcirclemgc[1] == 0:
                mallorympercentage2 = 0.0  # avoid division by zero
            else:
                mallorympercentage2 = float(float(mallorymcirclemgc[1])/maxvaluemcircle)
                
            if mallorymcirclemgc[2] == 0:
                mallorympercentage3 = 0.0  # avoid division by zero
            else:
                mallorympercentage3 = float(float(mallorymcirclemgc[2])/maxvaluemcircle)
                
            if mallorymcirclemgc[3] == 0:
                mallorympercentage4 = 0.0  # avoid division by zero
            else:
                mallorympercentage4 = float(float(mallorymcirclemgc[3])/maxvaluemcircle)
                
            if mallorymcirclemgc[4] == 0:
                mallorympercentage5 = 0.0  # avoid division by zero
            else:
                mallorympercentage5 = float(float(mallorymcirclemgc[4])/maxvaluemcircle)
                
            if mallorymcirclemgc[5] == 0:
                mallorympercentage6 = 0.0  # avoid division by zero
            else:
                mallorympercentage6 = float(float(mallorymcirclemgc[5])/maxvaluemcircle)
                
            if mallorymcirclemgc[6] == 0:
                mallorympercentage7 = 0.0  # avoid division by zero
            else:
                mallorympercentage7 = float(float(mallorymcirclemgc[6])/maxvaluemcircle)
                
            if mallorymcirclemgc[7] == 0:
                mallorympercentage8 = 0.0  # avoid division by zero
            else:
                mallorympercentage8 = float(float(mallorymcirclemgc[7])/maxvaluemcircle)
             

            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_mcg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_mcg.type == 'MESH':
                        mesh_name_mcg = selected_obj_mcg.name

                        # Check if the selected object has modifiers
                        if selected_obj_mcg.modifiers:
                                modifier_name_mcg = selected_obj_mcg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_55"] = gregorymcircle
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_2"] = mallorympercentage1
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_12"] = mallorympercentage2
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_14"] = mallorympercentage3
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_15"] = mallorympercentage4
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_16"] = mallorympercentage5
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_7"] = mallorympercentage6
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_8"] = mallorympercentage7                               
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_9"] = mallorympercentage8                                
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_10"] = minvaluemcircle
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_11"] = maxvaluemcircle
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_18"] = decimalmcircle
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_40"] = titlemcircle
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_41"] = subtitlemcircle
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_42"] = hogwashcircle[0]
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_43"] = hogwashcircle[1]
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_44"] = hogwashcircle[2]
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_46"] = hogwashcircle[3]
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Input_45"] = hogwashcircle[4]
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_13"] = hogwashcircle[5]
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_18"] = hogwashcircle[6]
                                selected_obj_mcg.modifiers[modifier_name_mcg]["Socket_23"] = hogwashcircle[7]

                                print(f"Set modifier input for object '{mesh_name_mcg}' and modifier '{modifier_name_mcg}'.")
                        else:
                                print(f"Selected object '{mesh_name_mcg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorMPcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatormpcsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full6 = bpy.path.abspath(mytool.my_pathmpie)
        with open(filepath_full6) as f:
            readout = list(csv.reader(f))
            gregorympie = int(readout[1][0])
            
            mallorympiemgc = []
            for i in range(1, 9):
                try:
                    mallorympiemgcg = readout[i][2]
                    if mallorympiemgcg:  # check if the string is not empty
                        mallorympiemgc.append(float(mallorympiemgcg))
                    else:
                        mallorympiemgc.append(0.0)
                except IndexError:
                    mallorympiemgc.append(0.0)
            
            hogwashmpie = []
            for i in range(1, 9):
                try:
                    hogwashmpie.append(str(readout[i][1]))
                except IndexError:
                    hogwashmpie.append("")
            
            minvaluempie = float(readout[1][3])
            maxvaluempie = float(readout[1][4])
            decimalmpie = int(readout[1][5])
            titlempie = str(readout[1][6])
            subtitlempie = str(readout[1][7])
            
            if mallorympiemgc[0] == 0:
                mallorympiepercentage1 = 0.0  # avoid division by zero
            else:
                mallorympiepercentage1 = float(float(mallorympiemgc[0])/maxvaluempie)
                
            if mallorympiemgc[1] == 0:
                mallorympiepercentage2 = 0.0  # avoid division by zero
            else:
                mallorympiepercentage2 = float(float(mallorympiemgc[1])/maxvaluempie)
                
            if mallorympiemgc[2] == 0:
                mallorympiepercentage3 = 0.0  # avoid division by zero
            else:
                mallorympiepercentage3 = float(float(mallorympiemgc[2])/maxvaluempie)
                
            if mallorympiemgc[3] == 0:
                mallorympiepercentage4 = 0.0  # avoid division by zero
            else:
                mallorympiepercentage4 = float(float(mallorympiemgc[3])/maxvaluempie)
                
            if mallorympiemgc[4] == 0:
                mallorympiepercentage5 = 0.0  # avoid division by zero
            else:
                mallorympiepercentage5 = float(float(mallorympiemgc[4])/maxvaluempie)
                
            if mallorympiemgc[5] == 0:
                mallorympiepercentage6 = 0.0  # avoid division by zero
            else:
                mallorympiepercentage6 = float(float(mallorympiemgc[5])/maxvaluempie)
                
            if mallorympiemgc[6] == 0:
                mallorympiepercentage7 = 0.0  # avoid division by zero
            else:
                mallorympiepercentage7 = float(float(mallorympiemgc[6])/maxvaluempie)
                
            if mallorympiemgc[7] == 0:
                mallorympiepercentage8 = 0.0  # avoid division by zero
            else:
                mallorympiepercentage8 = float(float(mallorympiemgc[7])/maxvaluempie)         
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_mpg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_mpg.type == 'MESH':
                        mesh_name_mpg = selected_obj_mpg.name

                        # Check if the selected object has modifiers
                        if selected_obj_mpg.modifiers:
                                modifier_name_mpg = selected_obj_mpg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_54"] = gregorympie
                                
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_2"] = mallorympiepercentage1
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_12"] = mallorympiepercentage2
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_14"] = mallorympiepercentage3
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_15"] = mallorympiepercentage4
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_16"] = mallorympiepercentage5
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_93"] = mallorympiepercentage6
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Socket_0"] = mallorympiepercentage7
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Socket_1"] = mallorympiepercentage8
                                
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_10"] = minvaluempie
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_11"] = maxvaluempie
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_18"] = decimalmpie
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_40"] = titlempie
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_41"] = subtitlempie
                                
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_42"] = hogwashmpie[0]
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_43"] = hogwashmpie[1]
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_44"] = hogwashmpie[2]
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_46"] = hogwashmpie[3]
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_45"] = hogwashmpie[4]
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Input_88"] = hogwashmpie[5]
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Socket_4"] = hogwashmpie[6]
                                selected_obj_mpg.modifiers[modifier_name_mpg]["Socket_9"] = hogwashmpie[7]

                                print(f"Set modifier input for object '{mesh_name_mpg}' and modifier '{modifier_name_mpg}'.")
                        else:
                                print(f"Selected object '{mesh_name_mpg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorMGcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatormgcsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full3mg = bpy.path.abspath(mytool.my_pathmg)
        with open(filepath_full3mg) as f:
            readout = list(csv.reader(f))
            npmg = int(readout[1][0])
            minvmg = float(readout[1][3])
            maxvmg = float(readout[1][4])
            decimalmg = int(readout[1][5])
            rnmg = int(readout[1][6])
            
            valuemg = []
            for i in range(1, 9):
                try:
                    valuemgg = readout[i][1]
                    if valuemgg:  # check if the string is not empty
                        valuemg.append(float(valuemgg))
                    else:
                        valuemg.append(0.0)
                except IndexError:
                    valuemg.append(0.0)
                    
            textmg = []
            for i in range(1, 9):
                try:
                    textmg.append(str(readout[i][2]))
                except IndexError:
                    textmg.append("")
                    
            titlemg = str(readout[1][7])
            subtitlemg = str(readout[1][8])
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_mg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_mg.type == 'MESH':
                        mesh_name_mg = selected_obj_mg.name

                        # Check if the selected object has modifiers
                        if selected_obj_mg.modifiers:
                                modifier_name_mg = selected_obj_mg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_mg.modifiers[modifier_name_mg]["Input_2"] = npmg
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_22"] = minvmg
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_24"] = maxvmg
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_23"] = decimalmg
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_21"] = rnmg
                                
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_3"] = valuemg[0]
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_4"] = valuemg[1]
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_5"] = valuemg[2]
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_6"] = valuemg[3]
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_7"] = valuemg[4]
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_8"] = valuemg[5]
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_9"] = valuemg[6]
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_10"] = valuemg[7]
                                
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_13"] = textmg[0]
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_14"] = textmg[1]
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_15"] = textmg[2]
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_16"] = textmg[3]
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_17"] = textmg[4]
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_18"] = textmg[5]
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_19"] = textmg[6]
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_20"] = textmg[7]
                                
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_38"] = titlemg
                                selected_obj_mg.modifiers[modifier_name_mg]["Input_39"] = subtitlemg

                                print(f"Set modifier input for object '{mesh_name_mg}' and modifier '{modifier_name_mg}'.")
                        else:
                                print(f"Selected object '{mesh_name_mg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorRGcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorrgcsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full3rg = bpy.path.abspath(mytool.my_pathrg)
        with open(filepath_full3rg) as f:
            readout = list(csv.reader(f))
            nprg = int(readout[1][0])
            nvrg = int(readout[1][1])

            textrg = []
            for i in range(1, 19):
                try:
                    textrg.append(str(readout[i][2]))
                except IndexError:
                    textrg.append("")
            
            valuearg = []
            for i in range(1, 19):
                try:
                    valueargg = readout[i][3]
                    if valueargg:  # check if the string is not empty
                        valuearg.append(float(valueargg))
                    else:
                        valuearg.append(0.0)
                except IndexError:
                    valuearg.append(0.0)
            
            valuebrg = []
            for i in range(1, 19):
                try:
                    valuebrgg = readout[i][4]
                    if valuebrgg:  # check if the string is not empty
                        valuebrg.append(float(valuebrgg))
                    else:
                        valuebrg.append(0.0)
                except IndexError:
                    valuebrg.append(0.0)

            valuecrg = []
            for i in range(1, 19):
                try:
                    valuecrgg = readout[i][5]
                    if valuecrgg:  # check if the string is not empty
                        valuecrg.append(float(valuecrgg))
                    else:
                        valuecrg.append(0.0)
                except IndexError:
                    valuecrg.append(0.0)
            
            minvrg = float(readout[1][6])
            maxvrg = float(readout[1][7])

            legendarg = str(readout[1][8])
            legendbrg = str(readout[2][8])
            legendcrg = str(readout[3][8])  
          
            titlerg = str(readout[1][9])
            subtitlerg = str(readout[1][10])


            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_rg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_rg.type == 'MESH':
                        mesh_name_rg = selected_obj_rg.name

                        # Check if the selected object has modifiers
                        if selected_obj_rg.modifiers:
                                modifier_name_rg = selected_obj_rg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_25"] = nprg
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_31"] = nvrg

                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_16"] = textrg[0]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_17"] = textrg[1]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_18"] = textrg[2]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_19"] = textrg[3]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_20"] = textrg[4]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_21"] = textrg[5]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_22"] = textrg[6]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_23"] = textrg[7]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_24"] = textrg[8]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_26"] = textrg[9]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_27"] = textrg[10]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_28"] = textrg[11]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_29"] = textrg[12]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_30"] = textrg[13]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_31"] = textrg[14]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_34"] = textrg[15]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_32"] = textrg[16]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_33"] = textrg[17]
                                
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_2"] = valuearg[0]
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_41"] = valuearg[1]
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_42"] = valuearg[2]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_1"] = valuearg[3]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_2"] = valuearg[4]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_3"] = valuearg[5]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_4"] = valuearg[6]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_5"] = valuearg[7]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_6"] = valuearg[8]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_7"] = valuearg[9]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_8"] = valuearg[10]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_9"] = valuearg[11]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_10"] = valuearg[12]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_11"] = valuearg[13]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_12"] = valuearg[14]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_13"] = valuearg[15]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_14"] = valuearg[16]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_15"] = valuearg[17]
                                
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_38"] = valuebrg[0]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_40"] = valuebrg[1]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_42"] = valuebrg[2]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_44"] = valuebrg[3]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_46"] = valuebrg[4]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_48"] = valuebrg[5]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_50"] = valuebrg[6]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_52"] = valuebrg[7]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_54"] = valuebrg[8]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_56"] = valuebrg[9]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_58"] = valuebrg[10]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_60"] = valuebrg[11]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_62"] = valuebrg[12]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_64"] = valuebrg[13]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_66"] = valuebrg[14]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_68"] = valuebrg[15] 
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_70"] = valuebrg[16]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_72"] = valuebrg[17]  

                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_39"] = valuecrg[0]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_41"] = valuecrg[1]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_43"] = valuecrg[2]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_45"] = valuecrg[3]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_47"] = valuecrg[4]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_49"] = valuecrg[5]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_51"] = valuecrg[6]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_53"] = valuecrg[7]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_55"] = valuecrg[8]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_57"] = valuecrg[9]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_59"] = valuecrg[10]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_61"] = valuecrg[11]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_63"] = valuecrg[12]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_65"] = valuecrg[13]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_67"] = valuecrg[14]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_69"] = valuecrg[15] 
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_71"] = valuecrg[16]
                                selected_obj_rg.modifiers[modifier_name_rg]["Socket_73"] = valuecrg[17]

                                selected_obj_rg.modifiers[modifier_name_rg]["Input_10"] = minvrg
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_11"] = maxvrg

                                selected_obj_rg.modifiers[modifier_name_rg]["Input_39"] = legendarg
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_40"] = legendbrg
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_38"] = legendcrg                           
                                
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_22"] = titlerg
                                selected_obj_rg.modifiers[modifier_name_rg]["Input_23"] = subtitlerg


                                print(f"Set modifier input for object '{mesh_name_rg}' and modifier '{modifier_name_rg}'.")
                        else:
                                print(f"Selected object '{mesh_name_rg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}    

    
class MyoperatorMGCcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatormgccsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full3mgc = bpy.path.abspath(mytool.my_pathmgc)
        with open(filepath_full3mgc) as f:
            readout = list(csv.reader(f))
            npmgc = int(readout[1][0])
            minvmgc = float(readout[1][4])
            maxvmgc = float(readout[1][5])
            decimalmgc = int(readout[1][6])
            rnmgc = int(readout[1][7])
            
            valueamgc = []
            for i in range(1, 9):
                try:
                    valueamgcg = readout[i][2]
                    if valueamgcg:  # check if the string is not empty
                        valueamgc.append(float(valueamgcg))
                    else:
                        valueamgc.append(0.0)
                except IndexError:
                    valueamgc.append(0.0)
            
            valuebmgc = []
            for i in range(1, 9):
                try:
                    valuebmgcg = readout[i][3]
                    if valuebmgcg:  # check if the string is not empty
                        valuebmgc.append(float(valuebmgcg))
                    else:
                        valuebmgc.append(0.0)
                except IndexError:
                    valuebmgc.append(0.0)
            
            textmgc = []
            for i in range(1, 9):
                try:
                    textmgc.append(str(readout[i][1]))
                except IndexError:
                    textmgc.append("")
            
            titlemgc = str(readout[1][8])
            subtitlemgc = str(readout[1][9])
            legendamgc = str(readout[1][10])
            legendbmgc = str(readout[2][10])
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_mgc = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_mgc.type == 'MESH':
                        mesh_name_mgc = selected_obj_mgc.name

                        # Check if the selected object has modifiers
                        if selected_obj_mgc.modifiers:
                                modifier_name_mgc = selected_obj_mgc.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_2"] = npmgc
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_22"] = minvmgc
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_24"] = maxvmgc
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_23"] = decimalmgc
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_21"] = rnmgc
                                
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_3"] = valueamgc[0]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_4"] = valueamgc[1]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_67"] = valueamgc[2]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_6"] = valueamgc[3]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_7"] = valueamgc[4]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_8"] = valueamgc[5]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_9"] = valueamgc[6]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_10"] = valueamgc[7]
                                
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_30"] = valuebmgc[0]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_39"] = valuebmgc[1]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_40"] = valuebmgc[2]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_41"] = valuebmgc[3]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_42"] = valuebmgc[4]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_43"] = valuebmgc[5]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_44"] = valuebmgc[6]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_45"] = valuebmgc[7]
                                
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_13"] = textmgc[0]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_14"] = textmgc[1]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_15"] = textmgc[2]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_16"] = textmgc[3]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_17"] = textmgc[4]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_18"] = textmgc[5]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_19"] = textmgc[6]
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_20"] = textmgc[7]
                                
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_54"] = titlemgc
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_55"] = subtitlemgc
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_57"] = legendamgc
                                selected_obj_mgc.modifiers[modifier_name_mgc]["Input_56"] = legendbmgc

                                print(f"Set modifier input for object '{mesh_name_mgc}' and modifier '{modifier_name_mgc}'.")
                        else:
                                print(f"Selected object '{mesh_name_mgc}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorSGCcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorsgccsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full3sgc = bpy.path.abspath(mytool.my_pathsgc)
        with open(filepath_full3sgc) as f:
            readout = list(csv.reader(f))

            npsgc = int(readout[1][0])

            for i in range(1, 101):
                if i < len(readout) and len(readout[i]) > 1:
                    try:
                        globals()[f"valuex{i}sgc"] = float(readout[i][1])
                    except ValueError:
                        globals()[f"valuex{i}sgc"] = 0.0
                else:
                    globals()[f"valuex{i}sgc"] = 0.0


            for i in range(1, 101):
                if i < len(readout) and len(readout[i]) > 1:
                    try:
                        globals()[f"valuey{i}sgc"] = float(readout[i][2])
                    except ValueError:
                        globals()[f"valuey{i}sgc"] = 0.0
                else:
                    globals()[f"valuey{i}sgc"] = 0.0

            xminvsgc = float(readout[1][3])
            xmaxvsgc = float(readout[1][4])
            yminvsgc = float(readout[1][5])
            ymaxvsgc = float(readout[1][6])

            decimalsgc = int(readout[1][7])
            rnsgc = int(readout[1][8])
            
            titlesgc = str(readout[1][9])
            subtitlesgc = str(readout[1][10])

            legendxsgc = str(readout[1][11])
            legendysgc = str(readout[2][11])
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_sgc = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_sgc.type == 'MESH':
                        mesh_name_sgc = selected_obj_sgc.name

                        # Check if the selected object has modifiers
                        if selected_obj_sgc.modifiers:
                                modifier_name_sgc = selected_obj_sgc.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_2"] = npsgc

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_2"] = xminvsgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_3"] = xmaxvsgc

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_22"] = yminvsgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_24"] = ymaxvsgc

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_23"] = decimalsgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_21"] = rnsgc

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_92"] = valuex1sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_93"] = valuex2sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_94"] = valuex3sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_95"] = valuex4sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_96"] = valuex5sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_97"] = valuex6sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_98"] = valuex7sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_99"] = valuex8sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_100"] = valuex9sgc
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_101"] = valuex10sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_102"] = valuex11sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_103"] = valuex12sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_104"] = valuex13sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_105"] = valuex14sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_106"] = valuex15sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_107"] = valuex16sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_108"] = valuex17sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_109"] = valuex18sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_110"] = valuex19sgc
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_111"] = valuex20sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_112"] = valuex21sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_113"] = valuex22sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_114"] = valuex23sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_115"] = valuex24sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_116"] = valuex25sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_117"] = valuex26sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_118"] = valuex27sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_119"] = valuex28sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_191"] = valuex29sgc
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_120"] = valuex30sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_121"] = valuex31sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_122"] = valuex32sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_123"] = valuex33sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_124"] = valuex34sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_125"] = valuex35sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_126"] = valuex36sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_127"] = valuex37sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_128"] = valuex38sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_129"] = valuex39sgc
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_130"] = valuex40sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_131"] = valuex41sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_132"] = valuex42sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_133"] = valuex43sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_134"] = valuex44sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_135"] = valuex45sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_136"] = valuex46sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_137"] = valuex47sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_138"] = valuex48sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_139"] = valuex49sgc
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_140"] = valuex50sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_141"] = valuex51sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_142"] = valuex52sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_143"] = valuex53sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_144"] = valuex54sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_145"] = valuex55sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_146"] = valuex56sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_147"] = valuex57sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_148"] = valuex58sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_149"] = valuex59sgc
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_150"] = valuex60sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_151"] = valuex61sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_152"] = valuex62sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_153"] = valuex63sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_154"] = valuex64sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_155"] = valuex65sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_156"] = valuex66sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_157"] = valuex67sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_158"] = valuex68sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_159"] = valuex69sgc
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_160"] = valuex70sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_161"] = valuex71sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_162"] = valuex72sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_163"] = valuex73sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_164"] = valuex74sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_165"] = valuex75sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_166"] = valuex76sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_167"] = valuex77sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_168"] = valuex78sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_169"] = valuex79sgc
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_170"] = valuex80sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_171"] = valuex81sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_172"] = valuex82sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_173"] = valuex83sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_174"] = valuex84sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_175"] = valuex85sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_176"] = valuex86sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_177"] = valuex87sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_178"] = valuex88sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_179"] = valuex89sgc
                                
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_180"] = valuex90sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_181"] = valuex91sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_182"] = valuex92sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_183"] = valuex93sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_184"] = valuex94sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_185"] = valuex95sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_186"] = valuex96sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_187"] = valuex97sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_188"] = valuex98sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_189"] = valuex99sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_190"] = valuex100sgc


                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_3"] = valuey1sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_55"] = valuey2sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_56"] = valuey3sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_4"] = valuey4sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_57"] = valuey5sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_58"] = valuey6sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_5"] = valuey7sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_59"] = valuey8sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_60"] = valuey9sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_6"] = valuey10sgc

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_61"] = valuey11sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_62"] = valuey12sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_7"] = valuey13sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_63"] = valuey14sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_64"] = valuey15sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_8"] = valuey16sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_65"] = valuey17sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_66"] = valuey18sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_9"] = valuey19sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_67"] = valuey20sgc

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_68"] = valuey21sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_10"] = valuey22sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_69"] = valuey23sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_70"] = valuey24sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_4"] = valuey25sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_5"] = valuey26sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_6"] = valuey27sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_7"] = valuey28sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_192"] = valuey29sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_9"] = valuey30sgc

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_22"] = valuey31sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_23"] = valuey32sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_24"] = valuey33sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_25"] = valuey34sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_26"] = valuey35sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_27"] = valuey36sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_28"] = valuey37sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_29"] = valuey38sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_30"] = valuey39sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_31"] = valuey40sgc

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_32"] = valuey41sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_33"] = valuey42sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_34"] = valuey43sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_35"] = valuey44sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_36"] = valuey45sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_37"] = valuey46sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_38"] = valuey47sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_39"] = valuey48sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_40"] = valuey49sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_41"] = valuey50sgc

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_42"] = valuey51sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_43"] = valuey52sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_44"] = valuey53sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_45"] = valuey54sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_46"] = valuey55sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_47"] = valuey56sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_48"] = valuey57sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_49"] = valuey58sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_50"] = valuey59sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_51"] = valuey60sgc

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_52"] = valuey61sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_53"] = valuey62sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_54"] = valuey63sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_55"] = valuey64sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_56"] = valuey65sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_57"] = valuey66sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_58"] = valuey67sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_59"] = valuey68sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_60"] = valuey69sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_61"] = valuey70sgc

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_62"] = valuey71sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_63"] = valuey72sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_64"] = valuey73sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_65"] = valuey74sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_66"] = valuey75sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_67"] = valuey76sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_68"] = valuey77sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_69"] = valuey78sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_70"] = valuey79sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_71"] = valuey80sgc

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_72"] = valuey81sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_73"] = valuey82sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_74"] = valuey83sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_75"] = valuey84sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_76"] = valuey85sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_77"] = valuey86sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_78"] = valuey87sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_79"] = valuey88sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_80"] = valuey89sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_81"] = valuey90sgc

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_82"] = valuey91sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_83"] = valuey92sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_84"] = valuey93sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_85"] = valuey94sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_86"] = valuey95sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_87"] = valuey96sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_88"] = valuey97sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_89"] = valuey98sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_90"] = valuey99sgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_91"] = valuey100sgc

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_38"] = titlesgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Input_39"] = subtitlesgc

                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_12"] = legendxsgc
                                selected_obj_sgc.modifiers[modifier_name_sgc]["Socket_14"] = legendysgc

                                print(f"Set modifier input for object '{mesh_name_sgc}' and modifier '{modifier_name_sgc}'.")
                        else:
                                print(f"Selected object '{mesh_name_sgc}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorBGScsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorbgscsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full3bgs = bpy.path.abspath(mytool.my_pathbgs)
        with open(filepath_full3bgs) as f:
            readout = list(csv.reader(f))

            npbgs = int(readout[1][0])

            for i in range(1, 26):
                if i < len(readout) and len(readout[i]) > 1:
                    try:
                        globals()[f"valuex{i}bgs"] = float(readout[i][1])
                    except ValueError:
                        globals()[f"valuex{i}bgs"] = 0.0
                else:
                    globals()[f"valuex{i}bgs"] = 0.0


            for i in range(1, 26):
                if i < len(readout) and len(readout[i]) > 1:
                    try:
                        globals()[f"valuey{i}bgs"] = float(readout[i][2])
                    except ValueError:
                        globals()[f"valuey{i}bgs"] = 0.0
                else:
                    globals()[f"valuey{i}bgs"] = 0.0

            xminvbgs = float(readout[1][3])
            xmaxvbgs = float(readout[1][4])
            yminvbgs = float(readout[1][5])
            ymaxvbgs = float(readout[1][6])

            decimalbgs = int(readout[1][7])
            rnbgs = int(readout[1][8])
            
            titlebgs = str(readout[1][9])
            subtitlebgs = str(readout[1][10])

            legendbgs = str(readout[1][11])

            for i in range(1, 26):
                if i < len(readout) and len(readout[i]) > 1:
                    try:
                        globals()[f"valuebubble{i}bgs"] = float(readout[i][12])
                    except ValueError:
                        globals()[f"valuebubble{i}bgs"] = 0.0
                else:
                    globals()[f"valuebubble{i}bgs"] = 0.0

            bubbleminbgs = float(readout[1][13])
            bubblemaxbgs = float(readout[1][14])
            
            descriptionxbgs = str(readout[1][15])
            descriptionybgs = str(readout[2][15])
 
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_bgs = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_bgs.type == 'MESH':
                        mesh_name_bgs = selected_obj_bgs.name

                        # Check if the selected object has modifiers
                        if selected_obj_bgs.modifiers:
                                modifier_name_bgs = selected_obj_bgs.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_2"] = npbgs

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_2"] = xminvbgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_3"] = xmaxvbgs

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_22"] = yminvbgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_24"] = ymaxvbgs

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_23"] = decimalbgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_21"] = rnbgs

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_92"] = valuex1bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_93"] = valuex2bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_94"] = valuex3bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_95"] = valuex4bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_96"] = valuex5bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_97"] = valuex6bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_98"] = valuex7bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_99"] = valuex8bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_100"] = valuex9bgs
                                
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_101"] = valuex10bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_102"] = valuex11bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_103"] = valuex12bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_104"] = valuex13bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_105"] = valuex14bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_106"] = valuex15bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_107"] = valuex16bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_108"] = valuex17bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_109"] = valuex18bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_110"] = valuex19bgs
                                
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_111"] = valuex20bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_112"] = valuex21bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_113"] = valuex22bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_114"] = valuex23bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_115"] = valuex24bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_116"] = valuex25bgs



                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_3"] = valuey1bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_55"] = valuey2bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_56"] = valuey3bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_4"] = valuey4bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_57"] = valuey5bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_58"] = valuey6bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_5"] = valuey7bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_59"] = valuey8bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_60"] = valuey9bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_6"] = valuey10bgs

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_61"] = valuey11bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_62"] = valuey12bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_7"] = valuey13bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_63"] = valuey14bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_64"] = valuey15bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_8"] = valuey16bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_65"] = valuey17bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_66"] = valuey18bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_9"] = valuey19bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_67"] = valuey20bgs

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_68"] = valuey21bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_10"] = valuey22bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_69"] = valuey23bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_70"] = valuey24bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_4"] = valuey25bgs

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_38"] = titlebgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Input_39"] = subtitlebgs

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_199"] = legendbgs

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_202"] = valuebubble1bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_203"] = valuebubble2bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_204"] = valuebubble3bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_205"] = valuebubble4bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_206"] = valuebubble5bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_207"] = valuebubble6bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_208"] = valuebubble7bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_209"] = valuebubble8bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_210"] = valuebubble9bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_211"] = valuebubble10bgs

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_212"] = valuebubble11bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_213"] = valuebubble12bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_214"] = valuebubble13bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_215"] = valuebubble14bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_216"] = valuebubble15bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_217"] = valuebubble16bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_218"] = valuebubble17bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_219"] = valuebubble18bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_220"] = valuebubble19bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_221"] = valuebubble20bgs

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_222"] = valuebubble21bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_223"] = valuebubble22bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_224"] = valuebubble23bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_225"] = valuebubble24bgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_226"] = valuebubble25bgs

                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_200"] = bubbleminbgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_201"] = bubblemaxbgs
                                
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_12"] = descriptionxbgs
                                selected_obj_bgs.modifiers[modifier_name_bgs]["Socket_14"] = descriptionybgs

                                print(f"Set modifier input for object '{mesh_name_bgs}' and modifier '{modifier_name_bgs}'.")
                        else:
                                print(f"Selected object '{mesh_name_bgs}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorUSMcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorusmapcsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        usmap_object = bpy.context.view_layer.objects.active
        usmap_object_name = usmap_object.name
        filepath_fullusmap = bpy.path.abspath(mytool.my_pathusmap)
        with open(filepath_fullusmap) as f:
            readout = list(csv.reader(f))
            minvusmap = float(readout[1][2])
            maxvusmap = float(readout[1][3])
            decimalusmap = int(readout[1][4])

            num_elementsstatename = 50
            statename_usmap = []
            for i in range(1, num_elementsstatename + 2):
                statename_usmap.append(str(readout[i][0]))
                
            num_elementsstatevalue = 50
            statevalue_usmap = []
            for i in range(1, num_elementsstatevalue + 2):
                statevalue_usmap.append(float(readout[i][1]))              
                
            titleusmap = str(readout[1][5])
            subtitleusmap = str(readout[1][6])
            sourcetitleusmap = str(readout[1][7])
            sourcesubtitleusmap = str(readout[1][8])
            credittitleusmap = str(readout[1][9])
            creditsubtitleusmap = str(readout[1][10])

            
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_112"] = minvusmap
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_113"] = maxvusmap
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_168"] = decimalusmap
        
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_185"] = statename_usmap[0]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_184"] = statename_usmap[1]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_183"] = statename_usmap[2]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_182"] = statename_usmap[3]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_181"] = statename_usmap[4]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_180"] = statename_usmap[5]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_179"] = statename_usmap[6]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_178"] = statename_usmap[7]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_177"] = statename_usmap[8]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_176"] = statename_usmap[9]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_175"] = statename_usmap[10]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_174"] = statename_usmap[11]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_173"] = statename_usmap[12]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_172"] = statename_usmap[13]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_171"] = statename_usmap[14]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_170"] = statename_usmap[15]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_167"] = statename_usmap[16]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_186"] = statename_usmap[17]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_187"] = statename_usmap[18]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_188"] = statename_usmap[19]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_189"] = statename_usmap[20]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_190"] = statename_usmap[21]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_191"] = statename_usmap[22]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_192"] = statename_usmap[23]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_193"] = statename_usmap[24]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_194"] = statename_usmap[25]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_195"] = statename_usmap[26]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_196"] = statename_usmap[27]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_197"] = statename_usmap[28]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_198"] = statename_usmap[29]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_199"] = statename_usmap[30]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_200"] = statename_usmap[31]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_201"] = statename_usmap[32]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_202"] = statename_usmap[33]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_203"] = statename_usmap[34]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_204"] = statename_usmap[35]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_205"] = statename_usmap[36]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_206"] = statename_usmap[37]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_207"] = statename_usmap[38]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_208"] = statename_usmap[39]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_209"] = statename_usmap[40]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_210"] = statename_usmap[41]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_211"] = statename_usmap[42]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_212"] = statename_usmap[43]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_213"] = statename_usmap[44]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_214"] = statename_usmap[45]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_215"] = statename_usmap[46]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_216"] = statename_usmap[47]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_217"] = statename_usmap[48]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_218"] = statename_usmap[49]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_219"] = statename_usmap[50]



            
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_13"] = statevalue_usmap[0]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_14"] = statevalue_usmap[1] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_15"] = statevalue_usmap[2]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_16"] = statevalue_usmap[3] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_17"] = statevalue_usmap[4]          
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_18"] = statevalue_usmap[5]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_19"] = statevalue_usmap[6] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_20"] = statevalue_usmap[7] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_62"] = statevalue_usmap[8]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_21"] = statevalue_usmap[9]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_22"] = statevalue_usmap[10] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_23"] = statevalue_usmap[11] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_24"] = statevalue_usmap[12] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_25"] = statevalue_usmap[13] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_26"] = statevalue_usmap[14] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_27"] = statevalue_usmap[15]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_12"] = statevalue_usmap[16]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_28"] = statevalue_usmap[17]  
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_29"] = statevalue_usmap[18] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_30"] = statevalue_usmap[19]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_31"] = statevalue_usmap[20]  
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_32"] = statevalue_usmap[21]  
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_33"] = statevalue_usmap[22]  
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_34"] = statevalue_usmap[23] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_166"] = statevalue_usmap[24]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_35"] = statevalue_usmap[25] 
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_36"] = statevalue_usmap[26]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_37"] = statevalue_usmap[27]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_38"] = statevalue_usmap[28]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_39"] = statevalue_usmap[29]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_40"] = statevalue_usmap[30]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_41"] = statevalue_usmap[31]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_42"] = statevalue_usmap[32]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_43"] = statevalue_usmap[33]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_44"] = statevalue_usmap[34]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_45"] = statevalue_usmap[35]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_46"] = statevalue_usmap[36]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_47"] = statevalue_usmap[37]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_48"] = statevalue_usmap[38]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_49"] = statevalue_usmap[39]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_50"] = statevalue_usmap[40]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_51"] = statevalue_usmap[41]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_52"] = statevalue_usmap[42]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_53"] = statevalue_usmap[43]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_54"] = statevalue_usmap[44]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_55"] = statevalue_usmap[45]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_56"] = statevalue_usmap[46]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_57"] = statevalue_usmap[47]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_58"] = statevalue_usmap[48]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_59"] = statevalue_usmap[49]
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_60"] = statevalue_usmap[50]
           
    
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_232"] = titleusmap
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_233"] = subtitleusmap
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_234"] = sourcetitleusmap
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_235"] = sourcesubtitleusmap
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_236"] = credittitleusmap
        bpy.data.objects[usmap_object_name].modifiers["GeometryNodes"]["Input_237"] = creditsubtitleusmap
        
        bpy.context.object.data.update()
        return {'FINISHED'}  
    
class MyoperatorVBcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorvbcsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full4vb = bpy.path.abspath(mytool.my_pathvb)
        with open(filepath_full4vb) as f:
            readout = list(csv.reader(f))
            gregoryvb = int(readout[1][0])
            
            malloryvb = []
            for i in range(1, 9):
                try:
                    malloryvbg = readout[i][2]
                    if malloryvbg:  # check if the string is not empty
                        malloryvb.append(float(malloryvbg))
                    else:
                        malloryvb.append(0.0)
                except IndexError:
                    malloryvb.append(0.0)
            
            olatunjivb1 = float(readout[1][3])
            olatunjivb2 = float(readout[1][4])
            jeopardyvb1 = int(readout[1][5])
            
            hogwashvb = []
            for i in range(1, 9):
                try:
                    hogwashvb.append(str(readout[i][1]))
                except IndexError:
                    hogwashvb.append("")
            
            titlevb1 = str(readout[1][6])
            subtitlevb1 = str(readout[1][7])
            totalvb1 = str(readout[1][8])
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_vbg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_vbg.type == 'MESH':
                        mesh_name_vbg = selected_obj_vbg.name

                        # Check if the selected object has modifiers
                        if selected_obj_vbg.modifiers:
                                modifier_name_vbg = selected_obj_vbg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_57"] = gregoryvb
                                
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_14"] = malloryvb[0]
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_41"] = malloryvb[1]
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_15"] = malloryvb[2]
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_44"] = malloryvb[3]
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_16"] = malloryvb[4]
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_48"] = malloryvb[5]
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_17"] = malloryvb[6]
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_50"] = malloryvb[7]
                                
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_10"] = olatunjivb1
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_11"] = olatunjivb2
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_12"] = jeopardyvb1
                                
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_2"] = hogwashvb[0]
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_42"] = hogwashvb[1]
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_3"] = hogwashvb[2]
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_45"] = hogwashvb[3]
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_4"] = hogwashvb[4]
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_47"] = hogwashvb[5]
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_5"] = hogwashvb[6]
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_49"] = hogwashvb[7]
                                
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_7"] = titlevb1
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_8"] = subtitlevb1
                                selected_obj_vbg.modifiers[modifier_name_vbg]["Input_6"] = totalvb1

                                print(f"Set modifier input for object '{mesh_name_vbg}' and modifier '{modifier_name_vbg}'.")
                        else:
                                print(f"Selected object '{mesh_name_vbg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorPLcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorplcsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full4pl = bpy.path.abspath(mytool.my_pathplbar)
        with open(filepath_full4pl) as f:
            readout = list(csv.reader(f))
            gregorypl = int(readout[1][0])
            
            mallorypl = []
            for i in range(1, 9):
                try:
                    malloryplg = readout[i][2]
                    if malloryplg:  # check if the string is not empty
                        mallorypl.append(float(malloryplg))
                    else:
                        mallorypl.append(0.0)
                except IndexError:
                    mallorypl.append(0.0)
            
            olatunjipl1 = float(readout[1][3])
            olatunjipl2 = float(readout[1][4])
            jeopardypl1 = int(readout[1][5])
            
            hogwashpl = []
            for i in range(1, 9):
                try:
                    hogwashpl.append(str(readout[i][1]))
                except IndexError:
                    hogwashpl.append("")
            
            titlepl1 = str(readout[1][6])
            subtitlepl1 = str(readout[1][7])
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_plg = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_plg.type == 'MESH':
                        mesh_name_plg = selected_obj_plg.name

                        # Check if the selected object has modifiers
                        if selected_obj_plg.modifiers:
                                modifier_name_plg = selected_obj_plg.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_plg.modifiers[modifier_name_plg]["Input_57"] = gregorypl
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_14"] = mallorypl[0]
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_41"] = mallorypl[1]
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_15"] = mallorypl[2]
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_44"] = mallorypl[3]
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_16"] = mallorypl[4]
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_48"] = mallorypl[5]
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_17"] = mallorypl[6]
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_50"] = mallorypl[7]
                                selected_obj_plg.modifiers[modifier_name_plg]["Socket_13"] = olatunjipl1
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_11"] = olatunjipl2
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_12"] = jeopardypl1
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_2"] = hogwashpl[0]
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_42"] = hogwashpl[1]
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_3"] = hogwashpl[2]
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_45"] = hogwashpl[3]
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_4"] = hogwashpl[4]
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_47"] = hogwashpl[5]
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_5"] = hogwashpl[6]
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_49"] = hogwashpl[7]
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_7"] = titlepl1
                                selected_obj_plg.modifiers[modifier_name_plg]["Input_8"] = subtitlepl1

                                print(f"Set modifier input for object '{mesh_name_plg}' and modifier '{modifier_name_plg}'.")
                        else:
                                print(f"Selected object '{mesh_name_plg}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorVBCcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorvbccsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full4vbc = bpy.path.abspath(mytool.my_pathvbc)
        with open(filepath_full4vbc) as f:
            readout = list(csv.reader(f))
            nbvbc = int(readout[1][0])
            
            btvbc = []
            for i in range(1, 9):
                try:
                    btvbc.append(str(readout[i][1]))
                except IndexError:
                    btvbc.append("")
            
            minvvbc1 = float(readout[1][4])
            maxvvbc2 = float(readout[1][5])
            decimalvbc1 = int(readout[1][6])
            
            bvavbc = []
            for i in range(1, 9):
                try:
                    bvavbcg = readout[i][2]
                    if bvavbcg:  # check if the string is not empty
                        bvavbc.append(float(bvavbcg))
                    else:
                        bvavbc.append(0.0)
                except IndexError:
                    bvavbc.append(0.0)
            
            bvbvbc = []
            for i in range(1, 9):
                try:
                    bvbvbcg = readout[i][3]
                    if bvbvbcg:  # check if the string is not empty
                        bvbvbc.append(float(bvbvbcg))
                    else:
                        bvbvbc.append(0.0)
                except IndexError:
                    bvbvbc.append(0.0)
            
            titlevbc1 = str(readout[1][7])
            subtitlevbc1 = str(readout[1][8])
            legendvbc1 = str(readout[1][9])
            legendvbc2 = str(readout[2][9])
            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_vbgc = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_vbgc.type == 'MESH':
                        mesh_name_vbgc = selected_obj_vbgc.name

                        # Check if the selected object has modifiers
                        if selected_obj_vbgc.modifiers:
                                modifier_name_vbgc = selected_obj_vbgc.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_71"] = nbvbc
                                
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_2"] = btvbc[0]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_42"] = btvbc[1]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_3"] = btvbc[2]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_45"] = btvbc[3]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_4"] = btvbc[4]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_47"] = btvbc[5]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_5"] = btvbc[6]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_49"] = btvbc[7]
                                
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_10"] = minvvbc1
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_11"] = maxvvbc2
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_12"] = decimalvbc1
                                
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_14"] = bvavbc[0]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_41"] = bvavbc[1]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_15"] = bvavbc[2]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_44"] = bvavbc[3]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_16"] = bvavbc[4]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_48"] = bvavbc[5]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_17"] = bvavbc[6]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_50"] = bvavbc[7]
                                
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_57"] = bvbvbc[0]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_58"] = bvbvbc[1]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_59"] = bvbvbc[2]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_64"] = bvbvbc[3]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_60"] = bvbvbc[4]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_61"] = bvbvbc[5]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_62"] = bvbvbc[6]
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_63"] = bvbvbc[7]
                                
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_7"] = titlevbc1
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_8"] = subtitlevbc1
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_70"] = legendvbc1
                                selected_obj_vbgc.modifiers[modifier_name_vbgc]["Input_69"] = legendvbc2


                                print(f"Set modifier input for object '{mesh_name_vbgc}' and modifier '{modifier_name_vbgc}'.")
                        else:
                                print(f"Selected object '{mesh_name_vbgc}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}
    
class MyoperatorVBMcsv(bpy.types.Operator):
    bl_idname = "mesh.mycubeoperatorvbmcsv"
    bl_label = "Import csv"
    
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        filepath_full4vbm = bpy.path.abspath(mytool.my_pathvbm)
        with open(filepath_full4vbm) as f:
            readout = list(csv.reader(f))
            nbvbm = int(readout[1][0])
            nvbvbm = int(readout[1][12])
            
            btvbm = []
            for i in range(1, 9):
                try:
                    btvbm.append(str(readout[i][1]))
                except IndexError:
                    btvbm.append("")

            minvvbm1 = float(readout[1][6])
            maxvvbm2 = float(readout[1][7])
            decimalvbm1 = int(readout[1][8])

            bvavbm = []
            for i in range(1, 9):
                try:
                    bvavbmg = readout[i][2]
                    if bvavbmg:  # check if the string is not empty
                        bvavbm.append(float(bvavbmg))
                    else:
                        bvavbm.append(0.0)
                except IndexError:
                    bvavbm.append(0.0)
            
            bvbvbm = []
            for i in range(1, 9):
                try:
                    bvbvbmg = readout[i][3]
                    if bvbvbmg:  # check if the string is not empty
                        bvbvbm.append(float(bvbvbmg))
                    else:
                        bvbvbm.append(0.0)
                except IndexError:
                    bvbvbm.append(0.0)

            bvcvbm = []
            for i in range(1, 9):
                try:
                    bvcvbmg = readout[i][4]
                    if bvcvbmg:  # check if the string is not empty
                        bvcvbm.append(float(bvcvbmg))
                    else:
                        bvcvbm.append(0.0)
                except IndexError:
                    bvcvbm.append(0.0)

            bvdvbm = []
            for i in range(1, 9):
                try:
                    bvdvbmg = readout[i][5]
                    if bvdvbmg:  # check if the string is not empty
                        bvdvbm.append(float(bvdvbmg))
                    else:
                        bvdvbm.append(0.0)
                except IndexError:
                    bvdvbm.append(0.0)


            titlevbm1 = str(readout[1][9])
            subtitlevbm1 = str(readout[1][10])

            legendvbm = []
            for i in range(1, 5):
                try:
                    legendvbm.append(str(readout[i][11]))
                except IndexError:
                    legendvbm.append("")

            
        # Ensure an object is selected
        if bpy.context.selected_objects:
                selected_obj_vbgm = bpy.context.active_object  # Get the active (selected) object

                if selected_obj_vbgm.type == 'MESH':
                        mesh_name_vbgm = selected_obj_vbgm.name

                        # Check if the selected object has modifiers
                        if selected_obj_vbgm.modifiers:
                                modifier_name_vbgm = selected_obj_vbgm.modifiers.active.name  # Get the name of the active modifier

                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_71"] = nbvbm
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_36"] = nvbvbm
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_2"] = btvbm[0]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_42"] = btvbm[1]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_3"] = btvbm[2]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_45"] = btvbm[3]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_4"] = btvbm[4]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_47"] = btvbm[5]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_5"] = btvbm[6]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_49"] = btvbm[7]
                                
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_10"] = minvvbm1
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_11"] = maxvvbm2
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_12"] = decimalvbm1

                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_14"] = bvavbm[0]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_41"] = bvavbm[1]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_15"] = bvavbm[2]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_44"] = bvavbm[3]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_16"] = bvavbm[4]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_48"] = bvavbm[5]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_17"] = bvavbm[6]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_50"] = bvavbm[7]

                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_57"] = bvbvbm[0]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_58"] = bvbvbm[1]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_59"] = bvbvbm[2]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_64"] = bvbvbm[3]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_60"] = bvbvbm[4]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_61"] = bvbvbm[5]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_62"] = bvbvbm[6]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_63"] = bvbvbm[7]

                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_0"] = bvcvbm[0]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_2"] = bvcvbm[1]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_4"] = bvcvbm[2]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_6"] = bvcvbm[3]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_8"] = bvcvbm[4]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_10"] = bvcvbm[5]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_12"] = bvcvbm[6]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_14"] = bvcvbm[7]

                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_1"] = bvdvbm[0]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_3"] = bvdvbm[1]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_5"] = bvdvbm[2]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_7"] = bvdvbm[3]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_9"] = bvdvbm[4]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_11"] = bvdvbm[5]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_13"] = bvdvbm[6]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_15"] = bvdvbm[7]



                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_7"] = titlevbm1
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_8"] = subtitlevbm1
                                
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_70"] = legendvbm[0]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Input_69"] = legendvbm[1]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_43"] = legendvbm[2]
                                selected_obj_vbgm.modifiers[modifier_name_vbgm]["Socket_44"] = legendvbm[3]


                                print(f"Set modifier input for object '{mesh_name_vbgm}' and modifier '{modifier_name_vbgm}'.")
                        else:
                                print(f"Selected object '{mesh_name_vbgm}' has no modifiers.")
                else:
                        print("Selected object is not a mesh.")
        else:
                print("No object selected.")
        bpy.context.object.data.update()
        return {'FINISHED'}     
        
class ADDONNAME_OT_my_opc(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorgg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringc = mytool.my_float2
        frc = bpy.context.scene.render.fps
        jeffc = stringc*frc
        onemorec =  (mytool.my_float*frc) + jeffc
        bobc = onemorec 

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobc = int(bobc)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffc
                kps.handle_left[0] = jeffc-30
                kps.handle_right[0] = jeffc
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobc
                kpz.handle_left[0] = bobc-60
                kpz.handle_right[0] = bobc+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobc+frc


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_op23cAL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operator23cal"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        string23CA = mytool.my_float23CA
        fr23CA = bpy.context.scene.render.fps
        jeff23cal = string23CA*fr23CA
        onemorecal =  (mytool.my_float23CLA*fr23CA) + jeff23cal
        bob23cal = onemorecal       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bob23cal = int(bob23cal)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeff23cal
                kps.handle_left[0] = jeff23cal-30
                kps.handle_right[0] = jeff23cal
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bob23cal
                kpz.handle_left[0] = bob23cal-30
                kpz.handle_right[0] = bob23cal+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bob23cal+fr23CA


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_op23cBL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operator23cbl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_49"]'
        index = 0
        string23CB = mytool.my_float23CB
        fr23CB = bpy.context.scene.render.fps
        jeff23cbl = string23CB*fr23CB
        onemorecbl =  (mytool.my_float23CLB*fr23CB) + jeff23cbl
        bob23cbl = onemorecbl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bob23cbl = int(bob23cbl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeff23cbl
                kps.handle_left[0] = jeff23cbl-30
                kps.handle_right[0] = jeff23cbl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bob23cbl
                kpz.handle_left[0] = bob23cbl-30
                kpz.handle_right[0] = bob23cbl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bob23cbl+fr23CB


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_op23cCL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operator23ccl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_50"]'
        index = 0
        string23CC = mytool.my_float23CC
        fr23CC = bpy.context.scene.render.fps
        jeff23ccl = string23CC*fr23CC
        onemoreccl =  (mytool.my_float23CLC*fr23CC) + jeff23ccl
        bob23ccl = onemoreccl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bob23ccl = int(bob23ccl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeff23ccl
                kps.handle_left[0] = jeff23ccl-30
                kps.handle_right[0] = jeff23ccl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bob23ccl
                kpz.handle_left[0] = bob23ccl-30
                kpz.handle_right[0] = bob23ccl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bob23ccl+fr23CC


             
        return {'FINISHED'}
    
    
class ADDONNAME_OT_my_oprgAL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorrgal"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringRGA = mytool.my_floatRGA
        frRGA = bpy.context.scene.render.fps
        jeffrgal = stringRGA*frRGA
        onemorecal =  (mytool.my_floatRGLA*frRGA) + jeffrgal
        bobrgal = onemorecal       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobrgal = int(bobrgal)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffrgal
                kps.handle_left[0] = jeffrgal-30
                kps.handle_right[0] = jeffrgal
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobrgal
                kpz.handle_left[0] = bobrgal-30
                kpz.handle_right[0] = bobrgal+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobrgal+frRGA


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_oprgBL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorrgbl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_49"]'
        index = 0
        stringRGB = mytool.my_floatRGB
        frRGB = bpy.context.scene.render.fps
        jeffrgbl = stringRGB*frRGB
        onemorecbl =  (mytool.my_floatRGLB*frRGB) + jeffrgbl
        bobrgbl = onemorecbl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobrgbl = int(bobrgbl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffrgbl
                kps.handle_left[0] = jeffrgbl-30
                kps.handle_right[0] = jeffrgbl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobrgbl
                kpz.handle_left[0] = bobrgbl-30
                kpz.handle_right[0] = bobrgbl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobrgbl+frRGB


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_oprgCL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorrgcl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_50"]'
        index = 0
        stringRGC = mytool.my_floatRGC
        frRGC = bpy.context.scene.render.fps
        jeffrgcl = stringRGC*frRGC
        onemoreccl =  (mytool.my_floatRGLC*frRGC) + jeffrgcl
        bobrgcl = onemoreccl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobrgcl = int(bobrgcl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffrgcl
                kps.handle_left[0] = jeffrgcl-30
                kps.handle_right[0] = jeffrgcl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobrgcl
                kpz.handle_left[0] = bobrgcl-30
                kpz.handle_right[0] = bobrgcl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobrgcl+frRGC


             
        return {'FINISHED'}
    

class ADDONNAME_OT_my_op23pAL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operator23pal"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_25"]'
        index = 0
        string23PA = mytool.my_float23PA
        fr23PA = bpy.context.scene.render.fps
        jeff23pal = string23PA*fr23PA
        onemorepal =  (mytool.my_float23PLA*fr23PA) + jeff23pal
        bob23pal = onemorepal       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bob23pal = int(bob23pal)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeff23pal
                kps.handle_left[0] = jeff23pal-30
                kps.handle_right[0] = jeff23pal
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bob23pal
                kpz.handle_left[0] = bob23pal-30
                kpz.handle_right[0] = bob23pal+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bob23pal+fr23PA


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_op23pBL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operator23pbl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_44"]'
        index = 0
        string23PB = mytool.my_float23PB
        fr23PB = bpy.context.scene.render.fps
        jeff23pbl = string23PB*fr23PB
        onemorepbl =  (mytool.my_float23PLB*fr23PB) + jeff23pbl
        bob23pbl = onemorepbl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bob23pbl = int(bob23pbl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeff23pbl
                kps.handle_left[0] = jeff23pbl-30
                kps.handle_right[0] = jeff23pbl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bob23pbl
                kpz.handle_left[0] = bob23pbl-30
                kpz.handle_right[0] = bob23pbl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bob23pbl+fr23PB


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_op23pCL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operator23pcl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_45"]'
        index = 0
        string23PC = mytool.my_float23PC
        fr23PC = bpy.context.scene.render.fps
        jeff23pcl = string23PC*fr23PC
        onemorepcl =  (mytool.my_float23PLC*fr23PC) + jeff23pcl
        bob23pcl = onemorepcl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bob23pcl = int(bob23pcl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeff23pcl
                kps.handle_left[0] = jeff23pcl-30
                kps.handle_right[0] = jeff23pcl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bob23pcl
                kpz.handle_left[0] = bob23pcl-30
                kpz.handle_right[0] = bob23pcl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bob23pcl+fr23PC


             
        return {'FINISHED'}

class ADDONNAME_OT_my_opLGAL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorlgal"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_44"]'
        index = 0
        stringLGAC = mytool.my_floatLGA
        frLGAC = bpy.context.scene.render.fps
        jefflga = stringLGAC*frLGAC
        onemorelga =  (mytool.my_floatLGLA*frLGAC) + jefflga
        boblga = onemorelga     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                boblga = int(boblga)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jefflga
                kps.handle_left[0] = jefflga-6
                kps.handle_right[0] = jefflga
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = boblga
                kpz.handle_left[0] = boblga-6
                kpz.handle_right[0] = boblga+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = boblga+(frLGAC*2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opLGBL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorlgbl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_89"]'
        index = 0
        stringLGBC = mytool.my_floatLGB
        frLGBC = bpy.context.scene.render.fps
        jefflgb = stringLGBC*frLGBC
        onemorelgb =  (mytool.my_floatLGLB*frLGBC) + jefflgb
        boblgb = onemorelgb    

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                boblgb = int(boblgb)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jefflgb
                kps.handle_left[0] = jefflgb-6
                kps.handle_right[0] = jefflgb
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = boblgb
                kpz.handle_left[0] = boblgb-6
                kpz.handle_right[0] = boblgb+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = boblgb+(frLGBC*2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opLGCL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorlgcl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_28"]'
        index = 0
        stringLGCC = mytool.my_floatLGC
        frLGCC = bpy.context.scene.render.fps
        jefflgc = stringLGCC*frLGCC
        onemorelgc =  (mytool.my_floatLGLC*frLGCC) + jefflgc
        boblgc = onemorelgc   

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                boblgc = int(boblgc)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jefflgc
                kps.handle_left[0] = jefflgc-6
                kps.handle_right[0] = jefflgc
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = boblgc
                kpz.handle_left[0] = boblgc-6
                kpz.handle_right[0] = boblgc+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = boblgc+(frLGCC*2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opLGDL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorlgdl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_29"]'
        index = 0
        stringLGDC = mytool.my_floatLGD
        frLGDC = bpy.context.scene.render.fps
        jefflgd = stringLGDC*frLGDC
        onemorelgd =  (mytool.my_floatLGLD*frLGDC) + jefflgd
        boblgd = onemorelgd   

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                boblgd = int(boblgd)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jefflgd
                kps.handle_left[0] = jefflgd-6
                kps.handle_right[0] = jefflgd
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = boblgd
                kpz.handle_left[0] = boblgd-6
                kpz.handle_right[0] = boblgd+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = boblgd+(frLGDC*2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opLGEL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorlgel"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringLGEC = mytool.my_floatLGE
        frLGEC = bpy.context.scene.render.fps
        jefflge = stringLGEC*frLGEC
        onemorelge =  (mytool.my_floatLGLE*frLGEC) + jefflge
        boblge = onemorelge 

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                boblge = int(boblge)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jefflge
                kps.handle_left[0] = jefflge-6
                kps.handle_right[0] = jefflge
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = boblge
                kpz.handle_left[0] = boblge-6
                kpz.handle_right[0] = boblge+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = boblge+(frLGEC*2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opLGFL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorlgfl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_31"]'
        index = 0
        stringLGFC = mytool.my_floatLGF
        frLGFC = bpy.context.scene.render.fps
        jefflgf = stringLGFC*frLGFC
        onemorelgf =  (mytool.my_floatLGLF*frLGFC) + jefflgf
        boblgf = onemorelgf    

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                boblgf = int(boblgf)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jefflgf
                kps.handle_left[0] = jefflgf-6
                kps.handle_right[0] = jefflgf
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = boblgf
                kpz.handle_left[0] = boblgf-6
                kpz.handle_right[0] = boblgf+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = boblgf+(frLGFC*2)


             
        return {'FINISHED'}
    

class ADDONNAME_OT_my_opLGGL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorlggl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_32"]'
        index = 0
        stringLGGC = mytool.my_floatLGG
        frLGGC = bpy.context.scene.render.fps
        jefflgg = stringLGGC*frLGGC
        onemorelgg =  (mytool.my_floatLGLG*frLGGC) + jefflgg
        boblgg = onemorelgg 

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                boblgg = int(boblgg)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jefflgg
                kps.handle_left[0] = jefflgg-6
                kps.handle_right[0] = jefflgg
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = boblgg
                kpz.handle_left[0] = boblgg-6
                kpz.handle_right[0] = boblgg+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = boblgg+(frLGGC*2)


             
        return {'FINISHED'}

    
class ADDONNAME_OT_my_opLGHL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorlghl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_33"]'
        index = 0
        stringLGHC = mytool.my_floatLGH
        frLGHC = bpy.context.scene.render.fps
        jefflgh = stringLGHC*frLGHC
        onemorelgh =  (mytool.my_floatLGLH*frLGHC) + jefflgh
        boblgh = onemorelgh   

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                boblgh = int(boblgh)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jefflgh
                kps.handle_left[0] = jefflgh-6
                kps.handle_right[0] = jefflgh
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = boblgh
                kpz.handle_left[0] = boblgh-6
                kpz.handle_right[0] = boblgh+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = boblgh+(frLGHC*2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONALINEAL(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonalinea"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_26"]'
        index = 0
        stringCALINEA = mytool.my_floatCOMPARISONALINEA
        frCALINEA = bpy.context.scene.render.fps
        jeffCALINEal = stringCALINEA * frCALINEA
        onemorecalineal = (mytool.my_floatCOMPARISONALINELA * frCALINEA) + jeffCALINEal
        bobCALINEal = onemorecalineal       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCALINEal = int(bobCALINEal)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCALINEal
                kps.handle_left[0] = jeffCALINEal - 6
                kps.handle_right[0] = jeffCALINEal
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCALINEal
                kpz.handle_left[0] = bobCALINEal - 6
                kpz.handle_right[0] = bobCALINEal + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCALINEal + frCALINEA

        return {'FINISHED'}
    

class ADDONNAME_OT_my_opCOMPARISONALINEB(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonalineb"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_27"]'
        index = 0
        stringCALINEB = mytool.my_floatCOMPARISONALINEB
        frCALINEB = bpy.context.scene.render.fps
        jeffCALINEb = stringCALINEB * frCALINEB
        onemorecalineb = (mytool.my_floatCOMPARISONALINELB * frCALINEB) + jeffCALINEb
        bobCALINEb = onemorecalineb       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCALINEb = int(bobCALINEb)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCALINEb
                kps.handle_left[0] = jeffCALINEb - 6
                kps.handle_right[0] = jeffCALINEb
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCALINEb
                kpz.handle_left[0] = bobCALINEb - 6
                kpz.handle_right[0] = bobCALINEb + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCALINEb + frCALINEB

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONALINEC(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonalinec"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_28"]'
        index = 0
        stringCALINEC = mytool.my_floatCOMPARISONALINEC
        frCALINEC = bpy.context.scene.render.fps
        jeffCALINEc = stringCALINEC * frCALINEC
        onemorecalinec = (mytool.my_floatCOMPARISONALINELC * frCALINEC) + jeffCALINEc
        bobCALINEc = onemorecalinec       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCALINEc = int(bobCALINEc)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCALINEc
                kps.handle_left[0] = jeffCALINEc - 6
                kps.handle_right[0] = jeffCALINEc
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCALINEc
                kpz.handle_left[0] = bobCALINEc - 6
                kpz.handle_right[0] = bobCALINEc + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCALINEc + frCALINEC

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONALINED(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonalined"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_29"]'
        index = 0
        stringCALINED = mytool.my_floatCOMPARISONALINED
        frCALINED = bpy.context.scene.render.fps
        jeffCALINEd = stringCALINED * frCALINED
        onemorecalined = (mytool.my_floatCOMPARISONALINELD * frCALINED) + jeffCALINEd
        bobCALINEd = onemorecalined       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCALINEd = int(bobCALINEd)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCALINEd
                kps.handle_left[0] = jeffCALINEd - 6
                kps.handle_right[0] = jeffCALINEd
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCALINEd
                kpz.handle_left[0] = bobCALINEd - 6
                kpz.handle_right[0] = bobCALINEd + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCALINEd + frCALINED

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONALINEE(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonealinee"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringCALINEE = mytool.my_floatCOMPARISONALINEE
        frCALINEE = bpy.context.scene.render.fps
        jeffCALINEe = stringCALINEE * frCALINEE
        onemorecalinee = (mytool.my_floatCOMPARISONALINELE * frCALINEE) + jeffCALINEe
        bobCALINEe = onemorecalinee       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCALINEe = int(bobCALINEe)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCALINEe
                kps.handle_left[0] = jeffCALINEe - 6
                kps.handle_right[0] = jeffCALINEe
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCALINEe
                kpz.handle_left[0] = bobCALINEe - 6
                kpz.handle_right[0] = bobCALINEe + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCALINEe + frCALINEE

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONALINEF(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonalinef"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_31"]'
        index = 0
        stringCALINEF = mytool.my_floatCOMPARISONALINEF
        frCALINEF = bpy.context.scene.render.fps
        jeffCALINEF = stringCALINEF * frCALINEF
        onemorecalinef = (mytool.my_floatCOMPARISONALINELF * frCALINEF) + jeffCALINEF
        bobCALINEF = onemorecalinef       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCALINEF = int(bobCALINEF)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCALINEF
                kps.handle_left[0] = jeffCALINEF - 6
                kps.handle_right[0] = jeffCALINEF
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCALINEF
                kpz.handle_left[0] = bobCALINEF - 6
                kpz.handle_right[0] = bobCALINEF + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCALINEF + frCALINEF

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONALINEG(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonalineg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_32"]'
        index = 0
        stringCALINEG = mytool.my_floatCOMPARISONALINEG
        frCALINEG = bpy.context.scene.render.fps
        jeffCALINEg = stringCALINEG * frCALINEG
        onemorecalineg = (mytool.my_floatCOMPARISONALINELG * frCALINEG) + jeffCALINEg
        bobCALINEg = onemorecalineg       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCALINEg = int(bobCALINEg)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCALINEg
                kps.handle_left[0] = jeffCALINEg - 6
                kps.handle_right[0] = jeffCALINEg
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCALINEg
                kpz.handle_left[0] = bobCALINEg - 6
                kpz.handle_right[0] = bobCALINEg + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCALINEg + frCALINEG

        return {'FINISHED'}

    
class ADDONNAME_OT_my_opCOMPARISONALINEH(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonalineh"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_33"]'
        index = 0
        stringCALINEH = mytool.my_floatCOMPARISONALINEH
        frCALINEH = bpy.context.scene.render.fps
        jeffCALINEh = stringCALINEH * frCALINEH
        onemorecalineh = (mytool.my_floatCOMPARISONALINELH * frCALINEH) + jeffCALINEh
        bobCALINEh = onemorecalineh       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCALINEh = int(bobCALINEh)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCALINEh
                kps.handle_left[0] = jeffCALINEh - 6
                kps.handle_right[0] = jeffCALINEh
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCALINEh
                kpz.handle_left[0] = bobCALINEh - 6
                kpz.handle_right[0] = bobCALINEh + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCALINEh + frCALINEH

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBLINEA(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonblinea"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_46"]'
        index = 0
        stringCBLINEA = mytool.my_floatCOMPARISONBLINEA
        frCBLINEA = bpy.context.scene.render.fps
        jeffCBLINEa = stringCBLINEA * frCBLINEA
        onemoreblinea = (mytool.my_floatCOMPARISONBLINELA * frCBLINEA) + jeffCBLINEa
        bobCBLINEa = onemoreblinea       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBLINEa = int(bobCBLINEa)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBLINEa
                kps.handle_left[0] = jeffCBLINEa - 6
                kps.handle_right[0] = jeffCBLINEa
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBLINEa
                kpz.handle_left[0] = bobCBLINEa - 6
                kpz.handle_right[0] = bobCBLINEa + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBLINEa + frCBLINEA

        return {'FINISHED'}


class ADDONNAME_OT_my_opCOMPARISONBLINEB(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonblineb"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_47"]'
        index = 0
        stringCBLINEB = mytool.my_floatCOMPARISONBLINEB
        frCBLINEB = bpy.context.scene.render.fps
        jeffCBLINEb = stringCBLINEB * frCBLINEB
        onemoreblineb = (mytool.my_floatCOMPARISONBLINELB * frCBLINEB) + jeffCBLINEb
        bobCBLINEb = onemoreblineb       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBLINEb = int(bobCBLINEb)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBLINEb
                kps.handle_left[0] = jeffCBLINEb - 6
                kps.handle_right[0] = jeffCBLINEb
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBLINEb
                kpz.handle_left[0] = bobCBLINEb - 6
                kpz.handle_right[0] = bobCBLINEb + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBLINEb + frCBLINEB

        return {'FINISHED'}


class ADDONNAME_OT_my_opCOMPARISONBLINEC(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonblinec"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_48"]'
        index = 0
        stringCBLINEC = mytool.my_floatCOMPARISONBLINEC
        frCBLINEC = bpy.context.scene.render.fps
        jeffCBLINEc = stringCBLINEC * frCBLINEC
        onemoreblinec = (mytool.my_floatCOMPARISONBLINELC * frCBLINEC) + jeffCBLINEc
        bobCBLINEc = onemoreblinec       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBLINEc = int(bobCBLINEc)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBLINEc
                kps.handle_left[0] = jeffCBLINEc - 6
                kps.handle_right[0] = jeffCBLINEc
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBLINEc
                kpz.handle_left[0] = bobCBLINEc - 6
                kpz.handle_right[0] = bobCBLINEc + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBLINEc + frCBLINEC

        return {'FINISHED'}


class ADDONNAME_OT_my_opCOMPARISONBLINED(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonblined"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_49"]'
        index = 0
        stringCBLINED = mytool.my_floatCOMPARISONBLINED
        frCBLINED = bpy.context.scene.render.fps
        jeffCBINEd = stringCBLINED * frCBLINED
        onemoreblined = (mytool.my_floatCOMPARISONBLINELD * frCBLINED) + jeffCBINEd
        bobCBINEd = onemoreblined       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBINEd = int(bobCBINEd)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBINEd
                kps.handle_left[0] = jeffCBINEd - 6
                kps.handle_right[0] = jeffCBINEd
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBINEd
                kpz.handle_left[0] = bobCBINEd - 6
                kpz.handle_right[0] = bobCBINEd + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBINEd + frCBLINED

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONBLINEE(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisoneblinee"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_50"]'
        index = 0
        stringCBLINEE = mytool.my_floatCOMPARISONBLINEE
        frCBLINEE = bpy.context.scene.render.fps
        jeffCBLINEe = stringCBLINEE * frCBLINEE
        onemoreblinee = (mytool.my_floatCOMPARISONBLINELE * frCBLINEE) + jeffCBLINEe
        bobCBLINEe = onemoreblinee       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBLINEe = int(bobCBLINEe)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBLINEe
                kps.handle_left[0] = jeffCBLINEe - 6
                kps.handle_right[0] = jeffCBLINEe
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBLINEe
                kpz.handle_left[0] = bobCBLINEe - 6
                kpz.handle_right[0] = bobCBLINEe + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBLINEe + frCBLINEE

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBLINEF(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonblinef"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_51"]'
        index = 0
        stringCBLINEF = mytool.my_floatCOMPARISONBLINEF
        frCBLINEF = bpy.context.scene.render.fps
        jeffCBLINEF = stringCBLINEF * frCBLINEF
        onemoreblinef = (mytool.my_floatCOMPARISONBLINELF * frCBLINEF) + jeffCBLINEF
        bobCBLINEF = onemoreblinef       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBLINEF = int(bobCBLINEF)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBLINEF
                kps.handle_left[0] = jeffCBLINEF - 6
                kps.handle_right[0] = jeffCBLINEF
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBLINEF
                kpz.handle_left[0] = bobCBLINEF - 6
                kpz.handle_right[0] = bobCBLINEF + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBLINEF + frCBLINEF

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBLINEG(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonblineg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_52"]'
        index = 0
        stringCBLINEG = mytool.my_floatCOMPARISONBLINEG
        frCBLINEG = bpy.context.scene.render.fps
        jeffCBLINEg = stringCBLINEG * frCBLINEG
        onemoreblineg = (mytool.my_floatCOMPARISONBLINELG * frCBLINEG) + jeffCBLINEg
        bobCBLINEg = onemoreblineg       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBLINEg = int(bobCBLINEg)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBLINEg
                kps.handle_left[0] = jeffCBLINEg - 6
                kps.handle_right[0] = jeffCBLINEg
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBLINEg
                kpz.handle_left[0] = bobCBLINEg - 6
                kpz.handle_right[0] = bobCBLINEg + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBLINEg + frCBLINEG

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBLINEH(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonblineh"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_53"]'
        index = 0
        stringCBLINEH = mytool.my_floatCOMPARISONBLINEH
        frCBLINEH = bpy.context.scene.render.fps
        jeffCBLINEh = stringCBLINEH * frCBLINEH
        onemoreblineh = (mytool.my_floatCOMPARISONBLINELH * frCBLINEH) + jeffCBLINEh
        bobCBLINEh = onemoreblineh       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBLINEh = int(bobCBLINEh)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBLINEh
                kps.handle_left[0] = jeffCBLINEh - 6
                kps.handle_right[0] = jeffCBLINEh
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBLINEh
                kpz.handle_left[0] = bobCBLINEh - 6
                kpz.handle_right[0] = bobCBLINEh + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBLINEh + frCBLINEH

        return {'FINISHED'}



class ADDONNAME_OT_my_opMGAL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormgal"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringMGAC = mytool.my_floatMGA
        frMGAC = bpy.context.scene.render.fps
        jeffmga = stringMGAC*frMGAC
        onemoremga =  (mytool.my_floatMGLA*frMGAC) + jeffmga
        bobmga = onemoremga     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmga = int(bobmga)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmga
                kps.handle_left[0] = jeffmga-6
                kps.handle_right[0] = jeffmga
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmga
                kpz.handle_left[0] = bobmga-6
                kpz.handle_right[0] = bobmga+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmga+(frMGAC*2)


             
        return {'FINISHED'}


class ADDONNAME_OT_my_opMGBL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormgbl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_31"]'
        index = 0
        stringMGBC = mytool.my_floatMGB
        frMGBC = bpy.context.scene.render.fps
        jeffmgb = stringMGBC*frMGBC
        onemoremgb =  (mytool.my_floatMGLB*frMGBC) + jeffmgb
        bobmgb = onemoremgb    

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmgb = int(bobmgb)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmgb
                kps.handle_left[0] = jeffmgb-6
                kps.handle_right[0] = jeffmgb
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmgb
                kpz.handle_left[0] = bobmgb-6
                kpz.handle_right[0] = bobmgb+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmgb+(frMGBC*2)


             
        return {'FINISHED'}

class ADDONNAME_OT_my_opMGCL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormgcl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_32"]'
        index = 0
        stringMGCC = mytool.my_floatMGC
        frMGCC = bpy.context.scene.render.fps
        jeffmgc = stringMGCC*frMGCC
        onemoremgc =  (mytool.my_floatMGLC*frMGCC) + jeffmgc
        bobmgc = onemoremgc   

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmgc = int(bobmgc)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmgc
                kps.handle_left[0] = jeffmgc-6
                kps.handle_right[0] = jeffmgc
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmgc
                kpz.handle_left[0] = bobmgc-6
                kpz.handle_right[0] = bobmgc+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmgc+(frMGCC*2)


             
        return {'FINISHED'}

class ADDONNAME_OT_my_opMGDL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormgdl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_33"]'
        index = 0
        stringMGDC = mytool.my_floatMGD
        frMGDC = bpy.context.scene.render.fps
        jeffmgd = stringMGDC*frMGDC
        onemoremgd =  (mytool.my_floatMGLD*frMGDC) + jeffmgd
        bobmgd = onemoremgd   

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmgd = int(bobmgd)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmgd
                kps.handle_left[0] = jeffmgd-6
                kps.handle_right[0] = jeffmgd
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmgd
                kpz.handle_left[0] = bobmgd-6
                kpz.handle_right[0] = bobmgd+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmgd+(frMGDC*2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMGEL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormgel"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_34"]'
        index = 0
        stringMGEC = mytool.my_floatMGE
        frMGEC = bpy.context.scene.render.fps
        jeffmge = stringMGEC*frMGEC
        onemoremge =  (mytool.my_floatMGLE*frMGEC) + jeffmge
        bobmge = onemoremge 

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmge = int(bobmge)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmge
                kps.handle_left[0] = jeffmge-6
                kps.handle_right[0] = jeffmge
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmge
                kpz.handle_left[0] = bobmge-6
                kpz.handle_right[0] = bobmge+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmge+(frMGEC*2)


             
        return {'FINISHED'}

    
class ADDONNAME_OT_my_opMGFL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormgfl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_35"]'
        index = 0
        stringMGFC = mytool.my_floatMGF
        frMGFC = bpy.context.scene.render.fps
        jeffmgf = stringMGFC*frMGFC
        onemoremgf =  (mytool.my_floatMGLF*frMGFC) + jeffmgf
        bobmgf = onemoremgf    

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmgf = int(bobmgf)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmgf
                kps.handle_left[0] = jeffmgf-6
                kps.handle_right[0] = jeffmgf
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmgf
                kpz.handle_left[0] = bobmgf-6
                kpz.handle_right[0] = bobmgf+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmgf+(frMGFC*2)


             
        return {'FINISHED'}
    

class ADDONNAME_OT_my_opMGGL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormggl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_36"]'
        index = 0
        stringMGGC = mytool.my_floatMGG
        frMGGC = bpy.context.scene.render.fps
        jeffmgg = stringMGGC*frMGGC
        onemoremgg =  (mytool.my_floatMGLG*frMGGC) + jeffmgg
        bobmgg = onemoremgg 

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmgg = int(bobmgg)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmgg
                kps.handle_left[0] = jeffmgg-6
                kps.handle_right[0] = jeffmgg
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmgg
                kpz.handle_left[0] = bobmgg-6
                kpz.handle_right[0] = bobmgg+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = boblgg+(frMGGC*2)


             
        return {'FINISHED'}
    
    
class ADDONNAME_OT_my_opMGHL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormghl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_37"]'
        index = 0
        stringMGHC = mytool.my_floatMGH
        frMGHC = bpy.context.scene.render.fps
        jeffmgh = stringMGHC*frMGHC
        onemoremgh =  (mytool.my_floatMGLH*frMGHC) + jeffmgh
        bobmgh = onemoremgh   

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmgh = int(bobmgh)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmgh
                kps.handle_left[0] = jeffmgh-6
                kps.handle_right[0] = jeffmgh
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmgh
                kpz.handle_left[0] = bobmgh-6
                kpz.handle_right[0] = bobmgh+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmgh+(frMGHC*2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opSCATTERA(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorscattera"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringCASCATTERA = mytool.my_floatSCATTERA
        frCASCATTERA = bpy.context.scene.render.fps
        jeffCASCATTERa = stringCASCATTERA * frCASCATTERA
        onemorescattera = (mytool.my_floatSCATTERLA * frCASCATTERA) + jeffCASCATTERa
        bobCASCATTERa = onemorescattera       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCASCATTERa = int(bobCASCATTERa)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCASCATTERa
                kps.handle_left[0] = jeffCASCATTERa
                kps.handle_right[0] = jeffCASCATTERa
                kps.handle_right[1] = 0.699        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCASCATTERa
                kpz.handle_left[0] = bobCASCATTERa - 56
                kpz.handle_right[0] = bobCASCATTERa
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCASCATTERa + frCASCATTERA

        return {'FINISHED'}
    
    
class ADDONNAME_OT_my_opBUBBLEA(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorbubblea"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringCABUBBLEA = mytool.my_floatBUBBLEA
        frCABUBBLEA = bpy.context.scene.render.fps
        jeffCABUBBLEa = stringCABUBBLEA * frCABUBBLEA
        onemorebubblea = (mytool.my_floatBUBBLELA * frCABUBBLEA) + jeffCABUBBLEa
        bobCABUBBLEa = onemorebubblea       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCABUBBLEa = int(bobCABUBBLEa)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCABUBBLEa
                kps.handle_left[0] = jeffCABUBBLEa
                kps.handle_right[0] = jeffCABUBBLEa
                kps.handle_right[1] = 0.699        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCABUBBLEa
                kpz.handle_left[0] = bobCABUBBLEa - 56
                kpz.handle_right[0] = bobCABUBBLEa
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCABUBBLEa + frCABUBBLEA

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONAMOUNTA(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonamounta"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_46"]'
        index = 0
        stringCAMOUNTA = mytool.my_floatCOMPARISONAMOUNTA
        frCAMOUNTA = bpy.context.scene.render.fps
        jeffCAMOUNTa = stringCAMOUNTA * frCAMOUNTA
        onemoreamounta = (mytool.my_floatCOMPARISONAMOUNTLA * frCAMOUNTA) + jeffCAMOUNTa
        bobCAMOUNTa = onemoreamounta       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAMOUNTa = int(bobCAMOUNTa)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAMOUNTa
                kps.handle_left[0] = jeffCAMOUNTa - 6
                kps.handle_right[0] = jeffCAMOUNTa
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAMOUNTa
                kpz.handle_left[0] = bobCAMOUNTa - 6
                kpz.handle_right[0] = bobCAMOUNTa + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAMOUNTa + frCAMOUNTA

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONAMOUNTB(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonamountb"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_47"]'
        index = 0
        stringCAMOUNTB = mytool.my_floatCOMPARISONAMOUNTB
        frCAMOUNTB = bpy.context.scene.render.fps
        jeffCAMOUNTb = stringCAMOUNTB * frCAMOUNTB
        onemorecamountb = (mytool.my_floatCOMPARISONAMOUNTLB * frCAMOUNTB) + jeffCAMOUNTb
        bobCAMOUNTb = onemorecamountb       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAMOUNTb = int(bobCAMOUNTb)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAMOUNTb
                kps.handle_left[0] = jeffCAMOUNTb - 6
                kps.handle_right[0] = jeffCAMOUNTb
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAMOUNTb
                kpz.handle_left[0] = bobCAMOUNTb - 6
                kpz.handle_right[0] = bobCAMOUNTb + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAMOUNTb + frCAMOUNTB

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONAMOUNTC(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonamountc"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_48"]'
        index = 0
        stringCAMOUNTC = mytool.my_floatCOMPARISONAMOUNTC
        frCAMOUNTC = bpy.context.scene.render.fps
        jeffCAMOUNTc = stringCAMOUNTC * frCAMOUNTC
        onemorecamountc = (mytool.my_floatCOMPARISONAMOUNTLC * frCAMOUNTC) + jeffCAMOUNTc
        bobCAMOUNTc = onemorecamountc       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAMOUNTc = int(bobCAMOUNTc)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAMOUNTc
                kps.handle_left[0] = jeffCAMOUNTc - 6
                kps.handle_right[0] = jeffCAMOUNTc
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAMOUNTc
                kpz.handle_left[0] = bobCAMOUNTc - 6
                kpz.handle_right[0] = bobCAMOUNTc + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAMOUNTc + frCAMOUNTC

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONAMOUNTD(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonamountd"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_49"]'
        index = 0
        stringCAMOUNTD = mytool.my_floatCOMPARISONAMOUNTD
        frCAMOUNTD = bpy.context.scene.render.fps
        jeffCAMOUNTd = stringCAMOUNTD * frCAMOUNTD
        onemorecamountd = (mytool.my_floatCOMPARISONAMOUNTLD * frCAMOUNTD) + jeffCAMOUNTd
        bobCAMOUNTd = onemorecamountd       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAMOUNTd = int(bobCAMOUNTd)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAMOUNTd
                kps.handle_left[0] = jeffCAMOUNTd - 6
                kps.handle_right[0] = jeffCAMOUNTd
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAMOUNTd
                kpz.handle_left[0] = bobCAMOUNTd - 6
                kpz.handle_right[0] = bobCAMOUNTd + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAMOUNTd + frCAMOUNTD

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONAMOUNTE(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonamounte"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_50"]'
        index = 0
        stringCAMOUNTE = mytool.my_floatCOMPARISONAMOUNTE
        frCAMOUNTE = bpy.context.scene.render.fps
        jeffCAMOUNTe = stringCAMOUNTE * frCAMOUNTE
        onemorecamounte = (mytool.my_floatCOMPARISONAMOUNTLE * frCAMOUNTE) + jeffCAMOUNTe
        bobCAMOUNTe = onemorecamounte       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAMOUNTe = int(bobCAMOUNTe)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAMOUNTe
                kps.handle_left[0] = jeffCAMOUNTe - 6
                kps.handle_right[0] = jeffCAMOUNTe
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAMOUNTe
                kpz.handle_left[0] = bobCAMOUNTe - 6
                kpz.handle_right[0] = bobCAMOUNTe + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAMOUNTe + frCAMOUNTE

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONAMOUNTF(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonamountf"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_51"]'
        index = 0
        stringCAMOUNTF = mytool.my_floatCOMPARISONAMOUNTF
        frCAMOUNTF = bpy.context.scene.render.fps
        jeffCAMOUNTF = stringCAMOUNTF * frCAMOUNTF
        onemorecamountf = (mytool.my_floatCOMPARISONAMOUNTLF * frCAMOUNTF) + jeffCAMOUNTF
        bobCAMOUNTF = onemorecamountf       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAMOUNTF = int(bobCAMOUNTF)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAMOUNTF
                kps.handle_left[0] = jeffCAMOUNTF - 6
                kps.handle_right[0] = jeffCAMOUNTF
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAMOUNTF
                kpz.handle_left[0] = bobCAMOUNTF - 6
                kpz.handle_right[0] = bobCAMOUNTF + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAMOUNTF + frCAMOUNTF

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONAMOUNTG(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonamountg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_52"]'
        index = 0
        stringCAMOUNTG = mytool.my_floatCOMPARISONAMOUNTG
        frCAMOUNTG = bpy.context.scene.render.fps
        jeffCAMOUNTg = stringCAMOUNTG * frCAMOUNTG
        onemorecamountg = (mytool.my_floatCOMPARISONAMOUNTLG * frCAMOUNTG) + jeffCAMOUNTg
        bobCAMOUNTg = onemorecamountg       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAMOUNTg = int(bobCAMOUNTg)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAMOUNTg
                kps.handle_left[0] = jeffCAMOUNTg - 6
                kps.handle_right[0] = jeffCAMOUNTg
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAMOUNTg
                kpz.handle_left[0] = bobCAMOUNTg - 6
                kpz.handle_right[0] = bobCAMOUNTg + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAMOUNTg + frCAMOUNTG

        return {'FINISHED'}

    
class ADDONNAME_OT_my_opCOMPARISONAMOUNTH(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonamounth"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_53"]'
        index = 0
        stringCAMOUNTH = mytool.my_floatCOMPARISONAMOUNTH
        frCAMOUNTH = bpy.context.scene.render.fps
        jeffCAMOUNTh = stringCAMOUNTH * frCAMOUNTH
        onemorecamounth = (mytool.my_floatCOMPARISONAMOUNTLH * frCAMOUNTH) + jeffCAMOUNTh
        bobCAMOUNTh = onemorecamounth       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAMOUNTh = int(bobCAMOUNTh)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAMOUNTh
                kps.handle_left[0] = jeffCAMOUNTh - 6
                kps.handle_right[0] = jeffCAMOUNTh
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAMOUNTh
                kpz.handle_left[0] = bobCAMOUNTh - 6
                kpz.handle_right[0] = bobCAMOUNTh + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAMOUNTh + frCAMOUNTH

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBMOUNTA(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbmounta"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_77"]'
        index = 0
        stringCBMOUNTA = mytool.my_floatCOMPARISONBMOUNTA
        frCBMOUNTA = bpy.context.scene.render.fps
        jeffCBMOUNTa = stringCBMOUNTA * frCBMOUNTA
        onemorebmounta = (mytool.my_floatCOMPARISONBMOUNTLA * frCBMOUNTA) + jeffCBMOUNTa
        bobCBMOUNTa = onemorebmounta       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBMOUNTa = int(bobCBMOUNTa)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBMOUNTa
                kps.handle_left[0] = jeffCBMOUNTa - 6
                kps.handle_right[0] = jeffCBMOUNTa
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBMOUNTa
                kpz.handle_left[0] = bobCBMOUNTa - 6
                kpz.handle_right[0] = bobCBMOUNTa + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBMOUNTa + frCBMOUNTA

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONBMOUNTB(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbmountb"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_78"]'
        index = 0
        stringCBMOUNTB = mytool.my_floatCOMPARISONBMOUNTB
        frCBMOUNTB = bpy.context.scene.render.fps
        jeffCBMOUNTb = stringCBMOUNTB * frCBMOUNTB
        onemorecamountb = (mytool.my_floatCOMPARISONBMOUNTLB * frCBMOUNTB) + jeffCBMOUNTb
        bobCBMOUNTb = onemorecamountb       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBMOUNTb = int(bobCBMOUNTb)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBMOUNTb
                kps.handle_left[0] = jeffCBMOUNTb - 6
                kps.handle_right[0] = jeffCBMOUNTb
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBMOUNTb
                kpz.handle_left[0] = bobCBMOUNTb - 6
                kpz.handle_right[0] = bobCBMOUNTb + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBMOUNTb + frCBMOUNTB

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONBMOUNTC(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbmountc"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_79"]'
        index = 0
        stringCBMOUNTC = mytool.my_floatCOMPARISONBMOUNTC
        frCBMOUNTC = bpy.context.scene.render.fps
        jeffCBMOUNTc = stringCBMOUNTC * frCBMOUNTC
        onemorecamountc = (mytool.my_floatCOMPARISONBMOUNTLC * frCBMOUNTC) + jeffCBMOUNTc
        bobCBMOUNTc = onemorecamountc       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBMOUNTc = int(bobCBMOUNTc)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBMOUNTc
                kps.handle_left[0] = jeffCBMOUNTc - 6
                kps.handle_right[0] = jeffCBMOUNTc
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBMOUNTc
                kpz.handle_left[0] = bobCBMOUNTc - 6
                kpz.handle_right[0] = bobCBMOUNTc + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBMOUNTc + frCBMOUNTC

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBMOUNTD(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbmountd"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_80"]'
        index = 0
        stringCBMOUNTD = mytool.my_floatCOMPARISONBMOUNTD
        frCBMOUNTD = bpy.context.scene.render.fps
        jeffCBMOUNTd = stringCBMOUNTD * frCBMOUNTD
        onemorecamountd = (mytool.my_floatCOMPARISONBMOUNTLD * frCBMOUNTD) + jeffCBMOUNTd
        bobCBMOUNTd = onemorecamountd       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBMOUNTd = int(bobCBMOUNTd)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBMOUNTd
                kps.handle_left[0] = jeffCBMOUNTd - 6
                kps.handle_right[0] = jeffCBMOUNTd
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBMOUNTd
                kpz.handle_left[0] = bobCBMOUNTd - 6
                kpz.handle_right[0] = bobCBMOUNTd + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBMOUNTd + frCBMOUNTD

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBMOUNTE(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbmounte"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_81"]'
        index = 0
        stringCBMOUNTE = mytool.my_floatCOMPARISONBMOUNTE
        frCBMOUNTE = bpy.context.scene.render.fps
        jeffCBMOUNTe = stringCBMOUNTE * frCBMOUNTE
        onemorecbmounte = (mytool.my_floatCOMPARISONBMOUNTLE * frCBMOUNTE) + jeffCBMOUNTe
        bobCBMOUNTe = onemorecbmounte       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBMOUNTe = int(bobCBMOUNTe)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBMOUNTe
                kps.handle_left[0] = jeffCBMOUNTe - 6
                kps.handle_right[0] = jeffCBMOUNTe
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBMOUNTe
                kpz.handle_left[0] = bobCBMOUNTe - 6
                kpz.handle_right[0] = bobCBMOUNTe + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBMOUNTe + frCBMOUNTE

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBMOUNTF(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbmountf"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_82"]'
        index = 0
        stringCBMOUNTF = mytool.my_floatCOMPARISONBMOUNTF
        frCBMOUNTF = bpy.context.scene.render.fps
        jeffCBMOUNTF = stringCBMOUNTF * frCBMOUNTF
        onemorecbmountf = (mytool.my_floatCOMPARISONBMOUNTLF * frCBMOUNTF) + jeffCBMOUNTF
        bobCBMOUNTF = onemorecbmountf       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBMOUNTF = int(bobCBMOUNTF)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBMOUNTF
                kps.handle_left[0] = jeffCBMOUNTF - 6
                kps.handle_right[0] = jeffCBMOUNTF
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBMOUNTF
                kpz.handle_left[0] = bobCBMOUNTF - 6
                kpz.handle_right[0] = bobCBMOUNTF + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBMOUNTF + frCBMOUNTF

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBMOUNTG(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbmountg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_83"]'
        index = 0
        stringCBMOUNTG = mytool.my_floatCOMPARISONBMOUNTG
        frCBMOUNTG = bpy.context.scene.render.fps
        jeffCBMOUNTg = stringCBMOUNTG * frCBMOUNTG
        onemorecbmountg = (mytool.my_floatCOMPARISONBMOUNTLG * frCBMOUNTG) + jeffCBMOUNTg
        bobCBMOUNTg = onemorecbmountg       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBMOUNTg = int(bobCBMOUNTg)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBMOUNTg
                kps.handle_left[0] = jeffCBMOUNTg - 6
                kps.handle_right[0] = jeffCBMOUNTg
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBMOUNTg
                kpz.handle_left[0] = bobCBMOUNTg - 6
                kpz.handle_right[0] = bobCBMOUNTg + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBMOUNTg + frCBMOUNTG

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBMOUNTH(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbmounth"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_84"]'
        index = 0
        stringCBMOUNTH = mytool.my_floatCOMPARISONBMOUNTH
        frCBMOUNTH = bpy.context.scene.render.fps
        jeffCBMOUNTh = stringCBMOUNTH * frCBMOUNTH
        onemorecbmounth = (mytool.my_floatCOMPARISONBMOUNTLH * frCBMOUNTH) + jeffCBMOUNTh
        bobCBMOUNTh = onemorecbmounth       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBMOUNTh = int(bobCBMOUNTh)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBMOUNTh
                kps.handle_left[0] = jeffCBMOUNTh - 6
                kps.handle_right[0] = jeffCBMOUNTh
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBMOUNTh
                kpz.handle_left[0] = bobCBMOUNTh - 6
                kpz.handle_right[0] = bobCBMOUNTh + 6
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBMOUNTh + frCBMOUNTH

        return {'FINISHED'}


class ADDONNAME_OT_my_opMCGAL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormcgal"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_50"]'
        index = 0
        stringMCGAC = mytool.my_floatMCGA
        frMCGAC = bpy.context.scene.render.fps
        jeffmcga = stringMCGAC*frMCGAC
        onemoremcga =  (mytool.my_floatMCGLA*frMCGAC) + jeffmcga
        bobmcga = onemoremcga     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmcga = int(bobmcga)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmcga
                kps.handle_left[0] = jeffmcga-6
                kps.handle_right[0] = jeffmcga
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmcga
                kpz.handle_left[0] = bobmcga-6
                kpz.handle_right[0] = bobmcga+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmcga+(frMCGAC*2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMCGBL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormcgbl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_51"]'
        index = 0
        stringMCGBC = mytool.my_floatMCGB
        frMCGBC = bpy.context.scene.render.fps
        jeffmcgb = stringMCGBC*frMCGBC
        onemoremcgb =  (mytool.my_floatMCGLB*frMCGBC) + jeffmcgb
        bobmcgb = onemoremcgb     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmcgb = int(bobmcgb)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmcgb
                kps.handle_left[0] = jeffmcgb-6
                kps.handle_right[0] = jeffmcgb
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmcgb
                kpz.handle_left[0] = bobmcgb-6
                kpz.handle_right[0] = bobmcgb+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmcgb+(frMCGBC*2)


             
        return {'FINISHED'}

class ADDONNAME_OT_my_opMCGCL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormcgcl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_52"]'
        index = 0
        stringMCGCC = mytool.my_floatMCGC
        frMCGCC = bpy.context.scene.render.fps
        jeffmcgc = stringMCGCC*frMCGCC
        onemoremcgc =  (mytool.my_floatMCGLC*frMCGCC) + jeffmcgc
        bobmcgc = onemoremcgc     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmcgc = int(bobmcgc)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmcgc
                kps.handle_left[0] = jeffmcgc-6
                kps.handle_right[0] = jeffmcgc
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmcgc
                kpz.handle_left[0] = bobmcgc-6
                kpz.handle_right[0] = bobmcgc+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmcgc+(frMCGCC*2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMCGDL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormcgdl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_53"]'
        index = 0
        stringMCGDC = mytool.my_floatMCGD
        frMCGDC = bpy.context.scene.render.fps
        jeffmcgd = stringMCGDC*frMCGDC
        onemoremcgd =  (mytool.my_floatMCGLD*frMCGDC) + jeffmcgd
        bobmcgd = onemoremcgd     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmcgd = int(bobmcgd)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmcgd
                kps.handle_left[0] = jeffmcgd-6
                kps.handle_right[0] = jeffmcgd
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmcgd
                kpz.handle_left[0] = bobmcgd-6
                kpz.handle_right[0] = bobmcgd+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmcgd+(frMCGDC*2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMCGEL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormcgel"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_54"]'
        index = 0
        stringMCGEC = mytool.my_floatMCGE
        frMCGEC = bpy.context.scene.render.fps
        jeffmcge = stringMCGEC*frMCGEC
        onemoremcge =  (mytool.my_floatMCGLE*frMCGEC) + jeffmcge
        bobmcge = onemoremcge     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmcge = int(bobmcge)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmcge
                kps.handle_left[0] = jeffmcge-6
                kps.handle_right[0] = jeffmcge
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmcge
                kpz.handle_left[0] = bobmcge-6
                kpz.handle_right[0] = bobmcge+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmcge+(frMCGEC*2)

class ADDONNAME_OT_my_opMCGFL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormcgfl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_4"]'
        index = 0
        stringMCGFC = mytool.my_floatMCGF
        frMCGFC = bpy.context.scene.render.fps
        jeffmcgf = stringMCGFC*frMCGFC
        onemoremcgf =  (mytool.my_floatMCGLF*frMCGFC) + jeffmcgf
        bobmcgf = onemoremcgf     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmcgf = int(bobmcgf)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmcgf
                kps.handle_left[0] = jeffmcgf-6
                kps.handle_right[0] = jeffmcgf
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmcgf
                kpz.handle_left[0] = bobmcgf-6
                kpz.handle_right[0] = bobmcgf+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmcgf+(frMCGFC*2)
                
class ADDONNAME_OT_my_opMCGGL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormcggl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_5"]'
        index = 0
        stringMCGGC = mytool.my_floatMCGG
        frMCGGC = bpy.context.scene.render.fps
        jeffmcgg = stringMCGGC*frMCGGC
        onemoremcgg =  (mytool.my_floatMCGLG*frMCGGC) + jeffmcgg
        bobmcgg = onemoremcgg     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmcgg = int(bobmcgg)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmcgg
                kps.handle_left[0] = jeffmcgg-6
                kps.handle_right[0] = jeffmcgg
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmcgg
                kpz.handle_left[0] = bobmcgg-6
                kpz.handle_right[0] = bobmcgg+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmcgg+(frMCGGC*2)
                
class ADDONNAME_OT_my_opMCGHL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormcghl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_6"]'
        index = 0
        stringMCGHC = mytool.my_floatMCGH
        frMCGHC = bpy.context.scene.render.fps
        jeffmcgh = stringMCGHC*frMCGHC
        onemoremcgh =  (mytool.my_floatMCGLH*frMCGHC) + jeffmcgh
        bobmcgh = onemoremcgh     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmcgh = int(bobmcgh)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmcgh
                kps.handle_left[0] = jeffmcgh-6
                kps.handle_right[0] = jeffmcgh
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmcgh
                kpz.handle_left[0] = bobmcgh-6
                kpz.handle_right[0] = bobmcgh+6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmcgh+(frMCGHC*2)

             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMPGAL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormpgal"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_49"]'
        index = 0
        stringMPGAC = mytool.my_floatMPGA
        frMPGAC = bpy.context.scene.render.fps
        jeffmpga = stringMPGAC * frMPGAC
        onemorempga = (mytool.my_floatMPGLA * frMPGAC) + jeffmpga
        bobmpga = onemorempga     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmpga = int(bobmpga)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmpga
                kps.handle_left[0] = jeffmpga - 6
                kps.handle_right[0] = jeffmpga
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmpga
                kpz.handle_left[0] = bobmpga - 6
                kpz.handle_right[0] = bobmpga + 6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmpga + (frMPGAC * 2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMPGBL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormpgbl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_50"]'
        index = 0
        stringMPGBC = mytool.my_floatMPGB
        frMPGBC = bpy.context.scene.render.fps
        jeffmpgb = stringMPGBC * frMPGBC
        onemorempgb = (mytool.my_floatMPGLB * frMPGBC) + jeffmpgb
        bobmpgb = onemorempgb     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmpgb = int(bobmpgb)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmpgb
                kps.handle_left[0] = jeffmpgb - 6
                kps.handle_right[0] = jeffmpgb
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmpgb
                kpz.handle_left[0] = bobmpgb - 6
                kpz.handle_right[0] = bobmpgb + 6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmpgb + (frMPGBC * 2)


             
        return {'FINISHED'}

class ADDONNAME_OT_my_opMPGCL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormpgcl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_51"]'
        index = 0
        stringMPGCC = mytool.my_floatMPGC
        frMPGCC = bpy.context.scene.render.fps
        jeffmpgc = stringMPGCC * frMPGCC
        onemorempgc = (mytool.my_floatMPGLC * frMPGCC) + jeffmpgc
        bobmpgc = onemorempgc     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmpgc = int(bobmpgc)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmpgc
                kps.handle_left[0] = jeffmpgc - 6
                kps.handle_right[0] = jeffmpgc
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmpgc
                kpz.handle_left[0] = bobmpgc - 6
                kpz.handle_right[0] = bobmpgc + 6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmpgc + (frMPGCC * 2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMPGDL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormpgdl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_52"]'
        index = 0
        stringMPGDC = mytool.my_floatMPGD
        frMPGDC = bpy.context.scene.render.fps
        jeffmpgd = stringMPGDC * frMPGDC
        onemorempgd = (mytool.my_floatMPGLD * frMPGDC) + jeffmpgd
        bobmpgd = onemorempgd     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmpgd = int(bobmpgd)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmpgd
                kps.handle_left[0] = jeffmpgd - 6
                kps.handle_right[0] = jeffmpgd
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmpgd
                kpz.handle_left[0] = bobmpgd - 6
                kpz.handle_right[0] = bobmpgd + 6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmpgd + (frMPGDC * 2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMPGEL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormpgel"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_53"]'
        index = 0
        stringMPGEC = mytool.my_floatMPGE
        frMPGEC = bpy.context.scene.render.fps
        jeffmpge = stringMPGEC * frMPGEC
        onemorempge = (mytool.my_floatMPGLE * frMPGEC) + jeffmpge
        bobmpge = onemorempge     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmpge = int(bobmpge)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmpge
                kps.handle_left[0] = jeffmpge - 6
                kps.handle_right[0] = jeffmpge
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmpge
                kpz.handle_left[0] = bobmpge - 6
                kpz.handle_right[0] = bobmpge + 6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmpge + (frMPGEC * 2)


             
        return {'FINISHED'}

class ADDONNAME_OT_my_opMPGFL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormpgfl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_95"]'
        index = 0
        stringMPGFC = mytool.my_floatMPGF
        frMPGFC = bpy.context.scene.render.fps
        jeffmpgf = stringMPGFC * frMPGFC
        onemorempgf = (mytool.my_floatMPGLF * frMPGFC) + jeffmpgf
        bobmpgf = onemorempgf     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmpgf = int(bobmpgf)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmpgf
                kps.handle_left[0] = jeffmpgf - 6
                kps.handle_right[0] = jeffmpgf
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmpgf
                kpz.handle_left[0] = bobmpgf - 6
                kpz.handle_right[0] = bobmpgf + 6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmpgf + (frMPGFC * 2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMPGGL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormpggl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_2"]'
        index = 0
        stringMPGGC = mytool.my_floatMPGG
        frMPGGC = bpy.context.scene.render.fps
        jeffmpgg = stringMPGGC * frMPGGC
        onemorempgg = (mytool.my_floatMPGLG * frMPGGC) + jeffmpgg
        bobmpgg = onemorempgg     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmpgg = int(bobmpgg)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmpgg
                kps.handle_left[0] = jeffmpgg - 6
                kps.handle_right[0] = jeffmpgg
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmpgg
                kpz.handle_left[0] = bobmpgg - 6
                kpz.handle_right[0] = bobmpgg + 6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmpgg + (frMPGGC * 2)


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMPGHL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormpghl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_3"]'
        index = 0
        stringMPGHC = mytool.my_floatMPGH
        frMPGHC = bpy.context.scene.render.fps
        jeffmpgh = stringMPGHC * frMPGHC
        onemorempgh = (mytool.my_floatMPGLH * frMPGHC) + jeffmpgh
        bobmpgh = onemorempgh     

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobmpgh = int(bobmpgh)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffmpgh
                kps.handle_left[0] = jeffmpgh - 6
                kps.handle_right[0] = jeffmpgh
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobmpgh
                kpz.handle_left[0] = bobmpgh - 6
                kpz.handle_right[0] = bobmpgh + 6
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobmpgh + (frMPGHC * 2)


             
        return {'FINISHED'}

    
class ADDONNAME_OT_my_opggpie(bpy.types.Operator):
    bl_label = "Add Objecggggggtpie"
    bl_idname = "addonname.myop_operatorggpie"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_25"]'
        index = 0
        stringpie = mytool.my_float2pie
        frpie = bpy.context.scene.render.fps
        jeffpie = stringpie*frpie
        onemorepie =  (mytool.my_floatpie*frpie) + jeffpie
        bobpie = onemorepie

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobpie = int(bobpie)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffpie
                kps.handle_left[0] = jeffpie-30
                kps.handle_right[0] = jeffpie
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobpie
                kpz.handle_left[0] = bobpie-60
                kpz.handle_right[0] = bobpie+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobpie+frpie


             
        return {'FINISHED'}    

class RenderRender2(bpy.types.Operator):
    bl_label = "Render Engine"
    bl_idname = "addonname.myop_operator00"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        if mytool.my_enum0 == 'OP1':
            bpy.context.scene.render.engine = 'CYCLES'
            bpy.context.scene.cycles.device = 'CPU'
            bpy.context.scene.cycles.preview_samples = 20
            bpy.context.scene.cycles.samples = 20
            bpy.context.scene.render.film_transparent = True

            print("tried cycles")
                      
        if mytool.my_enum0 == 'OP2':
            bpy.context.scene.render.engine = 'BLENDER_EEVEE_NEXT'
            bpy.context.scene.eevee.taa_render_samples = 64

            print("tried eevee")
            
        if mytool.my_enum0 == 'OPC3':
            bpy.context.scene.render.engine = 'CYCLES'
            bpy.context.scene.cycles.device = 'GPU'
            bpy.context.scene.cycles.preview_samples = 20
            bpy.context.scene.cycles.samples = 20
            bpy.context.scene.render.film_transparent = True

            print("tried cycles GPU")
            
        print("in execute")

            
        return {'FINISHED'}

class ADDONNAME_OT_my_op(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operator"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        if mytool.my_enum == 'OP1':
            scene.render.resolution_x = 1920
            scene.render.resolution_y = 1080
            scene.objects["PlaneC"].scale.x = 2.568
            scene.objects["PlaneC"].scale.y = 1.445
            scene.objects["PlaneC"].location.y = -0.012
                       
        if mytool.my_enum == 'OP2':
            scene.render.resolution_x = 3840
            scene.render.resolution_y = 2160
            scene.objects["PlaneC"].scale.x = 2.568
            scene.objects["PlaneC"].scale.y = 1.445
            scene.objects["PlaneC"].location.y = -0.012
                                   
        if mytool.my_enum == 'OP3':
            scene.render.resolution_x = 1080
            scene.render.resolution_y = 1080
            scene.objects["PlaneC"].scale.x = 2.568
            scene.objects["PlaneC"].scale.y = 2.568
            scene.objects["PlaneC"].location.y = -0.012
            
        if mytool.my_enum == 'OP4':
            scene.render.resolution_x = 720
            scene.render.resolution_y = 720
            scene.objects["PlaneC"].scale.x = 2.568
            scene.objects["PlaneC"].scale.y = 2.568
            scene.objects["PlaneC"].location.y = -0.012
            
        if mytool.my_enum == 'OP5':
            scene.render.resolution_x = 1080
            scene.render.resolution_y = 1920
            scene.objects["PlaneC"].scale.x = 1.445
            scene.objects["PlaneC"].scale.y = 2.568
            scene.objects["PlaneC"].location.y = -0.012
            
        if mytool.my_enum == 'OP6':
            scene.render.resolution_x = 720
            scene.render.resolution_y = 1280
            scene.objects["PlaneC"].scale.x = 1.445
            scene.objects["PlaneC"].scale.y = 2.568
            scene.objects["PlaneC"].location.y = -0.012
        
        return {'FINISHED'}
    
class ADDONNAME_OT_my_op2(bpy.types.Operator):
    bl_label = "Add Ob33ject"
    bl_idname = "addonname.myop_operator2"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enum2 == 'OP7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 144
            bpy.context.object.data.update()
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_30"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[1].co.x = 120
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            
        if mytool.my_enum2 == 'OP8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 180
            bpy.context.object.data.update()
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_30"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[1].co.x = 150
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

        return {'FINISHED'}
    
class ADDONNAME_23C(bpy.types.Operator):
    bl_label = "Add Ob33ject23c"
    bl_idname = "addonname.myop_operator23c"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enum23C == 'OP23C7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 144
            bpy.context.object.data.update()
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_30"]', 'modifiers["GeometryNodes"]["Input_49"]', 'modifiers["GeometryNodes"]["Input_50"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 24
                        fcurve.keyframe_points[1].co.x = 120

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")


            
        if mytool.my_enum23C == 'OP23C8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 180
            bpy.context.object.data.update()
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_30"]', 'modifiers["GeometryNodes"]["Input_49"]', 'modifiers["GeometryNodes"]["Input_50"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 30
                        fcurve.keyframe_points[1].co.x = 150

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

        return {'FINISHED'}
    

class ADDONNAME_RADAR(bpy.types.Operator):
    bl_label = "Add Ob33jectradar"
    bl_idname = "addonname.myop_operatorradar"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumRADAR == 'OPRADAR7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 144
            bpy.context.object.data.update()
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_30"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 24
                        fcurve.keyframe_points[1].co.x = 48

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            action_name = 'Radar_graphAction'
            data_paths = ['modifiers["GeometryNodes"]["Input_49"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 48
                        fcurve.keyframe_points[1].co.x = 72

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            action_name = 'Radar_graphAction'
            data_paths = ['modifiers["GeometryNodes"]["Input_50"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 72
                        fcurve.keyframe_points[1].co.x = 96

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")


            
        if mytool.my_enumRADAR == 'OPRADAR8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 180
            bpy.context.object.data.update()
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_30"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 30
                        fcurve.keyframe_points[1].co.x = 60

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            action_name = 'Radar_graphAction'
            data_paths = ['modifiers["GeometryNodes"]["Input_49"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 60
                        fcurve.keyframe_points[1].co.x = 90

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            action_name = 'Radar_graphAction'
            data_paths = ['modifiers["GeometryNodes"]["Input_50"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 90
                        fcurve.keyframe_points[1].co.x = 120

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

        return {'FINISHED'}

class ADDONNAME_OT_my_op2pie(bpy.types.Operator):
    bl_label = "Add Ob33ject2"
    bl_idname = "addonname.myop_operator2pie"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enum2pie == 'OP7pie':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 144
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_25"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[1].co.x = 120
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            
        if mytool.my_enum2pie == 'OP8pie':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 180
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_25"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[1].co.x = 150
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

        return {'FINISHED'}
    
class ADDONNAME_23P(bpy.types.Operator):
    bl_label = "Add Ob33ject23P"
    bl_idname = "addonname.myop_operator23p"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enum23P == 'OP23P7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 144

            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_25"]', 'modifiers["GeometryNodes"]["Input_44"]', 'modifiers["GeometryNodes"]["Input_45"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 24
                        fcurve.keyframe_points[1].co.x = 120

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

            
        if mytool.my_enum23P == 'OP23P8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 180
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_25"]', 'modifiers["GeometryNodes"]["Input_44"]', 'modifiers["GeometryNodes"]["Input_45"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 30
                        fcurve.keyframe_points[1].co.x = 150

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

        return {'FINISHED'}

class ADDONNAME_OT_my_oplgpie(bpy.types.Operator):
    bl_label = "Add Ob33jectlg"
    bl_idname = "addonname.myop_operatorlgpie"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumLGpie == 'OPLG7pie':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 96

            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Socket_44"]']
            index = 0              # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 24
                        fcurve.keyframe_points[0].handle_left[0] = 8
                        fcurve.keyframe_points[0].handle_left[1] = 0
                        fcurve.keyframe_points[0].handle_right[0] = 37
                        fcurve.keyframe_points[0].handle_right[1] = 0
                        fcurve.keyframe_points[1].co.x = 72
                        fcurve.keyframe_points[1].handle_left[0] = 47
                        fcurve.keyframe_points[1].handle_left[1] = 0.976
                        fcurve.keyframe_points[1].handle_right[0] = 77
                        fcurve.keyframe_points[1].handle_right[1] = 1.005

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

            action_name = 'Line GraphAction'
            data_paths = ['modifiers["GeometryNodes"]["Socket_89"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 60
                        fcurve.keyframe_points[0].handle_left[0] = 56
                        fcurve.keyframe_points[0].handle_left[1] = 1
                        fcurve.keyframe_points[0].handle_right[0] = 64
                        fcurve.keyframe_points[0].handle_right[1] = 1
                        fcurve.keyframe_points[1].co.x = 72
                        fcurve.keyframe_points[1].handle_left[0] = 68
                        fcurve.keyframe_points[1].handle_left[1] = 0
                        fcurve.keyframe_points[1].handle_right[0] = 79
                        fcurve.keyframe_points[1].handle_right[1] = 0

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

            
        if mytool.my_enumLGpie == 'OPLG8pie':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 120
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Socket_44"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 30
                        fcurve.keyframe_points[0].handle_left[0] = 8
                        fcurve.keyframe_points[0].handle_left[1] = 0
                        fcurve.keyframe_points[0].handle_right[0] = 54.597
                        fcurve.keyframe_points[0].handle_right[1] = 0
                        fcurve.keyframe_points[1].co.x = 90
                        fcurve.keyframe_points[1].handle_left[0] = 65.419
                        fcurve.keyframe_points[1].handle_left[1] = 1
                        fcurve.keyframe_points[1].handle_right[0] = 90.005
                        fcurve.keyframe_points[1].handle_right[1] = 1

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

            action_name = 'Line GraphAction'
            data_paths = ['modifiers["GeometryNodes"]["Socket_89"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 75
                        fcurve.keyframe_points[0].handle_left[0] = 70
                        fcurve.keyframe_points[0].handle_left[1] = 0.995
                        fcurve.keyframe_points[0].handle_right[0] = 83.275
                        fcurve.keyframe_points[0].handle_right[1] = 1.009
                        fcurve.keyframe_points[1].co.x = 90
                        fcurve.keyframe_points[1].handle_left[0] = 80.733
                        fcurve.keyframe_points[1].handle_left[1] = 0
                        fcurve.keyframe_points[1].handle_right[0] = 95
                        fcurve.keyframe_points[1].handle_right[1] = 0

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

        return {'FINISHED'}

    
class ADDONNAME_LGC(bpy.types.Operator):
    bl_label = "Add Ob33jectlgc"
    bl_idname = "addonname.myop_operatorlgc"  
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumLGC == 'OPLGC7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 96

            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_26"]', 'modifiers["GeometryNodes"]["Input_27"]', 'modifiers["GeometryNodes"]["Input_28"]', 'modifiers["GeometryNodes"]["Input_29"]', 'modifiers["GeometryNodes"]["Input_30"]', 'modifiers["GeometryNodes"]["Input_31"]', 'modifiers["GeometryNodes"]["Input_32"]', 'modifiers["GeometryNodes"]["Input_33"]', 'modifiers["GeometryNodes"]["Input_46"]', 'modifiers["GeometryNodes"]["Input_47"]', 'modifiers["GeometryNodes"]["Input_48"]', 'modifiers["GeometryNodes"]["Input_49"]', 'modifiers["GeometryNodes"]["Input_50"]', 'modifiers["GeometryNodes"]["Input_51"]', 'modifiers["GeometryNodes"]["Input_52"]', 'modifiers["GeometryNodes"]["Input_53"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 24
                        fcurve.keyframe_points[0].handle_left[0] = 16
                        fcurve.keyframe_points[0].handle_left[1] = 0
                        fcurve.keyframe_points[0].handle_right[0] = 32
                        fcurve.keyframe_points[0].handle_right[1] = 0
                        fcurve.keyframe_points[1].co.x = 48
                        fcurve.keyframe_points[1].handle_left[0] = 40
                        fcurve.keyframe_points[1].handle_left[1] = 1
                        fcurve.keyframe_points[1].handle_right[0] = 56
                        fcurve.keyframe_points[1].handle_right[1] = 1


                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

            
        if mytool.my_enumLGC == 'OPLGC8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 120
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_26"]', 'modifiers["GeometryNodes"]["Input_27"]', 'modifiers["GeometryNodes"]["Input_28"]', 'modifiers["GeometryNodes"]["Input_29"]', 'modifiers["GeometryNodes"]["Input_30"]', 'modifiers["GeometryNodes"]["Input_31"]', 'modifiers["GeometryNodes"]["Input_32"]', 'modifiers["GeometryNodes"]["Input_33"]', 'modifiers["GeometryNodes"]["Input_46"]', 'modifiers["GeometryNodes"]["Input_47"]', 'modifiers["GeometryNodes"]["Input_48"]', 'modifiers["GeometryNodes"]["Input_49"]', 'modifiers["GeometryNodes"]["Input_50"]', 'modifiers["GeometryNodes"]["Input_51"]', 'modifiers["GeometryNodes"]["Input_52"]', 'modifiers["GeometryNodes"]["Input_53"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 30
                        fcurve.keyframe_points[0].handle_left[0] = 16
                        fcurve.keyframe_points[0].handle_left[1] = 0
                        fcurve.keyframe_points[0].handle_right[0] = 40
                        fcurve.keyframe_points[0].handle_right[1] = 0
                        fcurve.keyframe_points[1].co.x = 60
                        fcurve.keyframe_points[1].handle_left[0] = 50
                        fcurve.keyframe_points[1].handle_left[1] = 1
                        fcurve.keyframe_points[1].handle_right[0] = 70
                        fcurve.keyframe_points[1].handle_right[1] = 1

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

        return {'FINISHED'}
    
class ADDONNAME_OT_my_ophbo(bpy.types.Operator):
    bl_label = "Add Ob33ject2"
    bl_idname = "addonname.myop_operatorhbo"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumHBO == 'OPHBO7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 168

            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_28"]', 'modifiers["GeometryNodes"]["Input_29"]', 'modifiers["GeometryNodes"]["Input_30"]', 'modifiers["GeometryNodes"]["Input_31"]', 'modifiers["GeometryNodes"]["Socket_0"]', 'modifiers["GeometryNodes"]["Socket_3"]', 'modifiers["GeometryNodes"]["Socket_4"]', 'modifiers["GeometryNodes"]["Socket_5"]', 'modifiers["GeometryNodes"]["Socket_6"]', 'modifiers["GeometryNodes"]["Socket_7"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 24
                        fcurve.keyframe_points[0].handle_right[0] = 24
                        fcurve.keyframe_points[0].handle_right[1] = 0.573
                        fcurve.keyframe_points[1].co.x = 120
                        fcurve.keyframe_points[1].handle_left[0] = 66.708


                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

            
        if mytool.my_enumHBO == 'OPHBO8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 210
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_28"]', 'modifiers["GeometryNodes"]["Input_29"]', 'modifiers["GeometryNodes"]["Input_30"]', 'modifiers["GeometryNodes"]["Input_31"]', 'modifiers["GeometryNodes"]["Socket_0"]', 'modifiers["GeometryNodes"]["Socket_3"]', 'modifiers["GeometryNodes"]["Socket_4"]', 'modifiers["GeometryNodes"]["Socket_5"]', 'modifiers["GeometryNodes"]["Socket_6"]', 'modifiers["GeometryNodes"]["Socket_7"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 30
                        fcurve.keyframe_points[0].handle_right[0] = 30
                        fcurve.keyframe_points[0].handle_right[1] = 0.757
                        fcurve.keyframe_points[1].co.x = 150
                        fcurve.keyframe_points[1].handle_left[0] = 90

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

        return {'FINISHED'}
    
class ADDONNAME_SHBG(bpy.types.Operator):
    bl_label = "Add Ob33ject23c"
    bl_idname = "addonname.myop_operatorshbg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumSHBG == 'OPSHBG7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 168
            bpy.context.object.data.update()
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_28"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[0] = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.721
                    fcurve.keyframe_points[1].co.x = 48
                    fcurve.keyframe_points[1].handle_left[0] = 37.005
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = 'Horizontal Bar Graph.004Action'
            data_path = 'modifiers["GeometryNodes"]["Input_29"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 60
                    fcurve.keyframe_points[0].handle_right[0] = 60
                    fcurve.keyframe_points[0].handle_right[1] = 0.812
                    fcurve.keyframe_points[1].co.x = 84
                    fcurve.keyframe_points[1].handle_left[0] = 76
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = 'Horizontal Bar Graph.004Action'
            data_path = 'modifiers["GeometryNodes"]["Input_30"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 96
                    fcurve.keyframe_points[0].handle_right[0] = 96
                    fcurve.keyframe_points[0].handle_right[1] = 0.766
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 109.904
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")

            print("end")


            
        if mytool.my_enumSHBG == 'OPSHBG8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 180
            bpy.context.object.data.update()
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_28"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[0] = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.721
                    fcurve.keyframe_points[1].co.x = 60
                    fcurve.keyframe_points[1].handle_left[0] = 49.005
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = 'Horizontal Bar Graph.004Action'
            data_path = 'modifiers["GeometryNodes"]["Input_29"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 75
                    fcurve.keyframe_points[0].handle_right[0] = 75
                    fcurve.keyframe_points[0].handle_right[1] = 0.812
                    fcurve.keyframe_points[1].co.x = 105
                    fcurve.keyframe_points[1].handle_left[0] = 97
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = 'Horizontal Bar Graph.004Action'
            data_path = 'modifiers["GeometryNodes"]["Input_30"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 120
                    fcurve.keyframe_points[0].handle_right[0] = 120
                    fcurve.keyframe_points[0].handle_right[1] = 0.766
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 139
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")

            print("end")

        return {'FINISHED'}
    
class ADDONNAME_SVBG(bpy.types.Operator):
    bl_label = "Add Ob33ject23c"
    bl_idname = "addonname.myop_operatorsvbg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumSVBG == 'OPSVBG7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 168
            bpy.context.object.data.update()
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_28"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[0] = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.721
                    fcurve.keyframe_points[1].co.x = 48
                    fcurve.keyframe_points[1].handle_left[0] = 40
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_29"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 60
                    fcurve.keyframe_points[0].handle_right[0] = 60
                    fcurve.keyframe_points[0].handle_right[1] = 0.812
                    fcurve.keyframe_points[1].co.x = 84
                    fcurve.keyframe_points[1].handle_left[0] = 76
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_30"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 96
                    fcurve.keyframe_points[0].handle_right[0] = 96
                    fcurve.keyframe_points[0].handle_right[1] = 0.766
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 109.904
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")

            print("end")


            
        if mytool.my_enumSVBG == 'OPSVBG8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 180
            bpy.context.object.data.update()
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_28"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[0] = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.721
                    fcurve.keyframe_points[1].co.x = 60
                    fcurve.keyframe_points[1].handle_left[0] = 49.005
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_29"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 75
                    fcurve.keyframe_points[0].handle_right[0] = 75
                    fcurve.keyframe_points[0].handle_right[1] = 0.812
                    fcurve.keyframe_points[1].co.x = 105
                    fcurve.keyframe_points[1].handle_left[0] = 97
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_30"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 120
                    fcurve.keyframe_points[0].handle_right[0] = 120 
                    fcurve.keyframe_points[0].handle_right[1] = 0.766
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 139
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")

            print("end")

        return {'FINISHED'}

class ADDONNAME_OT_my_ophbpie(bpy.types.Operator):
    bl_label = "Add Ob33ject2"
    bl_idname = "addonname.myop_operatorhbpie"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumHBpie == 'OPHB7pie':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 168

            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_28"]', 'modifiers["GeometryNodes"]["Input_29"]', 'modifiers["GeometryNodes"]["Input_30"]', 'modifiers["GeometryNodes"]["Input_31"]', 'modifiers["GeometryNodes"]["Socket_0"]', 'modifiers["GeometryNodes"]["Socket_3"]', 'modifiers["GeometryNodes"]["Socket_4"]', 'modifiers["GeometryNodes"]["Socket_5"]', 'modifiers["GeometryNodes"]["Socket_6"]', 'modifiers["GeometryNodes"]["Socket_7"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 24
                        fcurve.keyframe_points[0].handle_right[1] = 0.573
                        fcurve.keyframe_points[1].co.x = 120
                        fcurve.keyframe_points[1].handle_left[0] = 66.708


                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

            
        if mytool.my_enumHBpie == 'OPHB8pie':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 210
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_28"]', 'modifiers["GeometryNodes"]["Input_29"]', 'modifiers["GeometryNodes"]["Input_30"]', 'modifiers["GeometryNodes"]["Input_31"]', 'modifiers["GeometryNodes"]["Socket_0"]', 'modifiers["GeometryNodes"]["Socket_3"]', 'modifiers["GeometryNodes"]["Socket_4"]', 'modifiers["GeometryNodes"]["Socket_5"]', 'modifiers["GeometryNodes"]["Socket_6"]', 'modifiers["GeometryNodes"]["Socket_7"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 30
                        fcurve.keyframe_points[0].handle_right[1] = 0.757
                        fcurve.keyframe_points[1].co.x = 150
                        fcurve.keyframe_points[1].handle_left[0] = 90

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opHBGAL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbgal"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_28"]'
        index = 0
        stringHBGA = mytool.my_floatHBGA
        frHBGA = bpy.context.scene.render.fps
        jeffHBGal = stringHBGA*frHBGA
        onemorehbgal =  (mytool.my_floatHBGLA*frHBGA) + jeffHBGal
        bobHBGal = onemorehbgal       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobHBGal = int(bobHBGal)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffHBGal
                kps.handle_left[0] = jeffHBGal-30
                kps.handle_right[0] = jeffHBGal
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobHBGal
                kpz.handle_left[0] = bobHBGal-30
                kpz.handle_right[0] = bobHBGal+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobHBGal+frHBGA


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opHBGBL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbgbl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_29"]'
        index = 0
        stringHBGB = mytool.my_floatHBGB
        frHBGB = bpy.context.scene.render.fps
        jeffHBGbl = stringHBGB*frHBGB
        onemorehbgbl =  (mytool.my_floatHBGLB*frHBGB) + jeffHBGbl
        bobHBGbl = onemorehbgbl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobHBGbl = int(bobHBGbl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffHBGbl
                kps.handle_left[0] = jeffHBGbl-30
                kps.handle_right[0] = jeffHBGbl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobHBGbl
                kpz.handle_left[0] = bobHBGbl-30
                kpz.handle_right[0] = bobHBGbl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobHBGbl+frHBGB


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opHBGCL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbgcl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringHBGC = mytool.my_floatHBGC
        frHBGC = bpy.context.scene.render.fps
        jeffHBGcl = stringHBGC*frHBGC
        onemorehbgcl =  (mytool.my_floatHBGLC*frHBGC) + jeffHBGcl
        bobHBGcl = onemorehbgcl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobHBGcl = int(bobHBGcl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffHBGcl
                kps.handle_left[0] = jeffHBGcl-30
                kps.handle_right[0] = jeffHBGcl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobHBGcl
                kpz.handle_left[0] = bobHBGcl-30
                kpz.handle_right[0] = bobHBGcl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobHBGcl+frHBGC


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opHBGDL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbgdl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_31"]'
        index = 0
        stringHBGD = mytool.my_floatHBGD
        frHBGD = bpy.context.scene.render.fps
        jeffHBGdl = stringHBGD*frHBGD
        onemorehbgdl =  (mytool.my_floatHBGLD*frHBGD) + jeffHBGdl
        bobHBGdl = onemorehbgdl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobHBGdl = int(bobHBGdl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffHBGdl
                kps.handle_left[0] = jeffHBGdl-30
                kps.handle_right[0] = jeffHBGdl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobHBGdl
                kpz.handle_left[0] = bobHBGdl-30
                kpz.handle_right[0] = bobHBGdl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobHBGdl+frHBGD


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opHBGEL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbgel"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_0"]'
        index = 0
        stringHBGE = mytool.my_floatHBGE
        frHBGE = bpy.context.scene.render.fps
        jeffHBGEl = stringHBGE*frHBGE
        onemoreHBGEl =  (mytool.my_floatHBGLE*frHBGE) + jeffHBGEl
        bobHBGEl = onemoreHBGEl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobHBGEl = int(bobHBGEl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffHBGEl
                kps.handle_left[0] = jeffHBGEl-30
                kps.handle_right[0] = jeffHBGEl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobHBGEl
                kpz.handle_left[0] = bobHBGEl-30
                kpz.handle_right[0] = bobHBGEl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobHBGEl+frHBGE


             
        return {'FINISHED'}

class ADDONNAME_OT_my_opHBGFL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbgfl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_3"]'
        index = 0
        stringHBGF = mytool.my_floatHBGF
        frHBGF = bpy.context.scene.render.fps
        jeffHBGFl = stringHBGF*frHBGF
        onemoreHBGFl =  (mytool.my_floatHBGLF*frHBGF) + jeffHBGFl
        bobHBGFl = onemoreHBGFl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobHBGFl = int(bobHBGFl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffHBGFl
                kps.handle_left[0] = jeffHBGFl-30
                kps.handle_right[0] = jeffHBGFl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobHBGFl
                kpz.handle_left[0] = bobHBGFl-30
                kpz.handle_right[0] = bobHBGFl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobHBGFl+frHBGF


             
        return {'FINISHED'}   
    
class ADDONNAME_OT_my_opHBGGL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbggl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_4"]'
        index = 0
        stringHBGG = mytool.my_floatHBGG
        frHBGG = bpy.context.scene.render.fps
        jeffHBGGl = stringHBGG*frHBGG
        onemoreHBGGl =  (mytool.my_floatHBGLG*frHBGG) + jeffHBGGl
        bobHBGGl = onemoreHBGGl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobHBGGl = int(bobHBGGl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffHBGGl
                kps.handle_left[0] = jeffHBGGl-30
                kps.handle_right[0] = jeffHBGGl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobHBGGl
                kpz.handle_left[0] = bobHBGGl-30
                kpz.handle_right[0] = bobHBGGl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobHBGGl+frHBGG


             
        return {'FINISHED'} 
    
class ADDONNAME_OT_my_opHBGHL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbghl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_5"]'
        index = 0
        stringHBGH = mytool.my_floatHBGH
        frHBGH = bpy.context.scene.render.fps
        jeffHBGHl = stringHBGH*frHBGH
        onemoreHBGHl =  (mytool.my_floatHBGLH*frHBGH) + jeffHBGHl
        bobHBGHl = onemoreHBGHl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobHBGHl = int(bobHBGHl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffHBGHl
                kps.handle_left[0] = jeffHBGHl-30
                kps.handle_right[0] = jeffHBGHl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobHBGHl
                kpz.handle_left[0] = bobHBGHl-30
                kpz.handle_right[0] = bobHBGHl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobHBGHl+frHBGH


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opHBGIL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbgil"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_6"]'
        index = 0
        stringHBGI = mytool.my_floatHBGI
        frHBGI = bpy.context.scene.render.fps
        jeffHBGIl = stringHBGI*frHBGI
        onemoreHBGIl =  (mytool.my_floatHBGLI*frHBGI) + jeffHBGIl
        bobHBGIl = onemoreHBGIl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobHBGIl = int(bobHBGIl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffHBGIl
                kps.handle_left[0] = jeffHBGIl-30
                kps.handle_right[0] = jeffHBGIl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobHBGIl
                kpz.handle_left[0] = bobHBGIl-30
                kpz.handle_right[0] = bobHBGIl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobHBGIl+frHBGI


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opHBGJL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbgjl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_7"]'
        index = 0
        stringHBGJ = mytool.my_floatHBGJ
        frHBGJ = bpy.context.scene.render.fps
        jeffHBGJl = stringHBGJ*frHBGJ
        onemoreHBGJl =  (mytool.my_floatHBGLJ*frHBGJ) + jeffHBGJl
        bobHBGJl = onemoreHBGJl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobHBGJl = int(bobHBGJl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffHBGJl
                kps.handle_left[0] = jeffHBGJl-30
                kps.handle_right[0] = jeffHBGJl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobHBGJl
                kpz.handle_left[0] = bobHBGJl-30
                kpz.handle_right[0] = bobHBGJl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobHBGJl+frHBGJ


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opOPPOSINGAHBARAL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhboal"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_28"]'
        index = 0
        stringOPPOSINGAHBARA = mytool.my_floatOPPOSINGAHBARA
        frOPPOSINGAHBARA = bpy.context.scene.render.fps
        jeffOPPOSINGAHBARal = stringOPPOSINGAHBARA*frOPPOSINGAHBARA
        onemorehboal =  (mytool.my_floatOPPOSINGAHBARLA*frOPPOSINGAHBARA) + jeffOPPOSINGAHBARal
        bobOPPOSINGAHBARal = onemorehboal       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobOPPOSINGAHBARal = int(bobOPPOSINGAHBARal)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffOPPOSINGAHBARal
                kps.handle_left[0] = jeffOPPOSINGAHBARal-30
                kps.handle_right[0] = jeffOPPOSINGAHBARal
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobOPPOSINGAHBARal
                kpz.handle_left[0] = bobOPPOSINGAHBARal-30
                kpz.handle_right[0] = bobOPPOSINGAHBARal+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobOPPOSINGAHBARal+frOPPOSINGAHBARA


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opOPPOSINGAHBARBL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbobl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_29"]'
        index = 0
        stringOPPOSINGAHBARB = mytool.my_floatOPPOSINGAHBARB
        frOPPOSINGAHBARB = bpy.context.scene.render.fps
        jeffOPPOSINGAHBARbl = stringOPPOSINGAHBARB*frOPPOSINGAHBARB
        onemorehbobl =  (mytool.my_floatOPPOSINGAHBARLB*frOPPOSINGAHBARB) + jeffOPPOSINGAHBARbl
        bobOPPOSINGAHBARbl = onemorehbobl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobOPPOSINGAHBARbl = int(bobOPPOSINGAHBARbl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffOPPOSINGAHBARbl
                kps.handle_left[0] = jeffOPPOSINGAHBARbl-30
                kps.handle_right[0] = jeffOPPOSINGAHBARbl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobOPPOSINGAHBARbl
                kpz.handle_left[0] = bobOPPOSINGAHBARbl-30
                kpz.handle_right[0] = bobOPPOSINGAHBARbl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobOPPOSINGAHBARbl+frOPPOSINGAHBARB


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opOPPOSINGAHBARCL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbocl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringOPPOSINGAHBARC = mytool.my_floatOPPOSINGAHBARC
        frOPPOSINGAHBARC = bpy.context.scene.render.fps
        jeffOPPOSINGAHBARcl = stringOPPOSINGAHBARC*frOPPOSINGAHBARC
        onemorehbocl =  (mytool.my_floatOPPOSINGAHBARLC*frOPPOSINGAHBARC) + jeffOPPOSINGAHBARcl
        bobOPPOSINGAHBARcl = onemorehbocl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobOPPOSINGAHBARcl = int(bobOPPOSINGAHBARcl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffOPPOSINGAHBARcl
                kps.handle_left[0] = jeffOPPOSINGAHBARcl-30
                kps.handle_right[0] = jeffOPPOSINGAHBARcl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobOPPOSINGAHBARcl
                kpz.handle_left[0] = bobOPPOSINGAHBARcl-30
                kpz.handle_right[0] = bobOPPOSINGAHBARcl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobOPPOSINGAHBARcl+frOPPOSINGAHBARC


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opOPPOSINGAHBARDL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbodl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_31"]'
        index = 0
        stringOPPOSINGAHBARD = mytool.my_floatOPPOSINGAHBARD
        frOPPOSINGAHBARD = bpy.context.scene.render.fps
        jeffOPPOSINGAHBARdl = stringOPPOSINGAHBARD*frOPPOSINGAHBARD
        onemorehbodl =  (mytool.my_floatOPPOSINGAHBARLD*frOPPOSINGAHBARD) + jeffOPPOSINGAHBARdl
        bobOPPOSINGAHBARdl = onemorehbodl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobOPPOSINGAHBARdl = int(bobOPPOSINGAHBARdl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffOPPOSINGAHBARdl
                kps.handle_left[0] = jeffOPPOSINGAHBARdl-30
                kps.handle_right[0] = jeffOPPOSINGAHBARdl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobOPPOSINGAHBARdl
                kpz.handle_left[0] = bobOPPOSINGAHBARdl-30
                kpz.handle_right[0] = bobOPPOSINGAHBARdl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobOPPOSINGAHBARdl+frOPPOSINGAHBARD


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opOPPOSINGAHBAREL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhboel"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_0"]'
        index = 0
        stringOPPOSINGAHBARE = mytool.my_floatOPPOSINGAHBARE
        frOPPOSINGAHBARE = bpy.context.scene.render.fps
        jeffOPPOSINGAHBAREl = stringOPPOSINGAHBARE*frOPPOSINGAHBARE
        onemoreOPPOSINGAHBAREl =  (mytool.my_floatOPPOSINGAHBARLE*frOPPOSINGAHBARE) + jeffOPPOSINGAHBAREl
        bobOPPOSINGAHBAREl = onemoreOPPOSINGAHBAREl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobOPPOSINGAHBAREl = int(bobOPPOSINGAHBAREl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffOPPOSINGAHBAREl
                kps.handle_left[0] = jeffOPPOSINGAHBAREl-30
                kps.handle_right[0] = jeffOPPOSINGAHBAREl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobOPPOSINGAHBAREl
                kpz.handle_left[0] = bobOPPOSINGAHBAREl-30
                kpz.handle_right[0] = bobOPPOSINGAHBAREl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobOPPOSINGAHBAREl+frOPPOSINGAHBARE


             
        return {'FINISHED'}

class ADDONNAME_OT_my_opOPPOSINGAHBARFL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbofl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_3"]'
        index = 0
        stringOPPOSINGAHBARF = mytool.my_floatOPPOSINGAHBARF
        frOPPOSINGAHBARF = bpy.context.scene.render.fps
        jeffOPPOSINGAHBARFl = stringOPPOSINGAHBARF*frOPPOSINGAHBARF
        onemoreOPPOSINGAHBARFl =  (mytool.my_floatOPPOSINGAHBARLF*frOPPOSINGAHBARF) + jeffOPPOSINGAHBARFl
        bobOPPOSINGAHBARFl = onemoreOPPOSINGAHBARFl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobOPPOSINGAHBARFl = int(bobOPPOSINGAHBARFl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffOPPOSINGAHBARFl
                kps.handle_left[0] = jeffOPPOSINGAHBARFl-30
                kps.handle_right[0] = jeffOPPOSINGAHBARFl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobOPPOSINGAHBARFl
                kpz.handle_left[0] = bobOPPOSINGAHBARFl-30
                kpz.handle_right[0] = bobOPPOSINGAHBARFl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobOPPOSINGAHBARFl+frOPPOSINGAHBARF


             
        return {'FINISHED'}   
    
class ADDONNAME_OT_my_opOPPOSINGAHBARGL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbogl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_4"]'
        index = 0
        stringOPPOSINGAHBARG = mytool.my_floatOPPOSINGAHBARG
        frOPPOSINGAHBARG = bpy.context.scene.render.fps
        jeffOPPOSINGAHBARGl = stringOPPOSINGAHBARG*frOPPOSINGAHBARG
        onemoreOPPOSINGAHBARGl =  (mytool.my_floatOPPOSINGAHBARLG*frOPPOSINGAHBARG) + jeffOPPOSINGAHBARGl
        bobOPPOSINGAHBARGl = onemoreOPPOSINGAHBARGl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobOPPOSINGAHBARGl = int(bobOPPOSINGAHBARGl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffOPPOSINGAHBARGl
                kps.handle_left[0] = jeffOPPOSINGAHBARGl-30
                kps.handle_right[0] = jeffOPPOSINGAHBARGl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobOPPOSINGAHBARGl
                kpz.handle_left[0] = bobOPPOSINGAHBARGl-30
                kpz.handle_right[0] = bobOPPOSINGAHBARGl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobOPPOSINGAHBARGl+frOPPOSINGAHBARG


             
        return {'FINISHED'} 
    
class ADDONNAME_OT_my_opOPPOSINGAHBARHL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbohl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_5"]'
        index = 0
        stringOPPOSINGAHBARH = mytool.my_floatOPPOSINGAHBARH
        frOPPOSINGAHBARH = bpy.context.scene.render.fps
        jeffOPPOSINGAHBARHl = stringOPPOSINGAHBARH*frOPPOSINGAHBARH
        onemoreOPPOSINGAHBARHl =  (mytool.my_floatOPPOSINGAHBARLH*frOPPOSINGAHBARH) + jeffOPPOSINGAHBARHl
        bobOPPOSINGAHBARHl = onemoreOPPOSINGAHBARHl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobOPPOSINGAHBARHl = int(bobOPPOSINGAHBARHl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffOPPOSINGAHBARHl
                kps.handle_left[0] = jeffOPPOSINGAHBARHl-30
                kps.handle_right[0] = jeffOPPOSINGAHBARHl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobOPPOSINGAHBARHl
                kpz.handle_left[0] = bobOPPOSINGAHBARHl-30
                kpz.handle_right[0] = bobOPPOSINGAHBARHl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobOPPOSINGAHBARHl+frOPPOSINGAHBARH


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opOPPOSINGAHBARIL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhboil"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_6"]'
        index = 0
        stringOPPOSINGAHBARI = mytool.my_floatOPPOSINGAHBARI
        frOPPOSINGAHBARI = bpy.context.scene.render.fps
        jeffOPPOSINGAHBARIl = stringOPPOSINGAHBARI*frOPPOSINGAHBARI
        onemoreOPPOSINGAHBARIl =  (mytool.my_floatOPPOSINGAHBARLI*frOPPOSINGAHBARI) + jeffOPPOSINGAHBARIl
        bobOPPOSINGAHBARIl = onemoreOPPOSINGAHBARIl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobOPPOSINGAHBARIl = int(bobOPPOSINGAHBARIl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffOPPOSINGAHBARIl
                kps.handle_left[0] = jeffOPPOSINGAHBARIl-30
                kps.handle_right[0] = jeffOPPOSINGAHBARIl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobOPPOSINGAHBARIl
                kpz.handle_left[0] = bobOPPOSINGAHBARIl-30
                kpz.handle_right[0] = bobOPPOSINGAHBARIl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobOPPOSINGAHBARIl+frOPPOSINGAHBARI


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opOPPOSINGAHBARJL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorhbojl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_7"]'
        index = 0
        stringOPPOSINGAHBARJ = mytool.my_floatOPPOSINGAHBARJ
        frOPPOSINGAHBARJ = bpy.context.scene.render.fps
        jeffOPPOSINGAHBARJl = stringOPPOSINGAHBARJ*frOPPOSINGAHBARJ
        onemoreOPPOSINGAHBARJl =  (mytool.my_floatOPPOSINGAHBARLJ*frOPPOSINGAHBARJ) + jeffOPPOSINGAHBARJl
        bobOPPOSINGAHBARJl = onemoreOPPOSINGAHBARJl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobOPPOSINGAHBARJl = int(bobOPPOSINGAHBARJl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffOPPOSINGAHBARJl
                kps.handle_left[0] = jeffOPPOSINGAHBARJl-30
                kps.handle_right[0] = jeffOPPOSINGAHBARJl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobOPPOSINGAHBARJl
                kpz.handle_left[0] = bobOPPOSINGAHBARJl-30
                kpz.handle_right[0] = bobOPPOSINGAHBARJl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobOPPOSINGAHBARJl+frOPPOSINGAHBARJ


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opSTACKEDAHBARAL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorstackedahbara"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_28"]'
        index = 0
        stringSTACKEDAHBARA = mytool.my_floatSTACKEDAHBARA
        frSTACKEDAHBARA = bpy.context.scene.render.fps
        jeffSTACKEDAHBARal = stringSTACKEDAHBARA*frSTACKEDAHBARA
        onemorehboal =  (mytool.my_floatSTACKEDAHBARLA*frSTACKEDAHBARA) + jeffSTACKEDAHBARal
        bobSTACKEDAHBARal = onemorehboal       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobSTACKEDAHBARal = int(bobSTACKEDAHBARal)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffSTACKEDAHBARal
                kps.handle_left[0] = jeffSTACKEDAHBARal-30
                kps.handle_right[0] = jeffSTACKEDAHBARal
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobSTACKEDAHBARal
                kpz.handle_left[0] = bobSTACKEDAHBARal-30
                kpz.handle_right[0] = bobSTACKEDAHBARal+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobSTACKEDAHBARal+frSTACKEDAHBARA


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opSTACKEDAHBARBL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorstackedahbarb"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_29"]'
        index = 0
        stringSTACKEDAHBARB = mytool.my_floatSTACKEDAHBARB
        frSTACKEDAHBARB = bpy.context.scene.render.fps
        jeffSTACKEDAHBARbl = stringSTACKEDAHBARB*frSTACKEDAHBARB
        onemorehbobl =  (mytool.my_floatSTACKEDAHBARLB*frSTACKEDAHBARB) + jeffSTACKEDAHBARbl
        bobSTACKEDAHBARbl = onemorehbobl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobSTACKEDAHBARbl = int(bobSTACKEDAHBARbl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffSTACKEDAHBARbl
                kps.handle_left[0] = jeffSTACKEDAHBARbl-30
                kps.handle_right[0] = jeffSTACKEDAHBARbl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobSTACKEDAHBARbl
                kpz.handle_left[0] = bobSTACKEDAHBARbl-30
                kpz.handle_right[0] = bobSTACKEDAHBARbl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobSTACKEDAHBARbl+frSTACKEDAHBARB


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opSTACKEDAHBARCL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorstackedahbarc"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringSTACKEDAHBARC = mytool.my_floatSTACKEDAHBARC
        frSTACKEDAHBARC = bpy.context.scene.render.fps
        jeffSTACKEDAHBARcl = stringSTACKEDAHBARC*frSTACKEDAHBARC
        onemorehbocl =  (mytool.my_floatSTACKEDAHBARLC*frSTACKEDAHBARC) + jeffSTACKEDAHBARcl
        bobSTACKEDAHBARcl = onemorehbocl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobSTACKEDAHBARcl = int(bobSTACKEDAHBARcl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffSTACKEDAHBARcl
                kps.handle_left[0] = jeffSTACKEDAHBARcl-30
                kps.handle_right[0] = jeffSTACKEDAHBARcl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobSTACKEDAHBARcl
                kpz.handle_left[0] = bobSTACKEDAHBARcl-30
                kpz.handle_right[0] = bobSTACKEDAHBARcl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobSTACKEDAHBARcl+frSTACKEDAHBARC


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opSTACKEDAVBARAL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorstackedavbara"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_28"]'
        index = 0
        stringSTACKEDAVBARA = mytool.my_floatSTACKEDAVBARA
        frSTACKEDAVBARA = bpy.context.scene.render.fps
        jeffSTACKEDAVBARal = stringSTACKEDAVBARA*frSTACKEDAVBARA
        onemorehboal =  (mytool.my_floatSTACKEDAVBARLA*frSTACKEDAVBARA) + jeffSTACKEDAVBARal
        bobSTACKEDAVBARal = onemorehboal       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobSTACKEDAVBARal = int(bobSTACKEDAVBARal)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffSTACKEDAVBARal
                kps.handle_left[0] = jeffSTACKEDAVBARal-30
                kps.handle_right[0] = jeffSTACKEDAVBARal
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobSTACKEDAVBARal
                kpz.handle_left[0] = bobSTACKEDAVBARal-30
                kpz.handle_right[0] = bobSTACKEDAVBARal+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobSTACKEDAVBARal+frSTACKEDAVBARA


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opSTACKEDAVBARBL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorstackedavbarb"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_29"]'
        index = 0
        stringSTACKEDAVBARB = mytool.my_floatSTACKEDAVBARB
        frSTACKEDAVBARB = bpy.context.scene.render.fps
        jeffSTACKEDAVBARbl = stringSTACKEDAVBARB*frSTACKEDAVBARB
        onemorehbobl =  (mytool.my_floatSTACKEDAVBARLB*frSTACKEDAVBARB) + jeffSTACKEDAVBARbl
        bobSTACKEDAVBARbl = onemorehbobl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobSTACKEDAVBARbl = int(bobSTACKEDAVBARbl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffSTACKEDAVBARbl
                kps.handle_left[0] = jeffSTACKEDAVBARbl-30
                kps.handle_right[0] = jeffSTACKEDAVBARbl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobSTACKEDAVBARbl
                kpz.handle_left[0] = bobSTACKEDAVBARbl-30
                kpz.handle_right[0] = bobSTACKEDAVBARbl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobSTACKEDAVBARbl+frSTACKEDAVBARB


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opSTACKEDAVBARCL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorstackedavbarc"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringSTACKEDAVBARC = mytool.my_floatSTACKEDAVBARC
        frSTACKEDAVBARC = bpy.context.scene.render.fps
        jeffSTACKEDAVBARcl = stringSTACKEDAVBARC*frSTACKEDAVBARC
        onemorehbocl =  (mytool.my_floatSTACKEDAVBARLC*frSTACKEDAVBARC) + jeffSTACKEDAVBARcl
        bobSTACKEDAVBARcl = onemorehbocl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobSTACKEDAVBARcl = int(bobSTACKEDAVBARcl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffSTACKEDAVBARcl
                kps.handle_left[0] = jeffSTACKEDAVBARcl-30
                kps.handle_right[0] = jeffSTACKEDAVBARcl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobSTACKEDAVBARcl
                kpz.handle_left[0] = bobSTACKEDAVBARcl-30
                kpz.handle_right[0] = bobSTACKEDAVBARcl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobSTACKEDAVBARcl+frSTACKEDAVBARC


             
        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONAHBARAL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonahbara"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_28"]'
        index = 0
        stringCAHBARA = mytool.my_floatCOMPARISONAHBARA
        frCAHBARA = bpy.context.scene.render.fps
        jeffCAHBARal = stringCAHBARA * frCAHBARA
        onemorecahbaral = (mytool.my_floatCOMPARISONAHBARLA * frCAHBARA) + jeffCAHBARal
        bobCAHBARal = onemorecahbaral       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAHBARal = int(bobCAHBARal)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAHBARal
                kps.handle_left[0] = jeffCAHBARal - 30
                kps.handle_right[0] = jeffCAHBARal
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAHBARal
                kpz.handle_left[0] = bobCAHBARal - 30
                kpz.handle_right[0] = bobCAHBARal + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAHBARal + frCAHBARA

        return {'FINISHED'}
    



class ADDONNAME_OT_my_opCOMPARISONAHBARBL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonahbarb"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_29"]'
        index = 0
        stringCAHBARB = mytool.my_floatCOMPARISONAHBARB
        frCAHBARB = bpy.context.scene.render.fps
        jeffCAHBARBl = stringCAHBARB * frCAHBARB
        onemorecahbarbl = (mytool.my_floatCOMPARISONAHBARLB * frCAHBARB) + jeffCAHBARBl
        bobCAHBARBl = onemorecahbarbl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAHBARBl = int(bobCAHBARBl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAHBARBl
                kps.handle_left[0] = jeffCAHBARBl - 30
                kps.handle_right[0] = jeffCAHBARBl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAHBARBl
                kpz.handle_left[0] = bobCAHBARBl - 30
                kpz.handle_right[0] = bobCAHBARBl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAHBARBl + frCAHBARB

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONAHBARCL(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonahbarc"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringCAHBARC = mytool.my_floatCOMPARISONAHBARC
        frCAHBARC = bpy.context.scene.render.fps
        jeffCAHBARCl = stringCAHBARC * frCAHBARC
        onemorecahbarcl = (mytool.my_floatCOMPARISONAHBARLC * frCAHBARC) + jeffCAHBARCl
        bobCAHBARCl = onemorecahbarcl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAHBARCl = int(bobCAHBARCl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAHBARCl
                kps.handle_left[0] = jeffCAHBARCl - 30
                kps.handle_right[0] = jeffCAHBARCl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAHBARCl
                kpz.handle_left[0] = bobCAHBARCl - 30
                kpz.handle_right[0] = bobCAHBARCl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAHBARCl + frCAHBARC

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONAHBARD(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonahbard"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_31"]'
        index = 0
        stringCAHBARD = mytool.my_floatCOMPARISONAHBARD
        frCAHBARD = bpy.context.scene.render.fps
        jeffCAHBARDl = stringCAHBARD * frCAHBARD
        onemorecahbardl = (mytool.my_floatCOMPARISONAHBARLD * frCAHBARD) + jeffCAHBARDl
        bobCAHBARDl = onemorecahbardl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAHBARDl = int(bobCAHBARDl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAHBARDl
                kps.handle_left[0] = jeffCAHBARDl - 30
                kps.handle_right[0] = jeffCAHBARDl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAHBARDl
                kpz.handle_left[0] = bobCAHBARDl - 30
                kpz.handle_right[0] = bobCAHBARDl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAHBARDl + frCAHBARD

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONAHBARE(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonahbare"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_81"]'
        index = 0
        stringCAHBARE = mytool.my_floatCOMPARISONAHBARE
        frCAHBARE = bpy.context.scene.render.fps
        jeffCAHBAREl = stringCAHBARE * frCAHBARE
        onemorecahbarel = (mytool.my_floatCOMPARISONAHBARLE * frCAHBARE) + jeffCAHBAREl
        bobCAHBAREl = onemorecahbarel       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAHBAREl = int(bobCAHBAREl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAHBAREl
                kps.handle_left[0] = jeffCAHBAREl - 30
                kps.handle_right[0] = jeffCAHBAREl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAHBAREl
                kpz.handle_left[0] = bobCAHBAREl - 30
                kpz.handle_right[0] = bobCAHBAREl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAHBAREl + frCAHBARE

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONAHBARF(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonahbarf"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_82"]'
        index = 0
        stringCAHBARF = mytool.my_floatCOMPARISONAHBARF
        frCAHBARF = bpy.context.scene.render.fps
        jeffCAHBARFl = stringCAHBARF * frCAHBARF
        onemorecahbarfl = (mytool.my_floatCOMPARISONAHBARLF * frCAHBARF) + jeffCAHBARFl
        bobCAHBARFl = onemorecahbarfl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAHBARFl = int(bobCAHBARFl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAHBARFl
                kps.handle_left[0] = jeffCAHBARFl - 30
                kps.handle_right[0] = jeffCAHBARFl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAHBARFl
                kpz.handle_left[0] = bobCAHBARFl - 30
                kpz.handle_right[0] = bobCAHBARFl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAHBARFl + frCAHBARF

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONAHBARG(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonahbarg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_83"]'
        index = 0
        stringCAHBARG = mytool.my_floatCOMPARISONAHBARG
        frCAHBARG = bpy.context.scene.render.fps
        jeffCAHBARGl = stringCAHBARG * frCAHBARG
        onemorecahbargl = (mytool.my_floatCOMPARISONAHBARLG * frCAHBARG) + jeffCAHBARGl
        bobCAHBARGl = onemorecahbargl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAHBARGl = int(bobCAHBARGl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAHBARGl
                kps.handle_left[0] = jeffCAHBARGl - 30
                kps.handle_right[0] = jeffCAHBARGl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAHBARGl
                kpz.handle_left[0] = bobCAHBARGl - 30
                kpz.handle_right[0] = bobCAHBARGl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAHBARGl + frCAHBARG

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONAHBARH(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonahbarh"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_84"]'
        index = 0
        stringCAHBARH = mytool.my_floatCOMPARISONAHBARH
        frCAHBARH = bpy.context.scene.render.fps
        jeffCAHBARHl = stringCAHBARH * frCAHBARH
        onemorecahbarhl = (mytool.my_floatCOMPARISONAHBARLH * frCAHBARH) + jeffCAHBARHl
        bobCAHBARHl = onemorecahbarhl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAHBARHl = int(bobCAHBARHl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAHBARHl
                kps.handle_left[0] = jeffCAHBARHl - 30
                kps.handle_right[0] = jeffCAHBARHl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAHBARHl
                kpz.handle_left[0] = bobCAHBARHl - 30
                kpz.handle_right[0] = bobCAHBARHl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAHBARHl + frCAHBARH

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONAHBARI(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonahbari"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_85"]'
        index = 0
        stringCAHBARI = mytool.my_floatCOMPARISONAHBARI
        frCAHBARI = bpy.context.scene.render.fps
        jeffCAHBARIl = stringCAHBARI * frCAHBARI
        onemorecahbaril = (mytool.my_floatCOMPARISONAHBARLI * frCAHBARI) + jeffCAHBARIl
        bobCAHBARIl = onemorecahbaril       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCAHBARIl = int(bobCAHBARIl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCAHBARIl
                kps.handle_left[0] = jeffCAHBARIl - 30
                kps.handle_right[0] = jeffCAHBARIl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCAHBARIl
                kpz.handle_left[0] = bobCAHBARIl - 30
                kpz.handle_right[0] = bobCAHBARIl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCAHBARIl + frCAHBARI

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBHBARAL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonbhbara"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_55"]'
        index = 0
        stringCBHBARA = mytool.my_floatCOMPARISONBHBARA
        frCBHBARA = bpy.context.scene.render.fps
        jeffBHBARal = stringCBHBARA * frCBHBARA
        onemorebhbaral = (mytool.my_floatCOMPARISONBHBARLA * frCBHBARA) + jeffBHBARal
        bobBHBARal = onemorebhbaral       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobBHBARal = int(bobBHBARal)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffBHBARal
                kps.handle_left[0] = jeffBHBARal - 30
                kps.handle_right[0] = jeffBHBARal
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobBHBARal
                kpz.handle_left[0] = bobBHBARal - 30
                kpz.handle_right[0] = bobBHBARal + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobBHBARal + frCBHBARA

        return {'FINISHED'}



class ADDONNAME_OT_my_opCOMPARISONBHBARBL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonbhbarb"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_56"]'
        index = 0
        stringCBHBARB = mytool.my_floatCOMPARISONBHBARB
        frCBHBARB = bpy.context.scene.render.fps
        jeffBHBARBl = stringCBHBARB * frCBHBARB
        onemorebhbarbl = (mytool.my_floatCOMPARISONBHBARLB * frCBHBARB) + jeffBHBARBl
        bobBHBARBl = onemorebhbarbl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobBHBARBl = int(bobBHBARBl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffBHBARBl
                kps.handle_left[0] = jeffBHBARBl - 30
                kps.handle_right[0] = jeffBHBARBl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobBHBARBl
                kpz.handle_left[0] = bobBHBARBl - 30
                kpz.handle_right[0] = bobBHBARBl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobBHBARBl + frCBHBARB

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBHBARCL(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbhbarc"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_57"]'
        index = 0
        stringCBHBARC = mytool.my_floatCOMPARISONBHBARC
        frCBHBARC = bpy.context.scene.render.fps
        jeffBHBARCl = stringCBHBARC * frCBHBARC
        onemorebhbarcl = (mytool.my_floatCOMPARISONBHBARLC * frCBHBARC) + jeffBHBARCl
        bobBHBARCl = onemorebhbarcl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobBHBARCl = int(bobBHBARCl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffBHBARCl
                kps.handle_left[0] = jeffBHBARCl - 30
                kps.handle_right[0] = jeffBHBARCl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobBHBARCl
                kpz.handle_left[0] = bobBHBARCl - 30
                kpz.handle_right[0] = bobBHBARCl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobBHBARCl + frCBHBARC

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBHBARD(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonbhbard"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_58"]'
        index = 0
        stringCBHBARD = mytool.my_floatCOMPARISONBHBARD
        frCBHBARD = bpy.context.scene.render.fps
        jeffCBHBARDl = stringCBHBARD * frCBHBARD
        onemorebhbardl = (mytool.my_floatCOMPARISONBHBARDL * frCBHBARD) + jeffCBHBARDl
        bobCBHBARDl = onemorebhbardl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBHBARDl = int(bobCBHBARDl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBHBARDl
                kps.handle_left[0] = jeffCBHBARDl - 30
                kps.handle_right[0] = jeffCBHBARDl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBHBARDl
                kpz.handle_left[0] = bobCBHBARDl - 30
                kpz.handle_right[0] = bobCBHBARDl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBHBARDl + frCBHBARD

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONBHBARE(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonbhbare"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_81"]'
        index = 0
        stringCBHBARE = mytool.my_floatCOMPARISONBHBARE
        frCBHBARE = bpy.context.scene.render.fps
        jeffCBHBAREl = stringCBHBARE * frCBHBARE
        onemorecbhbarel = (mytool.my_floatCOMPARISONBHBARLE * frCBHBARE) + jeffCBHBAREl
        bobCBHBAREl = onemorecbhbarel       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBHBAREl = int(bobCBHBAREl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBHBAREl
                kps.handle_left[0] = jeffCBHBAREl - 30
                kps.handle_right[0] = jeffCBHBAREl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBHBAREl
                kpz.handle_left[0] = bobCBHBAREl - 30
                kpz.handle_right[0] = bobCBHBAREl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBHBAREl + frCBHBARE

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONBHBARF(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonbhbarf"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_82"]'
        index = 0
        stringCBHBARF = mytool.my_floatCOMPARISONBHBARF
        frCBHBARF = bpy.context.scene.render.fps
        jeffCBHBARFl = stringCBHBARF * frCBHBARF
        onemorecbhbarfl = (mytool.my_floatCOMPARISONBHBARLF * frCBHBARF) + jeffCBHBARFl
        bobCBHBARFl = onemorecbhbarfl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBHBARFl = int(bobCBHBARFl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBHBARFl
                kps.handle_left[0] = jeffCBHBARFl - 30
                kps.handle_right[0] = jeffCBHBARFl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBHBARFl
                kpz.handle_left[0] = bobCBHBARFl - 30
                kpz.handle_right[0] = bobCBHBARFl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBHBARFl + frCBHBARF

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONBHBARG(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonbhbarg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_83"]'
        index = 0
        stringCBHBARG = mytool.my_floatCOMPARISONBHBARG
        frCBHBARG = bpy.context.scene.render.fps
        jeffCBHBARGl = stringCBHBARG * frCBHBARG
        onemorecbhbargl = (mytool.my_floatCOMPARISONBHBARLG * frCBHBARG) + jeffCBHBARGl
        bobCBHBARGl = onemorecbhbargl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBHBARGl = int(bobCBHBARGl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBHBARGl
                kps.handle_left[0] = jeffCBHBARGl - 30
                kps.handle_right[0] = jeffCBHBARGl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBHBARGl
                kpz.handle_left[0] = bobCBHBARGl - 30
                kpz.handle_right[0] = bobCBHBARGl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBHBARGl + frCBHBARG

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONBHBARH(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonbhbarh"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_84"]'
        index = 0
        stringCBHBARH = mytool.my_floatCOMPARISONBHBARH
        frCBHBARH = bpy.context.scene.render.fps
        jeffCBHBARHl = stringCBHBARH * frCBHBARH
        onemorecbhbarhl = (mytool.my_floatCOMPARISONBHBARLH * frCBHBARH) + jeffCBHBARHl
        bobCBHBARHl = onemorecbhbarhl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBHBARHl = int(bobCBHBARHl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBHBARHl
                kps.handle_left[0] = jeffCBHBARHl - 30
                kps.handle_right[0] = jeffCBHBARHl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBHBARHl
                kpz.handle_left[0] = bobCBHBARHl - 30
                kpz.handle_right[0] = bobCBHBARHl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBHBARHl + frCBHBARH

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONBHBARI(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonbhbari"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_85"]'
        index = 0
        stringCBHBARI = mytool.my_floatCOMPARISONBHBARI
        frCBHBARI = bpy.context.scene.render.fps
        jeffCBHBARIl = stringCBHBARI * frCBHBARI
        onemorecbhbaril = (mytool.my_floatCOMPARISONBHBARLI * frCBHBARI) + jeffCBHBARIl
        bobCBHBARIl = onemorecbhbaril       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCBHBARIl = int(bobCBHBARIl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCBHBARIl
                kps.handle_left[0] = jeffCBHBARIl - 30
                kps.handle_right[0] = jeffCBHBARIl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCBHBARIl
                kpz.handle_left[0] = bobCBHBARIl - 30
                kpz.handle_right[0] = bobCBHBARIl + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCBHBARIl + frCBHBARI

        return {'FINISHED'}

    
class ADDONNAME_HBC(bpy.types.Operator):
    bl_label = "Add Ob33jectHBC"
    bl_idname = "addonname.myop_operatorhbc"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumHBC == 'OPHBC7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 168

            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_28"]', 'modifiers["GeometryNodes"]["Input_29"]', 'modifiers["GeometryNodes"]["Input_30"]', 'modifiers["GeometryNodes"]["Input_31"]', 'modifiers["GeometryNodes"]["Input_55"]', 'modifiers["GeometryNodes"]["Input_56"]', 'modifiers["GeometryNodes"]["Input_57"]', 'modifiers["GeometryNodes"]["Input_58"]', 'modifiers["GeometryNodes"]["Input_81"]', 'modifiers["GeometryNodes"]["Input_82"]', 'modifiers["GeometryNodes"]["Input_83"]', 'modifiers["GeometryNodes"]["Input_84"]', 'modifiers["GeometryNodes"]["Input_85"]', 'modifiers["GeometryNodes"]["Input_86"]', 'modifiers["GeometryNodes"]["Input_87"]', 'modifiers["GeometryNodes"]["Input_88"]', 'modifiers["GeometryNodes"]["Input_89"]', 'modifiers["GeometryNodes"]["Input_90"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 24
                        fcurve.keyframe_points[0].handle_right[1] = 0.573
                        fcurve.keyframe_points[1].co.x = 120
                        fcurve.keyframe_points[1].handle_left[0] = 66.708


                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

            
        if mytool.my_enumHBC == 'OPHBC8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 210
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_28"]', 'modifiers["GeometryNodes"]["Input_29"]', 'modifiers["GeometryNodes"]["Input_30"]', 'modifiers["GeometryNodes"]["Input_31"]', 'modifiers["GeometryNodes"]["Input_55"]', 'modifiers["GeometryNodes"]["Input_56"]', 'modifiers["GeometryNodes"]["Input_57"]', 'modifiers["GeometryNodes"]["Input_58"]', 'modifiers["GeometryNodes"]["Input_81"]', 'modifiers["GeometryNodes"]["Input_82"]', 'modifiers["GeometryNodes"]["Input_83"]', 'modifiers["GeometryNodes"]["Input_84"]', 'modifiers["GeometryNodes"]["Input_85"]', 'modifiers["GeometryNodes"]["Input_86"]', 'modifiers["GeometryNodes"]["Input_87"]', 'modifiers["GeometryNodes"]["Input_88"]', 'modifiers["GeometryNodes"]["Input_89"]', 'modifiers["GeometryNodes"]["Input_90"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 30
                        fcurve.keyframe_points[0].handle_right[1] = 0.757
                        fcurve.keyframe_points[1].co.x = 150
                        fcurve.keyframe_points[1].handle_left[0] = 90

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

        return {'FINISHED'}
    
class ADDONNAME_MG(bpy.types.Operator):
    bl_label = "Add Ob33jectMG"
    bl_idname = "addonname.myop_operatormg"  
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumMG == 'OPMG7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 96
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_30"]'
            index = 0              # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 32
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 48
                    fcurve.keyframe_points[1].handle_left[0] = 40
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 56
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Cube.003Action'
            data_path = 'modifiers["GeometryNodes"]["Input_31"]'
            index = 0              # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 32
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 48
                    fcurve.keyframe_points[1].handle_left[0] = 40
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 56
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            action_name = 'Cube.003Action'
            data_path = 'modifiers["GeometryNodes"]["Input_32"]'
            index = 0              # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 32
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 48
                    fcurve.keyframe_points[1].handle_left[0] = 40
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 56
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Cube.003Action'
            data_path = 'modifiers["GeometryNodes"]["Input_33"]'
            index = 0              # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 32
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 48
                    fcurve.keyframe_points[1].handle_left[0] = 40
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 56
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            action_name = 'Cube.003Action'
            data_path = 'modifiers["GeometryNodes"]["Input_34"]'
            index = 0              # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 32
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 48
                    fcurve.keyframe_points[1].handle_left[0] = 40
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 56
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Cube.003Action'
            data_path = 'modifiers["GeometryNodes"]["Input_35"]'
            index = 0              # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 32
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 48
                    fcurve.keyframe_points[1].handle_left[0] = 40
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 56
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            action_name = 'Cube.003Action'
            data_path = 'modifiers["GeometryNodes"]["Input_36"]'
            index = 0              # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 32
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 48
                    fcurve.keyframe_points[1].handle_left[0] = 40
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 56
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Cube.003Action'
            data_path = 'modifiers["GeometryNodes"]["Input_37"]'
            index = 0              # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 32
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 48
                    fcurve.keyframe_points[1].handle_left[0] = 40
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 56
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")


            
        if mytool.my_enumMG == 'OPMG8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 120
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_30"]'
            index = 0               # Z axis
            

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 40
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 60
                    fcurve.keyframe_points[1].handle_left[0] = 50
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 70
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Cube.003Action'
            data_path = 'modifiers["GeometryNodes"]["Input_31"]'
            index = 0               # Z axis
            

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 40
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 60
                    fcurve.keyframe_points[1].handle_left[0] = 50
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 70
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            action_name = 'Cube.003Action'
            data_path = 'modifiers["GeometryNodes"]["Input_32"]'
            index = 0               # Z axis
            

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 40
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 60
                    fcurve.keyframe_points[1].handle_left[0] = 50
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 70
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Cube.003Action'
            data_path = 'modifiers["GeometryNodes"]["Input_33"]'
            index = 0               # Z axis
            

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 40
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 60
                    fcurve.keyframe_points[1].handle_left[0] = 50
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 70
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            action_name = 'Cube.003Action'
            data_path = 'modifiers["GeometryNodes"]["Input_34"]'
            index = 0               # Z axis
            

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 40
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 60
                    fcurve.keyframe_points[1].handle_left[0] = 50
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 70
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Cube.003Action'
            data_path = 'modifiers["GeometryNodes"]["Input_35"]'
            index = 0               # Z axis
            

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 40
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 60
                    fcurve.keyframe_points[1].handle_left[0] = 50
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 70
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            action_name = 'Cube.003Action'
            data_path = 'modifiers["GeometryNodes"]["Input_36"]'
            index = 0               # Z axis
            

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 40
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 60
                    fcurve.keyframe_points[1].handle_left[0] = 50
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 70
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Cube.003Action'
            data_path = 'modifiers["GeometryNodes"]["Input_37"]'
            index = 0               # Z axis
            

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_left[0] = 16
                    fcurve.keyframe_points[0].handle_left[1] = 0
                    fcurve.keyframe_points[0].handle_right[0] = 40
                    fcurve.keyframe_points[0].handle_right[1] = 0
                    fcurve.keyframe_points[1].co.x = 60
                    fcurve.keyframe_points[1].handle_left[0] = 50
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 70
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")



        return {'FINISHED'}

class ADDONNAME_MGC(bpy.types.Operator):
    bl_label = "Add Ob33jectmgc"
    bl_idname = "addonname.myop_operatormgc"  
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumMGC == 'OPMGC7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 96

            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_46"]', 'modifiers["GeometryNodes"]["Input_47"]', 'modifiers["GeometryNodes"]["Input_48"]', 'modifiers["GeometryNodes"]["Input_49"]', 'modifiers["GeometryNodes"]["Input_50"]', 'modifiers["GeometryNodes"]["Input_51"]', 'modifiers["GeometryNodes"]["Input_52"]', 'modifiers["GeometryNodes"]["Input_53"]', 'modifiers["GeometryNodes"]["Input_77"]', 'modifiers["GeometryNodes"]["Input_78"]', 'modifiers["GeometryNodes"]["Input_79"]', 'modifiers["GeometryNodes"]["Input_80"]', 'modifiers["GeometryNodes"]["Input_81"]', 'modifiers["GeometryNodes"]["Input_82"]', 'modifiers["GeometryNodes"]["Input_83"]', 'modifiers["GeometryNodes"]["Input_84"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 24
                        fcurve.keyframe_points[0].handle_left[0] = 16
                        fcurve.keyframe_points[0].handle_left[1] = 0
                        fcurve.keyframe_points[0].handle_right[0] = 32
                        fcurve.keyframe_points[0].handle_right[1] = 0
                        fcurve.keyframe_points[1].co.x = 48
                        fcurve.keyframe_points[1].handle_left[0] = 40
                        fcurve.keyframe_points[1].handle_left[1] = 1
                        fcurve.keyframe_points[1].handle_right[0] = 56
                        fcurve.keyframe_points[1].handle_right[1] = 1


                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

            
        if mytool.my_enumMGC == 'OPMGC8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 120
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_46"]', 'modifiers["GeometryNodes"]["Input_47"]', 'modifiers["GeometryNodes"]["Input_48"]', 'modifiers["GeometryNodes"]["Input_49"]', 'modifiers["GeometryNodes"]["Input_50"]', 'modifiers["GeometryNodes"]["Input_51"]', 'modifiers["GeometryNodes"]["Input_52"]', 'modifiers["GeometryNodes"]["Input_53"]', 'modifiers["GeometryNodes"]["Input_77"]', 'modifiers["GeometryNodes"]["Input_78"]', 'modifiers["GeometryNodes"]["Input_79"]', 'modifiers["GeometryNodes"]["Input_80"]', 'modifiers["GeometryNodes"]["Input_81"]', 'modifiers["GeometryNodes"]["Input_82"]', 'modifiers["GeometryNodes"]["Input_83"]', 'modifiers["GeometryNodes"]["Input_84"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 30
                        fcurve.keyframe_points[0].handle_left[0] = 16
                        fcurve.keyframe_points[0].handle_left[1] = 0
                        fcurve.keyframe_points[0].handle_right[0] = 40
                        fcurve.keyframe_points[0].handle_right[1] = 0
                        fcurve.keyframe_points[1].co.x = 60
                        fcurve.keyframe_points[1].handle_left[0] = 50
                        fcurve.keyframe_points[1].handle_left[1] = 1
                        fcurve.keyframe_points[1].handle_right[0] = 70
                        fcurve.keyframe_points[1].handle_right[1] = 1

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

        return {'FINISHED'}
    
class ADDONNAME_SGC(bpy.types.Operator):
    bl_label = "Add Ob33jectsgc"
    bl_idname = "addonname.myop_operatorsgc"  
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumSGC == 'OPSGC7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 144

            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_30"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 12
                        fcurve.keyframe_points[0].handle_left[0] = 12
                        fcurve.keyframe_points[0].handle_left[1] = 0
                        fcurve.keyframe_points[0].handle_right[0] = 12
                        fcurve.keyframe_points[0].handle_right[1] = 0.699
                        fcurve.keyframe_points[1].co.x = 96
                        fcurve.keyframe_points[1].handle_left[0] = 40
                        fcurve.keyframe_points[1].handle_left[1] = 1
                        fcurve.keyframe_points[1].handle_right[0] = 96
                        fcurve.keyframe_points[1].handle_right[1] = 1


                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

            
        if mytool.my_enumSGC == 'OPSGC8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 210
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_30"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 15
                        fcurve.keyframe_points[0].handle_left[0] = 15
                        fcurve.keyframe_points[0].handle_left[1] = 0
                        fcurve.keyframe_points[0].handle_right[0] = 15
                        fcurve.keyframe_points[0].handle_right[1] = 0.699
                        fcurve.keyframe_points[1].co.x = 120
                        fcurve.keyframe_points[1].handle_left[0] = 64
                        fcurve.keyframe_points[1].handle_left[1] = 1
                        fcurve.keyframe_points[1].handle_right[0] = 120
                        fcurve.keyframe_points[1].handle_right[1] = 1

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

        return {'FINISHED'}
    
class ADDONNAME_BGS(bpy.types.Operator):
    bl_label = "Add Ob33jectbgs"
    bl_idname = "addonname.myop_operatorbgs"  
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumBGS == 'OPBGS7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 144

            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_30"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 12
                        fcurve.keyframe_points[0].handle_left[0] = 12
                        fcurve.keyframe_points[0].handle_left[1] = 0
                        fcurve.keyframe_points[0].handle_right[0] = 12
                        fcurve.keyframe_points[0].handle_right[1] = 0.699
                        fcurve.keyframe_points[1].co.x = 96
                        fcurve.keyframe_points[1].handle_left[0] = 40
                        fcurve.keyframe_points[1].handle_left[1] = 1
                        fcurve.keyframe_points[1].handle_right[0] = 96
                        fcurve.keyframe_points[1].handle_right[1] = 1


                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

            
        if mytool.my_enumBGS == 'OPBGS8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 210
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_30"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 15
                        fcurve.keyframe_points[0].handle_left[0] = 15
                        fcurve.keyframe_points[0].handle_left[1] = 0
                        fcurve.keyframe_points[0].handle_right[0] = 15
                        fcurve.keyframe_points[0].handle_right[1] = 0.699
                        fcurve.keyframe_points[1].co.x = 120
                        fcurve.keyframe_points[1].handle_left[0] = 64
                        fcurve.keyframe_points[1].handle_left[1] = 1
                        fcurve.keyframe_points[1].handle_right[0] = 120
                        fcurve.keyframe_points[1].handle_right[1] = 1

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

        return {'FINISHED'}
    
class ADDONNAME_USM(bpy.types.Operator):
    bl_label = "Add Ob33jectusm"
    bl_idname = "addonname.myop_operatorusmap"  
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enum_usmap == 'OPUSM7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 120

            action_name = bpy.context.active_object.animation_data.action.name

            data_paths = []

            # Add paths from 'Input_114' to 'Input_137'
            start_index_1 = 114
            end_index_1 = 137

            for i in range(start_index_1, end_index_1 + 1):
                path = 'modifiers["GeometryNodes"]["Input_' + str(i) + '"]'
                data_paths.append(path)

            # Add paths from 'Input_138' to 'Input_163'
            start_index_2 = 138
            end_index_2 = 163

            # Add "Input_164" to the list
            data_paths.append('modifiers["GeometryNodes"]["Input_164"]')

            for i in range(start_index_2, end_index_2 + 1):
                path = 'modifiers["GeometryNodes"]["Input_' + str(i) + '"]'
                data_paths.append(path)

            print(data_paths)

            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 18
                        fcurve.keyframe_points[0].handle_left[0] = 16
                        fcurve.keyframe_points[0].handle_left[1] = 0
                        fcurve.keyframe_points[0].handle_right[0] = 32
                        fcurve.keyframe_points[0].handle_right[1] = 0
                        fcurve.keyframe_points[1].co.x = 90
                        fcurve.keyframe_points[1].handle_left[0] = 40
                        fcurve.keyframe_points[1].handle_left[1] = 1
                        fcurve.keyframe_points[1].handle_right[0] = 56
                        fcurve.keyframe_points[1].handle_right[1] = 1


                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

            
        if mytool.my_enum_usmap == 'OPUSM8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 143
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = []

            # Add paths from 'Input_114' to 'Input_137'
            start_index_1 = 114
            end_index_1 = 137

            for i in range(start_index_1, end_index_1 + 1):
                path = 'modifiers["GeometryNodes"]["Input_' + str(i) + '"]'
                data_paths.append(path)

            # Add paths from 'Input_138' to 'Input_163'
            start_index_2 = 138
            end_index_2 = 163

            # Add "Input_164" to the list
            data_paths.append('modifiers["GeometryNodes"]["Input_164"]')

            for i in range(start_index_2, end_index_2 + 1):
                path = 'modifiers["GeometryNodes"]["Input_' + str(i) + '"]'
                data_paths.append(path)

            print(data_paths)
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 23
                        fcurve.keyframe_points[0].handle_left[0] = 16
                        fcurve.keyframe_points[0].handle_left[1] = 0
                        fcurve.keyframe_points[0].handle_right[0] = 40
                        fcurve.keyframe_points[0].handle_right[1] = 0
                        fcurve.keyframe_points[1].co.x = 113
                        fcurve.keyframe_points[1].handle_left[0] = 50
                        fcurve.keyframe_points[1].handle_left[1] = 1
                        fcurve.keyframe_points[1].handle_right[0] = 70
                        fcurve.keyframe_points[1].handle_right[1] = 1

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

        return {'FINISHED'}
    
class ADDONNAME_PL(bpy.types.Operator):
    bl_label = "Add Ob33jectVB"
    bl_idname = "addonname.myop_operatorplpie"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumPLpie == 'OPPLpie7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 168
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_28"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_29"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_30"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_31"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")

            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_53"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
 
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_54"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
 
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_55"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
 
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_56"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action") 
    
            print("end")

            
        if mytool.my_enumPLpie == 'OPPLpie8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 210
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_28"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_29"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_30"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_31"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_53"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
  
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_54"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")

            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_55"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")

            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_56"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
  

            print("end")

        return {'FINISHED'}
    
class ADDONNAME_VB(bpy.types.Operator):
    bl_label = "Add Ob33jectVB"
    bl_idname = "addonname.myop_operatorvb"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumVB == 'OPVB7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 168
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_28"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_29"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_30"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_31"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")

            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_53"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
 
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_54"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
 
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_55"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
 
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_56"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.573
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 66.708
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action") 
    
            print("end")

            
        if mytool.my_enumVB == 'OPVB8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 210
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_28"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_29"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_30"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
                
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_31"]'
            index = 0               # Z axis

            # Find the appropriate action 
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_53"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
  
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_54"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")

            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_55"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")

            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_56"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.757
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 90
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
  

            print("end")

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opVBGAL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorvbgal"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_28"]'
        index = 0
        stringVBGA = mytool.my_floatVBGA
        frVBGA = bpy.context.scene.render.fps
        jeffVBGal = stringVBGA*frVBGA
        onemoreVBGal =  (mytool.my_floatVBGLA*frVBGA) + jeffVBGal
        bobVBGal = onemoreVBGal       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobVBGal = int(bobVBGal)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffVBGal
                kps.handle_left[0] = jeffVBGal-30
                kps.handle_right[0] = jeffVBGal
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobVBGal
                kpz.handle_left[0] = bobVBGal-30
                kpz.handle_right[0] = bobVBGal+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobVBGal+frVBGA


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opVBGBL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorvbgbl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_29"]'
        index = 0
        stringVBGB = mytool.my_floatVBGB
        frVBGB = bpy.context.scene.render.fps
        jeffVBGbl = stringVBGB*frVBGB
        onemoreVBGbl =  (mytool.my_floatVBGLB*frVBGB) + jeffVBGbl
        bobVBGbl = onemoreVBGbl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobVBGbl = int(bobVBGbl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffVBGbl
                kps.handle_left[0] = jeffVBGbl-30
                kps.handle_right[0] = jeffVBGbl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobVBGbl
                kpz.handle_left[0] = bobVBGbl-30
                kpz.handle_right[0] = bobVBGbl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobVBGbl+frVBGB


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opVBGCL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorvbgcl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringVBGC = mytool.my_floatVBGC
        frVBGC = bpy.context.scene.render.fps
        jeffVBGcl = stringVBGC*frVBGC
        onemoreVBGcl =  (mytool.my_floatVBGLC*frVBGC) + jeffVBGcl
        bobVBGcl = onemoreVBGcl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobVBGcl = int(bobVBGcl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffVBGcl
                kps.handle_left[0] = jeffVBGcl-30
                kps.handle_right[0] = jeffVBGcl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobVBGcl
                kpz.handle_left[0] = bobVBGcl-30
                kpz.handle_right[0] = bobVBGcl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobVBGcl+frVBGC


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opVBGDL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorvbgdl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_31"]'
        index = 0
        stringVBGD = mytool.my_floatVBGD
        frVBGD = bpy.context.scene.render.fps
        jeffVBGdl = stringVBGD*frVBGD
        onemoreVBGdl =  (mytool.my_floatVBGLD*frVBGD) + jeffVBGdl
        bobVBGdl = onemoreVBGdl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobVBGdl = int(bobVBGdl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffVBGdl
                kps.handle_left[0] = jeffVBGdl-30
                kps.handle_right[0] = jeffVBGdl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobVBGdl
                kpz.handle_left[0] = bobVBGdl-30
                kpz.handle_right[0] = bobVBGdl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobVBGdl+frVBGD


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opVBGEL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorvbgel"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_53"]'
        index = 0
        stringVBGE = mytool.my_floatVBGE
        frVBGE = bpy.context.scene.render.fps
        jeffVBGel = stringVBGE*frVBGE
        onemoreVBGel =  (mytool.my_floatVBGLE*frVBGE) + jeffVBGel
        bobVBGel = onemoreVBGel       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobVBGel = int(bobVBGel)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffVBGel
                kps.handle_left[0] = jeffVBGel-30
                kps.handle_right[0] = jeffVBGel
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobVBGel
                kpz.handle_left[0] = bobVBGel-30
                kpz.handle_right[0] = bobVBGel+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobVBGel+frVBGE


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opVBGFL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorvbgfl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_54"]'
        index = 0
        stringVBGF = mytool.my_floatVBGF
        frVBGF = bpy.context.scene.render.fps
        jeffVBGfl = stringVBGF*frVBGF
        onemoreVBGfl =  (mytool.my_floatVBGLF*frVBGF) + jeffVBGfl
        bobVBGfl = onemoreVBGfl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobVBGfl = int(bobVBGfl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffVBGfl
                kps.handle_left[0] = jeffVBGfl-30
                kps.handle_right[0] = jeffVBGfl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobVBGfl
                kpz.handle_left[0] = bobVBGfl-30
                kpz.handle_right[0] = bobVBGfl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobVBGfl+frVBGF


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opVBGGL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorvbggl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_55"]'
        index = 0
        stringVBGG = mytool.my_floatVBGG
        frVBGG = bpy.context.scene.render.fps
        jeffVBGgl = stringVBGG*frVBGG
        onemoreVBGgl =  (mytool.my_floatVBGLG*frVBGG) + jeffVBGgl
        bobVBGgl = onemoreVBGgl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobVBGgl = int(bobVBGgl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffVBGgl
                kps.handle_left[0] = jeffVBGgl-30
                kps.handle_right[0] = jeffVBGgl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobVBGgl
                kpz.handle_left[0] = bobVBGgl-30
                kpz.handle_right[0] = bobVBGgl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobVBGgl+frVBGG


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opVBGHL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorvbghl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_56"]'
        index = 0
        stringVBGH = mytool.my_floatVBGH
        frVBGH = bpy.context.scene.render.fps
        jeffVBGhl = stringVBGH*frVBGH
        onemoreVBGhl =  (mytool.my_floatVBGLH*frVBGH) + jeffVBGhl
        bobVBGhl = onemoreVBGhl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobVBGhl = int(bobVBGhl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffVBGhl
                kps.handle_left[0] = jeffVBGhl-30
                kps.handle_right[0] = jeffVBGhl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobVBGhl
                kpz.handle_left[0] = bobVBGhl-30
                kpz.handle_right[0] = bobVBGhl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobVBGhl+frVBGH


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opPLGAL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorplgal"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_28"]'
        index = 0
        stringPLGA = mytool.my_floatPLGA
        frPLGA = bpy.context.scene.render.fps
        jeffPLGal = stringPLGA*frPLGA
        onemorePLGal =  (mytool.my_floatPLGLA*frPLGA) + jeffPLGal
        bobPLGal = onemorePLGal       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobPLGal = int(bobPLGal)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffPLGal
                kps.handle_left[0] = jeffPLGal-30
                kps.handle_right[0] = jeffPLGal
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobPLGal
                kpz.handle_left[0] = bobPLGal-30
                kpz.handle_right[0] = bobPLGal+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobPLGal+frPLGA


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opPLGBL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorplgbl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_29"]'
        index = 0
        stringPLGB = mytool.my_floatPLGB
        frPLGB = bpy.context.scene.render.fps
        jeffPLGbl = stringPLGB*frPLGB
        onemorePLGbl =  (mytool.my_floatPLGLB*frPLGB) + jeffPLGbl
        bobPLGbl = onemorePLGbl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobPLGbl = int(bobPLGbl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffPLGbl
                kps.handle_left[0] = jeffPLGbl-30
                kps.handle_right[0] = jeffPLGbl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobPLGbl
                kpz.handle_left[0] = bobPLGbl-30
                kpz.handle_right[0] = bobPLGbl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobPLGbl+frPLGB


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opPLGCL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorplgcl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringPLGC = mytool.my_floatPLGC
        frPLGC = bpy.context.scene.render.fps
        jeffPLGcl = stringPLGC*frPLGC
        onemorePLGcl =  (mytool.my_floatPLGLC*frPLGC) + jeffPLGcl
        bobPLGcl = onemorePLGcl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobPLGcl = int(bobPLGcl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffPLGcl
                kps.handle_left[0] = jeffPLGcl-30
                kps.handle_right[0] = jeffPLGcl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobPLGcl
                kpz.handle_left[0] = bobPLGcl-30
                kpz.handle_right[0] = bobPLGcl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobPLGcl+frPLGC


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opPLGDL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorplgdl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_31"]'
        index = 0
        stringPLGD = mytool.my_floatPLGD
        frPLGD = bpy.context.scene.render.fps
        jeffPLGdl = stringPLGD*frPLGD
        onemorePLGdl =  (mytool.my_floatPLGLD*frPLGD) + jeffPLGdl
        bobPLGdl = onemorePLGdl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobPLGdl = int(bobPLGdl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffPLGdl
                kps.handle_left[0] = jeffPLGdl-30
                kps.handle_right[0] = jeffPLGdl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobPLGdl
                kpz.handle_left[0] = bobPLGdl-30
                kpz.handle_right[0] = bobPLGdl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobPLGdl+frPLGD


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opPLGEL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorplgel"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_53"]'
        index = 0
        stringPLGE = mytool.my_floatPLGE
        frPLGE = bpy.context.scene.render.fps
        jeffPLGel = stringPLGE*frPLGE
        onemorePLGel =  (mytool.my_floatPLGLE*frPLGE) + jeffPLGel
        bobPLGel = onemorePLGel       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobPLGel = int(bobPLGel)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffPLGel
                kps.handle_left[0] = jeffPLGel-30
                kps.handle_right[0] = jeffPLGel
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobPLGel
                kpz.handle_left[0] = bobPLGel-30
                kpz.handle_right[0] = bobPLGel+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobPLGel+frPLGE


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opPLGFL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorplgfl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_54"]'
        index = 0
        stringPLGF = mytool.my_floatPLGF
        frPLGF = bpy.context.scene.render.fps
        jeffPLGfl = stringPLGF*frPLGF
        onemorePLGfl =  (mytool.my_floatPLGLF*frPLGF) + jeffPLGfl
        bobPLGfl = onemorePLGfl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobPLGfl = int(bobPLGfl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffPLGfl
                kps.handle_left[0] = jeffPLGfl-30
                kps.handle_right[0] = jeffPLGfl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobPLGfl
                kpz.handle_left[0] = bobPLGfl-30
                kpz.handle_right[0] = bobPLGfl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobPLGfl+frPLGF


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opPLGGL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorplggl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_55"]'
        index = 0
        stringPLGG = mytool.my_floatPLGG
        frPLGG = bpy.context.scene.render.fps
        jeffPLGgl = stringPLGG*frPLGG
        onemorePLGgl =  (mytool.my_floatPLGLG*frPLGG) + jeffPLGgl
        bobPLGgl = onemorePLGgl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobPLGgl = int(bobPLGgl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffPLGgl
                kps.handle_left[0] = jeffPLGgl-30
                kps.handle_right[0] = jeffPLGgl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobPLGgl
                kpz.handle_left[0] = bobPLGgl-30
                kpz.handle_right[0] = bobPLGgl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobPLGgl+frPLGG


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opPLGHL(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorplghl"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_56"]'
        index = 0
        stringPLGH = mytool.my_floatPLGH
        frPLGH = bpy.context.scene.render.fps
        jeffPLGhl = stringPLGH*frPLGH
        onemorePLGhl =  (mytool.my_floatPLGLH*frPLGH) + jeffPLGhl
        bobPLGhl = onemorePLGhl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path = data_path, index = index)
            if fcurve:
                # Iterate over all keyframes
                
                bobPLGhl = int(bobPLGhl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffPLGhl
                kps.handle_left[0] = jeffPLGhl-30
                kps.handle_right[0] = jeffPLGhl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobPLGhl
                kpz.handle_left[0] = bobPLGhl-30
                kpz.handle_right[0] = bobPLGhl+30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                
                
                bpy.context.scene.frame_end = bobPLGhl+frPLGH


             
        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONABARVA(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonabarva"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_28"]'
        index = 0
        stringCOMPARISONABARVA = mytool.my_floatCOMPARISONABARVA
        frCOMPARISONABARVA = bpy.context.scene.render.fps
        jeffCOMPARISONABARV = stringCOMPARISONABARVA * frCOMPARISONABARVA
        onemoreCOMPARISONABARV = (mytool.my_floatCOMPARISONABARVLA * frCOMPARISONABARVA) + jeffCOMPARISONABARV
        bobCOMPARISONABARV = onemoreCOMPARISONABARV       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONABARV = int(bobCOMPARISONABARV)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONABARV
                kps.handle_left[0] = jeffCOMPARISONABARV - 30
                kps.handle_right[0] = jeffCOMPARISONABARV
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONABARV
                kpz.handle_left[0] = bobCOMPARISONABARV - 30
                kpz.handle_right[0] = bobCOMPARISONABARV + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONABARV + frCOMPARISONABARVA

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONABARVB(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonabarvb"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_29"]'
        index = 0
        stringCOMPARISONABARV = mytool.my_floatCOMPARISONABARVB
        frCOMPARISONABARV = bpy.context.scene.render.fps
        jeffCOMPARISONABARVbl = stringCOMPARISONABARV*frCOMPARISONABARV
        onemoreCOMPARISONABARVbl =  (mytool.my_floatCOMPARISONABARVLB*frCOMPARISONABARV) + jeffCOMPARISONABARVbl
        bobCOMPARISONABARVbl = onemoreCOMPARISONABARVbl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONABARVbl = int(bobCOMPARISONABARVbl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONABARVbl
                kps.handle_left[0] = jeffCOMPARISONABARVbl - 30
                kps.handle_right[0] = jeffCOMPARISONABARVbl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONABARVbl
                kpz.handle_left[0] = bobCOMPARISONABARVbl - 30
                kpz.handle_right[0] = bobCOMPARISONABARVbl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONABARVbl + frCOMPARISONABARV

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONABARVC(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonabarvc"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringCOMPARISONABARVC = mytool.my_floatCOMPARISONABARVC
        frCOMPARISONABARVC = bpy.context.scene.render.fps
        jeffCOMPARISONABARVcl = stringCOMPARISONABARVC * frCOMPARISONABARVC
        onemoreCOMPARISONABARVcl = (mytool.my_floatCOMPARISONABARVLC * frCOMPARISONABARVC) + jeffCOMPARISONABARVcl
        bobCOMPARISONABARVcl = onemoreCOMPARISONABARVcl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONABARVcl = int(bobCOMPARISONABARVcl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONABARVcl
                kps.handle_left[0] = jeffCOMPARISONABARVcl - 30
                kps.handle_right[0] = jeffCOMPARISONABARVcl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONABARVcl
                kpz.handle_left[0] = bobCOMPARISONABARVcl - 30
                kpz.handle_right[0] = bobCOMPARISONABARVcl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONABARVcl + frCOMPARISONABARVC

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONABARVD(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonabarvd"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_31"]'
        index = 0
        stringCOMPARISONABARVD = mytool.my_floatCOMPARISONABARVD
        frCOMPARISONABARVD = bpy.context.scene.render.fps
        jeffCOMPARISONABARVdl = stringCOMPARISONABARVD * frCOMPARISONABARVD
        onemoreCOMPARISONABARVdl = (mytool.my_floatCOMPARISONABARVLD * frCOMPARISONABARVD) + jeffCOMPARISONABARVdl
        bobCOMPARISONABARVdl = onemoreCOMPARISONABARVdl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONABARVdl = int(bobCOMPARISONABARVdl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONABARVdl
                kps.handle_left[0] = jeffCOMPARISONABARVdl - 30
                kps.handle_right[0] = jeffCOMPARISONABARVdl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONABARVdl
                kpz.handle_left[0] = bobCOMPARISONABARVdl - 30
                kpz.handle_right[0] = bobCOMPARISONABARVdl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONABARVdl + frCOMPARISONABARVD

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONABARVE(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonabarve"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_53"]'
        index = 0
        stringCOMPARISONABARVE = mytool.my_floatCOMPARISONABARVE
        frCOMPARISONABARVE = bpy.context.scene.render.fps
        jeffCOMPARISONABARVel = stringCOMPARISONABARVE*frCOMPARISONABARVE
        onemoreCOMPARISONABARVel =  (mytool.my_floatCOMPARISONABARVLE*frCOMPARISONABARVE) + jeffCOMPARISONABARVel
        bobCOMPARISONABARVel = onemoreCOMPARISONABARVel       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONABARVel = int(bobCOMPARISONABARVel)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONABARVel
                kps.handle_left[0] = jeffCOMPARISONABARVel - 30
                kps.handle_right[0] = jeffCOMPARISONABARVel
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONABARVel
                kpz.handle_left[0] = bobCOMPARISONABARVel - 30
                kpz.handle_right[0] = bobCOMPARISONABARVel + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONABARVel + frCOMPARISONABARVE

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONABARVF(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonabarvf"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_54"]'
        index = 0
        stringCOMPARISONAFARVF = mytool.my_floatCOMPARISONABARVF
        frCOMPARISONAFARVF = bpy.context.scene.render.fps
        jeffCOMPARISONAFARVfl = stringCOMPARISONAFARVF * frCOMPARISONAFARVF
        onemoreCOMPARISONAFARVfl = (mytool.my_floatCOMPARISONABARVLF * frCOMPARISONAFARVF) + jeffCOMPARISONAFARVfl
        bobCOMPARISONAFARVfl = onemoreCOMPARISONAFARVfl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONAFARVfl = int(bobCOMPARISONAFARVfl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONAFARVfl
                kps.handle_left[0] = jeffCOMPARISONAFARVfl - 30
                kps.handle_right[0] = jeffCOMPARISONAFARVfl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONAFARVfl
                kpz.handle_left[0] = bobCOMPARISONAFARVfl - 30
                kpz.handle_right[0] = bobCOMPARISONAFARVfl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONAFARVfl + frCOMPARISONAFARVF

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONABARVG(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonabarvg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_55"]'
        index = 0
        stringCOMPARISONABARVG = mytool.my_floatCOMPARISONABARVG
        frCOMPARISONABARVG = bpy.context.scene.render.fps
        jeffCOMPARISONABARVgl = stringCOMPARISONABARVG * frCOMPARISONABARVG
        onemoreCOMPARISONABARVgl = (mytool.my_floatCOMPARISONABARVLG * frCOMPARISONABARVG) + jeffCOMPARISONABARVgl
        bobCOMPARISONABARVgl = onemoreCOMPARISONABARVgl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONABARVgl = int(bobCOMPARISONABARVgl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONABARVgl
                kps.handle_left[0] = jeffCOMPARISONABARVgl - 30
                kps.handle_right[0] = jeffCOMPARISONABARVgl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONABARVgl
                kpz.handle_left[0] = bobCOMPARISONABARVgl - 30
                kpz.handle_right[0] = bobCOMPARISONABARVgl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONABARVgl + frCOMPARISONABARVG

        return {'FINISHED'}


class ADDONNAME_OT_my_opCOMPARISONABARVH(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonabarvh"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_56"]'
        index = 0
        stringCOMPARISONABARVH = mytool.my_floatCOMPARISONABARVH
        frCOMPARISONABARVH = bpy.context.scene.render.fps
        jeffCOMPARISONABARVhl = stringCOMPARISONABARVH * frCOMPARISONABARVH
        onemoreCOMPARISONABARVhl = (mytool.my_floatCOMPARISONABARVLH * frCOMPARISONABARVH) + jeffCOMPARISONABARVhl
        bobCOMPARISONABARVhl = onemoreCOMPARISONABARVhl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONABARVhl = int(bobCOMPARISONABARVhl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONABARVhl
                kps.handle_left[0] = jeffCOMPARISONABARVhl - 30
                kps.handle_right[0] = jeffCOMPARISONABARVhl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONABARVhl
                kpz.handle_left[0] = bobCOMPARISONABARVhl - 30
                kpz.handle_right[0] = bobCOMPARISONABARVhl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONABARVhl + frCOMPARISONABARVH

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBBARVA(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatorcomparisonbbarva"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_82"]'
        index = 0
        stringCOMPARISONBBARVA = mytool.my_floatCOMPARISONBBARVA
        frCOMPARISONBBARVA = bpy.context.scene.render.fps
        jeffCOMPARISONBBARV = stringCOMPARISONBBARVA * frCOMPARISONBBARVA
        onemoreCOMPARISONBBARV = (mytool.my_floatCOMPARISONBBARVLA * frCOMPARISONBBARVA) + jeffCOMPARISONBBARV
        bobCOMPARISONBBARV = onemoreCOMPARISONBBARV       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONBBARV = int(bobCOMPARISONBBARV)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONBBARV
                kps.handle_left[0] = jeffCOMPARISONBBARV - 30
                kps.handle_right[0] = jeffCOMPARISONBBARV
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONBBARV
                kpz.handle_left[0] = bobCOMPARISONBBARV - 30
                kpz.handle_right[0] = bobCOMPARISONBBARV + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONBBARV + frCOMPARISONBBARVA

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONBBARVB(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbbarvb"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_83"]'
        index = 0
        stringCOMPARISONBBARV = mytool.my_floatCOMPARISONBBARVB
        frCOMPARISONBBARV = bpy.context.scene.render.fps
        jeffCOMPARISONBBARVbl = stringCOMPARISONBBARV * frCOMPARISONBBARV
        onemoreCOMPARISONBBARVbl = (mytool.my_floatCOMPARISONBBARVLB * frCOMPARISONBBARV) + jeffCOMPARISONBBARVbl
        bobCOMPARISONBBARVbl = onemoreCOMPARISONBBARVbl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONBBARVbl = int(bobCOMPARISONBBARVbl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONBBARVbl
                kps.handle_left[0] = jeffCOMPARISONBBARVbl - 30
                kps.handle_right[0] = jeffCOMPARISONBBARVbl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONBBARVbl
                kpz.handle_left[0] = bobCOMPARISONBBARVbl - 30
                kpz.handle_right[0] = bobCOMPARISONBBARVbl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONBBARVbl + frCOMPARISONBBARV

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opCOMPARISONBBARVC(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbbarvc"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_84"]'
        index = 0
        stringCOMPARISONBBARVC = mytool.my_floatCOMPARISONBBARVC
        frCOMPARISONBBARVC = bpy.context.scene.render.fps
        jeffCOMPARISONBBARVcl = stringCOMPARISONBBARVC * frCOMPARISONBBARVC
        onemoreCOMPARISONBBARVcl = (mytool.my_floatCOMPARISONBBARVLC * frCOMPARISONBBARVC) + jeffCOMPARISONBBARVcl
        bobCOMPARISONBBARVcl = onemoreCOMPARISONBBARVcl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONBBARVcl = int(bobCOMPARISONBBARVcl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONBBARVcl
                kps.handle_left[0] = jeffCOMPARISONBBARVcl - 30
                kps.handle_right[0] = jeffCOMPARISONBBARVcl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONBBARVcl
                kpz.handle_left[0] = bobCOMPARISONBBARVcl - 30
                kpz.handle_right[0] = bobCOMPARISONBBARVcl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONBBARVcl + frCOMPARISONBBARVC

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBBARVD(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbbarvd"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_85"]'
        index = 0
        stringCOMPARISONBBARVD = mytool.my_floatCOMPARISONBBARVD
        frCOMPARISONBBARVD = bpy.context.scene.render.fps
        jeffCOMPARISONBBARVdl = stringCOMPARISONBBARVD * frCOMPARISONBBARVD
        onemoreCOMPARISONBBARVdl = (mytool.my_floatCOMPARISONBBARVLD * frCOMPARISONBBARVD) + jeffCOMPARISONBBARVdl
        bobCOMPARISONBBARVdl = onemoreCOMPARISONBBARVdl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONBBARVdl = int(bobCOMPARISONBBARVdl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONBBARVdl
                kps.handle_left[0] = jeffCOMPARISONBBARVdl - 30
                kps.handle_right[0] = jeffCOMPARISONBBARVdl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONBBARVdl
                kpz.handle_left[0] = bobCOMPARISONBBARVdl - 30
                kpz.handle_right[0] = bobCOMPARISONBBARVdl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONBBARVdl + frCOMPARISONBBARVD

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBBARVE(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbbarve"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_86"]'
        index = 0
        stringCOMPARISONBBARVE = mytool.my_floatCOMPARISONBBARVE
        frCOMPARISONBBARVE = bpy.context.scene.render.fps
        jeffCOMPARISONBBARVel = stringCOMPARISONBBARVE * frCOMPARISONBBARVE
        onemoreCOMPARISONBBARVel = (mytool.my_floatCOMPARISONBBARVLE * frCOMPARISONBBARVE) + jeffCOMPARISONBBARVel
        bobCOMPARISONBBARVel = onemoreCOMPARISONBBARVel       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONBBARVel = int(bobCOMPARISONBBARVel)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONBBARVel
                kps.handle_left[0] = jeffCOMPARISONBBARVel - 30
                kps.handle_right[0] = jeffCOMPARISONBBARVel
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONBBARVel
                kpz.handle_left[0] = bobCOMPARISONBBARVel - 30
                kpz.handle_right[0] = bobCOMPARISONBBARVel + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONBBARVel + frCOMPARISONBBARVE

        return {'FINISHED'}

class ADDONNAME_OT_my_opCOMPARISONBBARVF(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbbarvf"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_87"]'
        index = 0
        stringCOMPARISONBFARVF = mytool.my_floatCOMPARISONBBARVF
        frCOMPARISONBFARVF = bpy.context.scene.render.fps
        jeffCOMPARISONBFARVfl = stringCOMPARISONBFARVF * frCOMPARISONBFARVF
        onemoreCOMPARISONBFARVfl = (mytool.my_floatCOMPARISONBBARVLF * frCOMPARISONBFARVF) + jeffCOMPARISONBFARVfl
        bobCOMPARISONBFARVfl = onemoreCOMPARISONBFARVfl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONBFARVfl = int(bobCOMPARISONBFARVfl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONBFARVfl
                kps.handle_left[0] = jeffCOMPARISONBFARVfl - 30
                kps.handle_right[0] = jeffCOMPARISONBFARVfl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONBFARVfl
                kpz.handle_left[0] = bobCOMPARISONBFARVfl - 30
                kpz.handle_right[0] = bobCOMPARISONBFARVfl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONBFARVfl + frCOMPARISONBFARVF

        return {'FINISHED'}

    
class ADDONNAME_OT_my_opCOMPARISONBBARVG(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbbarvg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_88"]'
        index = 0
        stringCOMPARISONBBARVG = mytool.my_floatCOMPARISONBBARVG
        frCOMPARISONBBARVG = bpy.context.scene.render.fps
        jeffCOMPARISONBBARVgl = stringCOMPARISONBBARVG * frCOMPARISONBBARVG
        onemoreCOMPARISONBBARVgl = (mytool.my_floatCOMPARISONBBARVLG * frCOMPARISONBBARVG) + jeffCOMPARISONBBARVgl
        bobCOMPARISONBBARVgl = onemoreCOMPARISONBBARVgl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONBBARVgl = int(bobCOMPARISONBBARVgl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONBBARVgl
                kps.handle_left[0] = jeffCOMPARISONBBARVgl - 30
                kps.handle_right[0] = jeffCOMPARISONBBARVgl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONBBARVgl
                kpz.handle_left[0] = bobCOMPARISONBBARVgl - 30
                kpz.handle_right[0] = bobCOMPARISONBBARVgl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONBBARVgl + frCOMPARISONBBARVG

        return {'FINISHED'}


class ADDONNAME_OT_my_opCOMPARISONBBARVH(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatorcomparisonbbarvh"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_89"]'
        index = 0
        stringCOMPARISONBBARVH = mytool.my_floatCOMPARISONBBARVH
        frCOMPARISONBBARVH = bpy.context.scene.render.fps
        jeffCOMPARISONBBARVhl = stringCOMPARISONBBARVH * frCOMPARISONBBARVH
        onemoreCOMPARISONBBARVhl = (mytool.my_floatCOMPARISONBBARVLH * frCOMPARISONBBARVH) + jeffCOMPARISONBBARVhl
        bobCOMPARISONBBARVhl = onemoreCOMPARISONBBARVhl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobCOMPARISONBBARVhl = int(bobCOMPARISONBBARVhl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffCOMPARISONBBARVhl
                kps.handle_left[0] = jeffCOMPARISONBBARVhl - 30
                kps.handle_right[0] = jeffCOMPARISONBBARVhl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobCOMPARISONBBARVhl
                kpz.handle_left[0] = bobCOMPARISONBBARVhl - 30
                kpz.handle_right[0] = bobCOMPARISONBBARVhl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobCOMPARISONBBARVhl + frCOMPARISONBBARVH

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLEABARVA(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormultipleabarva"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_28"]'
        index = 0
        stringMULTIPLEABARVA = mytool.my_floatMULTIPLEABARVA
        frMULTIPLEABARVA = bpy.context.scene.render.fps
        jeffMULTIPLEABARV = stringMULTIPLEABARVA * frMULTIPLEABARVA
        onemoreMULTIPLEABARV = (mytool.my_floatMULTIPLEABARVLA * frMULTIPLEABARVA) + jeffMULTIPLEABARV
        bobMULTIPLEABARV = onemoreMULTIPLEABARV       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEABARV = int(bobMULTIPLEABARV)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEABARV
                kps.handle_left[0] = jeffMULTIPLEABARV - 30
                kps.handle_right[0] = jeffMULTIPLEABARV
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEABARV
                kpz.handle_left[0] = bobMULTIPLEABARV - 30
                kpz.handle_right[0] = bobMULTIPLEABARV + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEABARV + frMULTIPLEABARVA

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMULTIPLEABARVB(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultipleabarvb"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_29"]'
        index = 0
        stringMULTIPLEABARV = mytool.my_floatMULTIPLEABARVB
        frMULTIPLEABARV = bpy.context.scene.render.fps
        jeffMULTIPLEABARVbl = stringMULTIPLEABARV*frMULTIPLEABARV
        onemoreMULTIPLEABARVbl =  (mytool.my_floatMULTIPLEABARVLB*frMULTIPLEABARV) + jeffMULTIPLEABARVbl
        bobMULTIPLEABARVbl = onemoreMULTIPLEABARVbl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEABARVbl = int(bobMULTIPLEABARVbl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEABARVbl
                kps.handle_left[0] = jeffMULTIPLEABARVbl - 30
                kps.handle_right[0] = jeffMULTIPLEABARVbl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEABARVbl
                kpz.handle_left[0] = bobMULTIPLEABARVbl - 30
                kpz.handle_right[0] = bobMULTIPLEABARVbl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEABARVbl + frMULTIPLEABARV

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMULTIPLEABARVC(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultipleabarvc"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_30"]'
        index = 0
        stringMULTIPLEABARVC = mytool.my_floatMULTIPLEABARVC
        frMULTIPLEABARVC = bpy.context.scene.render.fps
        jeffMULTIPLEABARVcl = stringMULTIPLEABARVC * frMULTIPLEABARVC
        onemoreMULTIPLEABARVcl = (mytool.my_floatMULTIPLEABARVLC * frMULTIPLEABARVC) + jeffMULTIPLEABARVcl
        bobMULTIPLEABARVcl = onemoreMULTIPLEABARVcl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEABARVcl = int(bobMULTIPLEABARVcl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEABARVcl
                kps.handle_left[0] = jeffMULTIPLEABARVcl - 30
                kps.handle_right[0] = jeffMULTIPLEABARVcl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEABARVcl
                kpz.handle_left[0] = bobMULTIPLEABARVcl - 30
                kpz.handle_right[0] = bobMULTIPLEABARVcl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEABARVcl + frMULTIPLEABARVC

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLEABARVD(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultipleabarvd"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_31"]'
        index = 0
        stringMULTIPLEABARVD = mytool.my_floatMULTIPLEABARVD
        frMULTIPLEABARVD = bpy.context.scene.render.fps
        jeffMULTIPLEABARVdl = stringMULTIPLEABARVD * frMULTIPLEABARVD
        onemoreMULTIPLEABARVdl = (mytool.my_floatMULTIPLEABARVLD * frMULTIPLEABARVD) + jeffMULTIPLEABARVdl
        bobMULTIPLEABARVdl = onemoreMULTIPLEABARVdl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEABARVdl = int(bobMULTIPLEABARVdl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEABARVdl
                kps.handle_left[0] = jeffMULTIPLEABARVdl - 30
                kps.handle_right[0] = jeffMULTIPLEABARVdl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEABARVdl
                kpz.handle_left[0] = bobMULTIPLEABARVdl - 30
                kpz.handle_right[0] = bobMULTIPLEABARVdl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEABARVdl + frMULTIPLEABARVD

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLEABARVE(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultipleabarve"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_53"]'
        index = 0
        stringMULTIPLEABARVE = mytool.my_floatMULTIPLEABARVE
        frMULTIPLEABARVE = bpy.context.scene.render.fps
        jeffMULTIPLEABARVel = stringMULTIPLEABARVE*frMULTIPLEABARVE
        onemoreMULTIPLEABARVel =  (mytool.my_floatMULTIPLEABARVLE*frMULTIPLEABARVE) + jeffMULTIPLEABARVel
        bobMULTIPLEABARVel = onemoreMULTIPLEABARVel       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEABARVel = int(bobMULTIPLEABARVel)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEABARVel
                kps.handle_left[0] = jeffMULTIPLEABARVel - 30
                kps.handle_right[0] = jeffMULTIPLEABARVel
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEABARVel
                kpz.handle_left[0] = bobMULTIPLEABARVel - 30
                kpz.handle_right[0] = bobMULTIPLEABARVel + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEABARVel + frMULTIPLEABARVE

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLEABARVF(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultipleabarvf"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_54"]'
        index = 0
        stringMULTIPLEAFARVF = mytool.my_floatMULTIPLEABARVF
        frMULTIPLEAFARVF = bpy.context.scene.render.fps
        jeffMULTIPLEAFARVfl = stringMULTIPLEAFARVF * frMULTIPLEAFARVF
        onemoreMULTIPLEAFARVfl = (mytool.my_floatMULTIPLEABARVLF * frMULTIPLEAFARVF) + jeffMULTIPLEAFARVfl
        bobMULTIPLEAFARVfl = onemoreMULTIPLEAFARVfl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEAFARVfl = int(bobMULTIPLEAFARVfl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEAFARVfl
                kps.handle_left[0] = jeffMULTIPLEAFARVfl - 30
                kps.handle_right[0] = jeffMULTIPLEAFARVfl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEAFARVfl
                kpz.handle_left[0] = bobMULTIPLEAFARVfl - 30
                kpz.handle_right[0] = bobMULTIPLEAFARVfl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEAFARVfl + frMULTIPLEAFARVF

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMULTIPLEABARVG(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultipleabarvg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_55"]'
        index = 0
        stringMULTIPLEABARVG = mytool.my_floatMULTIPLEABARVG
        frMULTIPLEABARVG = bpy.context.scene.render.fps
        jeffMULTIPLEABARVgl = stringMULTIPLEABARVG * frMULTIPLEABARVG
        onemoreMULTIPLEABARVgl = (mytool.my_floatMULTIPLEABARVLG * frMULTIPLEABARVG) + jeffMULTIPLEABARVgl
        bobMULTIPLEABARVgl = onemoreMULTIPLEABARVgl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEABARVgl = int(bobMULTIPLEABARVgl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEABARVgl
                kps.handle_left[0] = jeffMULTIPLEABARVgl - 30
                kps.handle_right[0] = jeffMULTIPLEABARVgl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEABARVgl
                kpz.handle_left[0] = bobMULTIPLEABARVgl - 30
                kpz.handle_right[0] = bobMULTIPLEABARVgl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEABARVgl + frMULTIPLEABARVG

        return {'FINISHED'}


class ADDONNAME_OT_my_opMULTIPLEABARVH(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultipleabarvh"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_56"]'
        index = 0
        stringMULTIPLEABARVH = mytool.my_floatMULTIPLEABARVH
        frMULTIPLEABARVH = bpy.context.scene.render.fps
        jeffMULTIPLEABARVhl = stringMULTIPLEABARVH * frMULTIPLEABARVH
        onemoreMULTIPLEABARVhl = (mytool.my_floatMULTIPLEABARVLH * frMULTIPLEABARVH) + jeffMULTIPLEABARVhl
        bobMULTIPLEABARVhl = onemoreMULTIPLEABARVhl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEABARVhl = int(bobMULTIPLEABARVhl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEABARVhl
                kps.handle_left[0] = jeffMULTIPLEABARVhl - 30
                kps.handle_right[0] = jeffMULTIPLEABARVhl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEABARVhl
                kpz.handle_left[0] = bobMULTIPLEABARVhl - 30
                kpz.handle_right[0] = bobMULTIPLEABARVhl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEABARVhl + frMULTIPLEABARVH

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLEBBARVA(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormultiplebbarva"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_82"]'
        index = 0
        stringMULTIPLEBBARVA = mytool.my_floatMULTIPLEBBARVA
        frMULTIPLEBBARVA = bpy.context.scene.render.fps
        jeffMULTIPLEBBARV = stringMULTIPLEBBARVA * frMULTIPLEBBARVA
        onemoreMULTIPLEBBARV = (mytool.my_floatMULTIPLEBBARVLA * frMULTIPLEBBARVA) + jeffMULTIPLEBBARV
        bobMULTIPLEBBARV = onemoreMULTIPLEBBARV       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEBBARV = int(bobMULTIPLEBBARV)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEBBARV
                kps.handle_left[0] = jeffMULTIPLEBBARV - 30
                kps.handle_right[0] = jeffMULTIPLEBBARV
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEBBARV
                kpz.handle_left[0] = bobMULTIPLEBBARV - 30
                kpz.handle_right[0] = bobMULTIPLEBBARV + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEBBARV + frMULTIPLEBBARVA

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMULTIPLEBBARVB(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultiplebbarvb"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_83"]'
        index = 0
        stringMULTIPLEBBARV = mytool.my_floatMULTIPLEBBARVB
        frMULTIPLEBBARV = bpy.context.scene.render.fps
        jeffMULTIPLEBBARVbl = stringMULTIPLEBBARV * frMULTIPLEBBARV
        onemoreMULTIPLEBBARVbl = (mytool.my_floatMULTIPLEBBARVLB * frMULTIPLEBBARV) + jeffMULTIPLEBBARVbl
        bobMULTIPLEBBARVbl = onemoreMULTIPLEBBARVbl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEBBARVbl = int(bobMULTIPLEBBARVbl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEBBARVbl
                kps.handle_left[0] = jeffMULTIPLEBBARVbl - 30
                kps.handle_right[0] = jeffMULTIPLEBBARVbl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEBBARVbl
                kpz.handle_left[0] = bobMULTIPLEBBARVbl - 30
                kpz.handle_right[0] = bobMULTIPLEBBARVbl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEBBARVbl + frMULTIPLEBBARV

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMULTIPLEBBARVC(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultiplebbarvc"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_84"]'
        index = 0
        stringMULTIPLEBBARVC = mytool.my_floatMULTIPLEBBARVC
        frMULTIPLEBBARVC = bpy.context.scene.render.fps
        jeffMULTIPLEBBARVcl = stringMULTIPLEBBARVC * frMULTIPLEBBARVC
        onemoreMULTIPLEBBARVcl = (mytool.my_floatMULTIPLEBBARVLC * frMULTIPLEBBARVC) + jeffMULTIPLEBBARVcl
        bobMULTIPLEBBARVcl = onemoreMULTIPLEBBARVcl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEBBARVcl = int(bobMULTIPLEBBARVcl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEBBARVcl
                kps.handle_left[0] = jeffMULTIPLEBBARVcl - 30
                kps.handle_right[0] = jeffMULTIPLEBBARVcl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEBBARVcl
                kpz.handle_left[0] = bobMULTIPLEBBARVcl - 30
                kpz.handle_right[0] = bobMULTIPLEBBARVcl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEBBARVcl + frMULTIPLEBBARVC

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLEBBARVD(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultiplebbarvd"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_85"]'
        index = 0
        stringMULTIPLEBBARVD = mytool.my_floatMULTIPLEBBARVD
        frMULTIPLEBBARVD = bpy.context.scene.render.fps
        jeffMULTIPLEBBARVdl = stringMULTIPLEBBARVD * frMULTIPLEBBARVD
        onemoreMULTIPLEBBARVdl = (mytool.my_floatMULTIPLEBBARVLD * frMULTIPLEBBARVD) + jeffMULTIPLEBBARVdl
        bobMULTIPLEBBARVdl = onemoreMULTIPLEBBARVdl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEBBARVdl = int(bobMULTIPLEBBARVdl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEBBARVdl
                kps.handle_left[0] = jeffMULTIPLEBBARVdl - 30
                kps.handle_right[0] = jeffMULTIPLEBBARVdl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEBBARVdl
                kpz.handle_left[0] = bobMULTIPLEBBARVdl - 30
                kpz.handle_right[0] = bobMULTIPLEBBARVdl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEBBARVdl + frMULTIPLEBBARVD

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLEBBARVE(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultiplebbarve"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_86"]'
        index = 0
        stringMULTIPLEBBARVE = mytool.my_floatMULTIPLEBBARVE
        frMULTIPLEBBARVE = bpy.context.scene.render.fps
        jeffMULTIPLEBBARVel = stringMULTIPLEBBARVE * frMULTIPLEBBARVE
        onemoreMULTIPLEBBARVel = (mytool.my_floatMULTIPLEBBARVLE * frMULTIPLEBBARVE) + jeffMULTIPLEBBARVel
        bobMULTIPLEBBARVel = onemoreMULTIPLEBBARVel       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEBBARVel = int(bobMULTIPLEBBARVel)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEBBARVel
                kps.handle_left[0] = jeffMULTIPLEBBARVel - 30
                kps.handle_right[0] = jeffMULTIPLEBBARVel
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEBBARVel
                kpz.handle_left[0] = bobMULTIPLEBBARVel - 30
                kpz.handle_right[0] = bobMULTIPLEBBARVel + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEBBARVel + frMULTIPLEBBARVE

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLEBBARVF(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultiplebbarvf"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_87"]'
        index = 0
        stringMULTIPLEBFARVF = mytool.my_floatMULTIPLEBBARVF
        frMULTIPLEBFARVF = bpy.context.scene.render.fps
        jeffMULTIPLEBFARVfl = stringMULTIPLEBFARVF * frMULTIPLEBFARVF
        onemoreMULTIPLEBFARVfl = (mytool.my_floatMULTIPLEBBARVLF * frMULTIPLEBFARVF) + jeffMULTIPLEBFARVfl
        bobMULTIPLEBFARVfl = onemoreMULTIPLEBFARVfl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEBFARVfl = int(bobMULTIPLEBFARVfl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEBFARVfl
                kps.handle_left[0] = jeffMULTIPLEBFARVfl - 30
                kps.handle_right[0] = jeffMULTIPLEBFARVfl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEBFARVfl
                kpz.handle_left[0] = bobMULTIPLEBFARVfl - 30
                kpz.handle_right[0] = bobMULTIPLEBFARVfl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEBFARVfl + frMULTIPLEBFARVF

        return {'FINISHED'}

    
class ADDONNAME_OT_my_opMULTIPLEBBARVG(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultiplebbarvg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_88"]'
        index = 0
        stringMULTIPLEBBARVG = mytool.my_floatMULTIPLEBBARVG
        frMULTIPLEBBARVG = bpy.context.scene.render.fps
        jeffMULTIPLEBBARVgl = stringMULTIPLEBBARVG * frMULTIPLEBBARVG
        onemoreMULTIPLEBBARVgl = (mytool.my_floatMULTIPLEBBARVLG * frMULTIPLEBBARVG) + jeffMULTIPLEBBARVgl
        bobMULTIPLEBBARVgl = onemoreMULTIPLEBBARVgl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEBBARVgl = int(bobMULTIPLEBBARVgl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEBBARVgl
                kps.handle_left[0] = jeffMULTIPLEBBARVgl - 30
                kps.handle_right[0] = jeffMULTIPLEBBARVgl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEBBARVgl
                kpz.handle_left[0] = bobMULTIPLEBBARVgl - 30
                kpz.handle_right[0] = bobMULTIPLEBBARVgl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEBBARVgl + frMULTIPLEBBARVG

        return {'FINISHED'}


class ADDONNAME_OT_my_opMULTIPLEBBARVH(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultiplebbarvh"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Input_89"]'
        index = 0
        stringMULTIPLEBBARVH = mytool.my_floatMULTIPLEBBARVH
        frMULTIPLEBBARVH = bpy.context.scene.render.fps
        jeffMULTIPLEBBARVhl = stringMULTIPLEBBARVH * frMULTIPLEBBARVH
        onemoreMULTIPLEBBARVhl = (mytool.my_floatMULTIPLEBBARVLH * frMULTIPLEBBARVH) + jeffMULTIPLEBBARVhl
        bobMULTIPLEBBARVhl = onemoreMULTIPLEBBARVhl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEBBARVhl = int(bobMULTIPLEBBARVhl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEBBARVhl
                kps.handle_left[0] = jeffMULTIPLEBBARVhl - 30
                kps.handle_right[0] = jeffMULTIPLEBBARVhl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEBBARVhl
                kpz.handle_left[0] = bobMULTIPLEBBARVhl - 30
                kpz.handle_right[0] = bobMULTIPLEBBARVhl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEBBARVhl + frMULTIPLEBBARVH

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLECBARVA(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormultiplecbarva"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_20"]'
        index = 0
        stringMULTIPLECBARVA = mytool.my_floatMULTIPLECBARVA
        frMULTIPLECBARVA = bpy.context.scene.render.fps
        jeffMULTIPLECBARV = stringMULTIPLECBARVA * frMULTIPLECBARVA
        onemoreMULTIPLECBARV = (mytool.my_floatMULTIPLECBARVLA * frMULTIPLECBARVA) + jeffMULTIPLECBARV
        bobMULTIPLECBARV = onemoreMULTIPLECBARV       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLECBARV = int(bobMULTIPLECBARV)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLECBARV
                kps.handle_left[0] = jeffMULTIPLECBARV - 30
                kps.handle_right[0] = jeffMULTIPLECBARV
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLECBARV
                kpz.handle_left[0] = bobMULTIPLECBARV - 30
                kpz.handle_right[0] = bobMULTIPLECBARV + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLECBARV + frMULTIPLECBARVA

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMULTIPLECBARVB(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultiplecbarvb"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_21"]'
        index = 0
        stringMULTIPLECBARV = mytool.my_floatMULTIPLECBARVB
        frMULTIPLECBARV = bpy.context.scene.render.fps
        jeffMULTIPLECBARVbl = stringMULTIPLECBARV*frMULTIPLECBARV
        onemoreMULTIPLECBARVbl =  (mytool.my_floatMULTIPLECBARVLB*frMULTIPLECBARV) + jeffMULTIPLECBARVbl
        bobMULTIPLECBARVbl = onemoreMULTIPLECBARVbl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLECBARVbl = int(bobMULTIPLECBARVbl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLECBARVbl
                kps.handle_left[0] = jeffMULTIPLECBARVbl - 30
                kps.handle_right[0] = jeffMULTIPLECBARVbl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLECBARVbl
                kpz.handle_left[0] = bobMULTIPLECBARVbl - 30
                kpz.handle_right[0] = bobMULTIPLECBARVbl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLECBARVbl + frMULTIPLECBARV

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMULTIPLECBARVC(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultiplecbarvc"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_22"]'
        index = 0
        stringMULTIPLECBARVC = mytool.my_floatMULTIPLECBARVC
        frMULTIPLECBARVC = bpy.context.scene.render.fps
        jeffMULTIPLECBARVcl = stringMULTIPLECBARVC * frMULTIPLECBARVC
        onemoreMULTIPLECBARVcl = (mytool.my_floatMULTIPLECBARVLC * frMULTIPLECBARVC) + jeffMULTIPLECBARVcl
        bobMULTIPLECBARVcl = onemoreMULTIPLECBARVcl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLECBARVcl = int(bobMULTIPLECBARVcl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLECBARVcl
                kps.handle_left[0] = jeffMULTIPLECBARVcl - 30
                kps.handle_right[0] = jeffMULTIPLECBARVcl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLECBARVcl
                kpz.handle_left[0] = bobMULTIPLECBARVcl - 30
                kpz.handle_right[0] = bobMULTIPLECBARVcl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLECBARVcl + frMULTIPLECBARVC

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLECBARVD(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultiplecbarvd"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_23"]'
        index = 0
        stringMULTIPLECBARVD = mytool.my_floatMULTIPLECBARVD
        frMULTIPLECBARVD = bpy.context.scene.render.fps
        jeffMULTIPLECBARVdl = stringMULTIPLECBARVD * frMULTIPLECBARVD
        onemoreMULTIPLECBARVdl = (mytool.my_floatMULTIPLECBARVLD * frMULTIPLECBARVD) + jeffMULTIPLECBARVdl
        bobMULTIPLECBARVdl = onemoreMULTIPLECBARVdl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLECBARVdl = int(bobMULTIPLECBARVdl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLECBARVdl
                kps.handle_left[0] = jeffMULTIPLECBARVdl - 30
                kps.handle_right[0] = jeffMULTIPLECBARVdl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLECBARVdl
                kpz.handle_left[0] = bobMULTIPLECBARVdl - 30
                kpz.handle_right[0] = bobMULTIPLECBARVdl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLECBARVdl + frMULTIPLECBARVD

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLECBARVE(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultiplecbarve"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_24"]'
        index = 0
        stringMULTIPLECBARVE = mytool.my_floatMULTIPLECBARVE
        frMULTIPLECBARVE = bpy.context.scene.render.fps
        jeffMULTIPLECBARVel = stringMULTIPLECBARVE*frMULTIPLECBARVE
        onemoreMULTIPLECBARVel =  (mytool.my_floatMULTIPLECBARVLE*frMULTIPLECBARVE) + jeffMULTIPLECBARVel
        bobMULTIPLECBARVel = onemoreMULTIPLECBARVel       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLECBARVel = int(bobMULTIPLECBARVel)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLECBARVel
                kps.handle_left[0] = jeffMULTIPLECBARVel - 30
                kps.handle_right[0] = jeffMULTIPLECBARVel
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLECBARVel
                kpz.handle_left[0] = bobMULTIPLECBARVel - 30
                kpz.handle_right[0] = bobMULTIPLECBARVel + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLECBARVel + frMULTIPLECBARVE

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLECBARVF(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultiplecbarvf"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_25"]'
        index = 0
        stringMULTIPLECFARVF = mytool.my_floatMULTIPLECBARVF
        frMULTIPLECFARVF = bpy.context.scene.render.fps
        jeffMULTIPLECFARVfl = stringMULTIPLECFARVF * frMULTIPLECFARVF
        onemoreMULTIPLECFARVfl = (mytool.my_floatMULTIPLECBARVLF * frMULTIPLECFARVF) + jeffMULTIPLECFARVfl
        bobMULTIPLECFARVfl = onemoreMULTIPLECFARVfl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLECFARVfl = int(bobMULTIPLECFARVfl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLECFARVfl
                kps.handle_left[0] = jeffMULTIPLECFARVfl - 30
                kps.handle_right[0] = jeffMULTIPLECFARVfl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLECFARVfl
                kpz.handle_left[0] = bobMULTIPLECFARVfl - 30
                kpz.handle_right[0] = bobMULTIPLECFARVfl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLECFARVfl + frMULTIPLECFARVF

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMULTIPLECBARVG(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultiplecbarvg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_26"]'
        index = 0
        stringMULTIPLECBARVG = mytool.my_floatMULTIPLECBARVG
        frMULTIPLECBARVG = bpy.context.scene.render.fps
        jeffMULTIPLECBARVgl = stringMULTIPLECBARVG * frMULTIPLECBARVG
        onemoreMULTIPLECBARVgl = (mytool.my_floatMULTIPLECBARVLG * frMULTIPLECBARVG) + jeffMULTIPLECBARVgl
        bobMULTIPLECBARVgl = onemoreMULTIPLECBARVgl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLECBARVgl = int(bobMULTIPLECBARVgl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLECBARVgl
                kps.handle_left[0] = jeffMULTIPLECBARVgl - 30
                kps.handle_right[0] = jeffMULTIPLECBARVgl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLECBARVgl
                kpz.handle_left[0] = bobMULTIPLECBARVgl - 30
                kpz.handle_right[0] = bobMULTIPLECBARVgl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLECBARVgl + frMULTIPLECBARVG

        return {'FINISHED'}


class ADDONNAME_OT_my_opMULTIPLECBARVH(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultiplecbarvh"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_27"]'
        index = 0
        stringMULTIPLECBARVH = mytool.my_floatMULTIPLECBARVH
        frMULTIPLECBARVH = bpy.context.scene.render.fps
        jeffMULTIPLECBARVhl = stringMULTIPLECBARVH * frMULTIPLECBARVH
        onemoreMULTIPLECBARVhl = (mytool.my_floatMULTIPLECBARVLH * frMULTIPLECBARVH) + jeffMULTIPLECBARVhl
        bobMULTIPLECBARVhl = onemoreMULTIPLECBARVhl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLECBARVhl = int(bobMULTIPLECBARVhl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLECBARVhl
                kps.handle_left[0] = jeffMULTIPLECBARVhl - 30
                kps.handle_right[0] = jeffMULTIPLECBARVhl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLECBARVhl
                kpz.handle_left[0] = bobMULTIPLECBARVhl - 30
                kpz.handle_right[0] = bobMULTIPLECBARVhl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLECBARVhl + frMULTIPLECBARVH

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLEDBARVA(bpy.types.Operator):
    bl_label = "Add Objecggggggt"
    bl_idname = "addonname.myop_operatormultipledbarva"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_28"]'
        index = 0
        stringMULTIPLEDBARVA = mytool.my_floatMULTIPLEDBARVA
        frMULTIPLEDBARVA = bpy.context.scene.render.fps
        jeffMULTIPLEDBARV = stringMULTIPLEDBARVA * frMULTIPLEDBARVA
        onemoreMULTIPLEDBARV = (mytool.my_floatMULTIPLEDBARVLA * frMULTIPLEDBARVA) + jeffMULTIPLEDBARV
        bobMULTIPLEDBARV = onemoreMULTIPLEDBARV       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEDBARV = int(bobMULTIPLEDBARV)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEDBARV
                kps.handle_left[0] = jeffMULTIPLEDBARV - 30
                kps.handle_right[0] = jeffMULTIPLEDBARV
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEDBARV
                kpz.handle_left[0] = bobMULTIPLEDBARV - 30
                kpz.handle_right[0] = bobMULTIPLEDBARV + 30
                                               
                # fcurve.keyframe_points[0].co.x = 1
                # fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEDBARV + frMULTIPLEDBARVA

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMULTIPLEDBARVB(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultipledbarvb"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_29"]'
        index = 0
        stringMULTIPLEDBARV = mytool.my_floatMULTIPLEDBARVB
        frMULTIPLEDBARV = bpy.context.scene.render.fps
        jeffMULTIPLEDBARVbl = stringMULTIPLEDBARV*frMULTIPLEDBARV
        onemoreMULTIPLEDBARVbl =  (mytool.my_floatMULTIPLEDBARVLB*frMULTIPLEDBARV) + jeffMULTIPLEDBARVbl
        bobMULTIPLEDBARVbl = onemoreMULTIPLEDBARVbl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEDBARVbl = int(bobMULTIPLEDBARVbl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEDBARVbl
                kps.handle_left[0] = jeffMULTIPLEDBARVbl - 30
                kps.handle_right[0] = jeffMULTIPLEDBARVbl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEDBARVbl
                kpz.handle_left[0] = bobMULTIPLEDBARVbl - 30
                kpz.handle_right[0] = bobMULTIPLEDBARVbl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEDBARVbl + frMULTIPLEDBARV

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMULTIPLEDBARVC(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultipledbarvc"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_30"]'
        index = 0
        stringMULTIPLEDBARVC = mytool.my_floatMULTIPLEDBARVC
        frMULTIPLEDBARVC = bpy.context.scene.render.fps
        jeffMULTIPLEDBARVcl = stringMULTIPLEDBARVC * frMULTIPLEDBARVC
        onemoreMULTIPLEDBARVcl = (mytool.my_floatMULTIPLEDBARVLC * frMULTIPLEDBARVC) + jeffMULTIPLEDBARVcl
        bobMULTIPLEDBARVcl = onemoreMULTIPLEDBARVcl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEDBARVcl = int(bobMULTIPLEDBARVcl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEDBARVcl
                kps.handle_left[0] = jeffMULTIPLEDBARVcl - 30
                kps.handle_right[0] = jeffMULTIPLEDBARVcl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEDBARVcl
                kpz.handle_left[0] = bobMULTIPLEDBARVcl - 30
                kpz.handle_right[0] = bobMULTIPLEDBARVcl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEDBARVcl + frMULTIPLEDBARVC

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLEDBARVD(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultipledbarvd"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_31"]'
        index = 0
        stringMULTIPLEDBARVD = mytool.my_floatMULTIPLEDBARVD
        frMULTIPLEDBARVD = bpy.context.scene.render.fps
        jeffMULTIPLEDBARVdl = stringMULTIPLEDBARVD * frMULTIPLEDBARVD
        onemoreMULTIPLEDBARVdl = (mytool.my_floatMULTIPLEDBARVLD * frMULTIPLEDBARVD) + jeffMULTIPLEDBARVdl
        bobMULTIPLEDBARVdl = onemoreMULTIPLEDBARVdl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEDBARVdl = int(bobMULTIPLEDBARVdl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEDBARVdl
                kps.handle_left[0] = jeffMULTIPLEDBARVdl - 30
                kps.handle_right[0] = jeffMULTIPLEDBARVdl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEDBARVdl
                kpz.handle_left[0] = bobMULTIPLEDBARVdl - 30
                kpz.handle_right[0] = bobMULTIPLEDBARVdl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEDBARVdl + frMULTIPLEDBARVD

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLEDBARVE(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultipledbarve"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_32"]'
        index = 0
        stringMULTIPLEDBARVE = mytool.my_floatMULTIPLEDBARVE
        frMULTIPLEDBARVE = bpy.context.scene.render.fps
        jeffMULTIPLEDBARVel = stringMULTIPLEDBARVE*frMULTIPLEDBARVE
        onemoreMULTIPLEDBARVel =  (mytool.my_floatMULTIPLEDBARVLE*frMULTIPLEDBARVE) + jeffMULTIPLEDBARVel
        bobMULTIPLEDBARVel = onemoreMULTIPLEDBARVel       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEDBARVel = int(bobMULTIPLEDBARVel)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEDBARVel
                kps.handle_left[0] = jeffMULTIPLEDBARVel - 30
                kps.handle_right[0] = jeffMULTIPLEDBARVel
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEDBARVel
                kpz.handle_left[0] = bobMULTIPLEDBARVel - 30
                kpz.handle_right[0] = bobMULTIPLEDBARVel + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEDBARVel + frMULTIPLEDBARVE

        return {'FINISHED'}

class ADDONNAME_OT_my_opMULTIPLEDBARVF(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultipledbarvf"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_33"]'
        index = 0
        stringMULTIPLEDFARVF = mytool.my_floatMULTIPLEDBARVF
        frMULTIPLEDFARVF = bpy.context.scene.render.fps
        jeffMULTIPLEDFARVfl = stringMULTIPLEDFARVF * frMULTIPLEDFARVF
        onemoreMULTIPLEDFARVfl = (mytool.my_floatMULTIPLEDBARVLF * frMULTIPLEDFARVF) + jeffMULTIPLEDFARVfl
        bobMULTIPLEDFARVfl = onemoreMULTIPLEDFARVfl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEDFARVfl = int(bobMULTIPLEDFARVfl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEDFARVfl
                kps.handle_left[0] = jeffMULTIPLEDFARVfl - 30
                kps.handle_right[0] = jeffMULTIPLEDFARVfl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEDFARVfl
                kpz.handle_left[0] = bobMULTIPLEDFARVfl - 30
                kpz.handle_right[0] = bobMULTIPLEDFARVfl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEDFARVfl + frMULTIPLEDFARVF

        return {'FINISHED'}
    
class ADDONNAME_OT_my_opMULTIPLEDBARVG(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultipledbarvg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_34"]'
        index = 0
        stringMULTIPLEDBARVG = mytool.my_floatMULTIPLEDBARVG
        frMULTIPLEDBARVG = bpy.context.scene.render.fps
        jeffMULTIPLEDBARVgl = stringMULTIPLEDBARVG * frMULTIPLEDBARVG
        onemoreMULTIPLEDBARVgl = (mytool.my_floatMULTIPLEDBARVLG * frMULTIPLEDBARVG) + jeffMULTIPLEDBARVgl
        bobMULTIPLEDBARVgl = onemoreMULTIPLEDBARVgl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEDBARVgl = int(bobMULTIPLEDBARVgl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEDBARVgl
                kps.handle_left[0] = jeffMULTIPLEDBARVgl - 30
                kps.handle_right[0] = jeffMULTIPLEDBARVgl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEDBARVgl
                kpz.handle_left[0] = bobMULTIPLEDBARVgl - 30
                kpz.handle_right[0] = bobMULTIPLEDBARVgl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEDBARVgl + frMULTIPLEDBARVG

        return {'FINISHED'}


class ADDONNAME_OT_my_opMULTIPLEDBARVH(bpy.types.Operator):
    bl_label = "Add Object"
    bl_idname = "addonname.myop_operatormultipledbarvh"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        action_name = bpy.context.active_object.animation_data.action.name
        data_path = 'modifiers["GeometryNodes"]["Socket_35"]'
        index = 0
        stringMULTIPLEDBARVH = mytool.my_floatMULTIPLEDBARVH
        frMULTIPLEDBARVH = bpy.context.scene.render.fps
        jeffMULTIPLEDBARVhl = stringMULTIPLEDBARVH * frMULTIPLEDBARVH
        onemoreMULTIPLEDBARVhl = (mytool.my_floatMULTIPLEDBARVLH * frMULTIPLEDBARVH) + jeffMULTIPLEDBARVhl
        bobMULTIPLEDBARVhl = onemoreMULTIPLEDBARVhl       

        # Find the appropriate action
        action = bpy.data.actions.get(action_name)
        if action:
            # From this action, retrieve the appropriate F-Curve
            fcurve = action.fcurves.find(data_path=data_path, index=index)
            if fcurve:
                # Iterate over all keyframes
                
                bobMULTIPLEDBARVhl = int(bobMULTIPLEDBARVhl)
                
                kps = fcurve.keyframe_points[0]
                kps.co.x = jeffMULTIPLEDBARVhl
                kps.handle_left[0] = jeffMULTIPLEDBARVhl - 30
                kps.handle_right[0] = jeffMULTIPLEDBARVhl
                kps.handle_right[1] = 0.6        
                
                kpz = fcurve.keyframe_points[1]
                kpz.co.x = bobMULTIPLEDBARVhl
                kpz.handle_left[0] = bobMULTIPLEDBARVhl - 30
                kpz.handle_right[0] = bobMULTIPLEDBARVhl + 30
                                               
                #fcurve.keyframe_points[0].co.x = 1
                #fcurve.keyframe_points[1].co.x = bob
                
                bpy.context.scene.frame_end = bobMULTIPLEDBARVhl + frMULTIPLEDBARVH

        return {'FINISHED'}

class ADDONNAME_VBC(bpy.types.Operator):
    bl_label = "Add Ob33jectVBC"
    bl_idname = "addonname.myop_operatorvbc"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumVBC == 'OPVBC7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 168

            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_28"]', 'modifiers["GeometryNodes"]["Input_29"]', 'modifiers["GeometryNodes"]["Input_30"]', 'modifiers["GeometryNodes"]["Input_31"]', 'modifiers["GeometryNodes"]["Input_53"]', 'modifiers["GeometryNodes"]["Input_54"]', 'modifiers["GeometryNodes"]["Input_55"]', 'modifiers["GeometryNodes"]["Input_56"]', 'modifiers["GeometryNodes"]["Input_82"]', 'modifiers["GeometryNodes"]["Input_83"]', 'modifiers["GeometryNodes"]["Input_84"]', 'modifiers["GeometryNodes"]["Input_85"]', 'modifiers["GeometryNodes"]["Input_86"]', 'modifiers["GeometryNodes"]["Input_87"]', 'modifiers["GeometryNodes"]["Input_88"]', 'modifiers["GeometryNodes"]["Input_89"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 24
                        fcurve.keyframe_points[0].handle_right[1] = 0.573
                        fcurve.keyframe_points[1].co.x = 120
                        fcurve.keyframe_points[1].handle_left[0] = 66.708


                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

            
        if mytool.my_enumVBC == 'OPVBC8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 210
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_28"]', 'modifiers["GeometryNodes"]["Input_29"]', 'modifiers["GeometryNodes"]["Input_30"]', 'modifiers["GeometryNodes"]["Input_31"]', 'modifiers["GeometryNodes"]["Input_53"]', 'modifiers["GeometryNodes"]["Input_54"]', 'modifiers["GeometryNodes"]["Input_55"]', 'modifiers["GeometryNodes"]["Input_56"]', 'modifiers["GeometryNodes"]["Input_82"]', 'modifiers["GeometryNodes"]["Input_83"]', 'modifiers["GeometryNodes"]["Input_84"]', 'modifiers["GeometryNodes"]["Input_85"]', 'modifiers["GeometryNodes"]["Input_86"]', 'modifiers["GeometryNodes"]["Input_87"]', 'modifiers["GeometryNodes"]["Input_88"]', 'modifiers["GeometryNodes"]["Input_89"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 30
                        fcurve.keyframe_points[0].handle_right[1] = 0.757
                        fcurve.keyframe_points[1].co.x = 150
                        fcurve.keyframe_points[1].handle_left[0] = 90

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

        return {'FINISHED'}
    
class ADDONNAME_VBM(bpy.types.Operator):
    bl_label = "Add Ob33jectVBM"
    bl_idname = "addonname.myop_operatorvbm"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumVBM == 'OPVBM7':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 168

            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_28"]', 'modifiers["GeometryNodes"]["Input_29"]', 'modifiers["GeometryNodes"]["Input_30"]', 'modifiers["GeometryNodes"]["Input_31"]', 'modifiers["GeometryNodes"]["Input_53"]', 'modifiers["GeometryNodes"]["Input_54"]', 'modifiers["GeometryNodes"]["Input_55"]', 'modifiers["GeometryNodes"]["Input_56"]', 'modifiers["GeometryNodes"]["Input_82"]', 'modifiers["GeometryNodes"]["Input_83"]', 'modifiers["GeometryNodes"]["Input_84"]', 'modifiers["GeometryNodes"]["Input_85"]', 'modifiers["GeometryNodes"]["Input_86"]', 'modifiers["GeometryNodes"]["Input_87"]', 'modifiers["GeometryNodes"]["Input_88"]', 'modifiers["GeometryNodes"]["Input_89"]', 'modifiers["GeometryNodes"]["Socket_20"]', 'modifiers["GeometryNodes"]["Socket_21"]', 'modifiers["GeometryNodes"]["Socket_22"]', 'modifiers["GeometryNodes"]["Socket_23"]', 'modifiers["GeometryNodes"]["Socket_24"]', 'modifiers["GeometryNodes"]["Socket_25"]', 'modifiers["GeometryNodes"]["Socket_26"]', 'modifiers["GeometryNodes"]["Socket_27"]', 'modifiers["GeometryNodes"]["Socket_28"]', 'modifiers["GeometryNodes"]["Socket_29"]', 'modifiers["GeometryNodes"]["Socket_30"]', 'modifiers["GeometryNodes"]["Socket_31"]', 'modifiers["GeometryNodes"]["Socket_32"]', 'modifiers["GeometryNodes"]["Socket_33"]', 'modifiers["GeometryNodes"]["Socket_34"]', 'modifiers["GeometryNodes"]["Socket_35"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 24
                        fcurve.keyframe_points[0].handle_right[1] = 0.573
                        fcurve.keyframe_points[1].co.x = 120
                        fcurve.keyframe_points[1].handle_left[0] = 66.708


                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

            
        if mytool.my_enumVBM == 'OPVBM8':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 210
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_paths = ['modifiers["GeometryNodes"]["Input_28"]', 'modifiers["GeometryNodes"]["Input_29"]', 'modifiers["GeometryNodes"]["Input_30"]', 'modifiers["GeometryNodes"]["Input_31"]', 'modifiers["GeometryNodes"]["Input_53"]', 'modifiers["GeometryNodes"]["Input_54"]', 'modifiers["GeometryNodes"]["Input_55"]', 'modifiers["GeometryNodes"]["Input_56"]', 'modifiers["GeometryNodes"]["Input_82"]', 'modifiers["GeometryNodes"]["Input_83"]', 'modifiers["GeometryNodes"]["Input_84"]', 'modifiers["GeometryNodes"]["Input_85"]', 'modifiers["GeometryNodes"]["Input_86"]', 'modifiers["GeometryNodes"]["Input_87"]', 'modifiers["GeometryNodes"]["Input_88"]', 'modifiers["GeometryNodes"]["Input_89"]', 'modifiers["GeometryNodes"]["Socket_20"]', 'modifiers["GeometryNodes"]["Socket_21"]', 'modifiers["GeometryNodes"]["Socket_22"]', 'modifiers["GeometryNodes"]["Socket_23"]', 'modifiers["GeometryNodes"]["Socket_24"]', 'modifiers["GeometryNodes"]["Socket_25"]', 'modifiers["GeometryNodes"]["Socket_26"]', 'modifiers["GeometryNodes"]["Socket_27"]', 'modifiers["GeometryNodes"]["Socket_28"]', 'modifiers["GeometryNodes"]["Socket_29"]', 'modifiers["GeometryNodes"]["Socket_30"]', 'modifiers["GeometryNodes"]["Socket_31"]', 'modifiers["GeometryNodes"]["Socket_32"]', 'modifiers["GeometryNodes"]["Socket_33"]', 'modifiers["GeometryNodes"]["Socket_34"]', 'modifiers["GeometryNodes"]["Socket_35"]']
            index = 0               # Z axis

            for data_path in data_paths:
                # Find the appropriate action
                action = bpy.data.actions.get(action_name)
                if action:
                    # From this action, retrieve the appropriate F-Curve
                    fcurve = action.fcurves.find(data_path=data_path, index=index)
                    if fcurve:
                        fcurve.keyframe_points[0].co.x = 30
                        fcurve.keyframe_points[0].handle_right[1] = 0.757
                        fcurve.keyframe_points[1].co.x = 150
                        fcurve.keyframe_points[1].handle_left[0] = 90

                        print("changed")
                    else:
                        print("no fcurve")
                else:
                    print("no action")

            print("end")

        return {'FINISHED'}


class ADDONNAME_OT_my_opmcpie(bpy.types.Operator):
    bl_label = "Add Ob33ject2"
    bl_idname = "addonname.myop_operatormcpie"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumMCpie == 'OPMC7pie':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 264
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_50"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_left[0] = 24
                    fcurve.keyframe_points[0].handle_left[1] = -7.667
                    fcurve.keyframe_points[0].handle_right[0] = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.623
                    fcurve.keyframe_points[1].co.x = 48
                    fcurve.keyframe_points[1].handle_left[0] = 37.893
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 55.667
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.002Action.001'
            data_path = 'modifiers["GeometryNodes"]["Input_51"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 48
                    fcurve.keyframe_points[0].handle_left[0] = 48
                    fcurve.keyframe_points[0].handle_left[1] = -0.675
                    fcurve.keyframe_points[0].handle_right[0] = 48
                    fcurve.keyframe_points[0].handle_right[1] = 0.675
                    fcurve.keyframe_points[1].co.x = 72
                    fcurve.keyframe_points[1].handle_left[0] = 60.567
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 90
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            action_name = 'Circle Graph.002Action.001'
            data_path = 'modifiers["GeometryNodes"]["Input_52"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 72
                    fcurve.keyframe_points[0].handle_left[0] = 72
                    fcurve.keyframe_points[0].handle_left[1] = -0.576
                    fcurve.keyframe_points[0].handle_right[0] = 72
                    fcurve.keyframe_points[0].handle_right[1] = 0.576
                    fcurve.keyframe_points[1].co.x = 96
                    fcurve.keyframe_points[1].handle_left[0] = 80.1
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 121
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            action_name = 'Circle Graph.002Action.001'
            data_path = 'modifiers["GeometryNodes"]["Input_53"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 96
                    fcurve.keyframe_points[0].handle_left[0] = 96
                    fcurve.keyframe_points[0].handle_left[1] = -0.704
                    fcurve.keyframe_points[0].handle_right[0] = 96
                    fcurve.keyframe_points[0].handle_right[1] = 0.699
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 109.4
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 151
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            action_name = 'Circle Graph.002Action.001'
            data_path = 'modifiers["GeometryNodes"]["Input_54"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 120
                    fcurve.keyframe_points[0].handle_left[0] = 120
                    fcurve.keyframe_points[0].handle_left[1] = -0.896
                    fcurve.keyframe_points[0].handle_right[0] = 120
                    fcurve.keyframe_points[0].handle_right[1] = 0.762
                    fcurve.keyframe_points[1].co.x = 144
                    fcurve.keyframe_points[1].handle_left[0] = 132.836
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 145
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.002Action.001'
            data_path = 'modifiers["GeometryNodes"]["Socket_4"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 144
                    fcurve.keyframe_points[0].handle_left[0] = 144
                    fcurve.keyframe_points[0].handle_left[1] = -0.896
                    fcurve.keyframe_points[0].handle_right[0] = 144
                    fcurve.keyframe_points[0].handle_right[1] = 0.727
                    fcurve.keyframe_points[1].co.x = 168
                    fcurve.keyframe_points[1].handle_left[0] = 160
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 176
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.002Action.001'
            data_path = 'modifiers["GeometryNodes"]["Socket_5"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 168
                    fcurve.keyframe_points[0].handle_left[0] = 168
                    fcurve.keyframe_points[0].handle_left[1] = -0.896
                    fcurve.keyframe_points[0].handle_right[0] = 168
                    fcurve.keyframe_points[0].handle_right[1] = 0.659
                    fcurve.keyframe_points[1].co.x = 192
                    fcurve.keyframe_points[1].handle_left[0] = 184
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 200
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.002Action.001'
            data_path = 'modifiers["GeometryNodes"]["Socket_6"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 192
                    fcurve.keyframe_points[0].handle_left[0] = 192
                    fcurve.keyframe_points[0].handle_left[1] = -0.896
                    fcurve.keyframe_points[0].handle_right[0] = 192
                    fcurve.keyframe_points[0].handle_right[1] = 0.606
                    fcurve.keyframe_points[1].co.x = 216
                    fcurve.keyframe_points[1].handle_left[0] = 206
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 224
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

        if mytool.my_enumMCpie == 'OPMC8pie':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 330
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_50"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_left[0] = 30
                    fcurve.keyframe_points[0].handle_left[1] = -0.623
                    fcurve.keyframe_points[0].handle_right[0] = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.623
                    fcurve.keyframe_points[1].co.x = 60
                    fcurve.keyframe_points[1].handle_left[0] = 47.614
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 72.398
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.002Action.001'
            data_path = 'modifiers["GeometryNodes"]["Input_51"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 60
                    fcurve.keyframe_points[0].handle_left[0] = 48
                    fcurve.keyframe_points[0].handle_left[1] = -0.623
                    fcurve.keyframe_points[0].handle_right[0] = 60.432
                    fcurve.keyframe_points[0].handle_right[1] = 0.519
                    fcurve.keyframe_points[1].co.x = 90
                    fcurve.keyframe_points[1].handle_left[0] = 72.7
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 91
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            action_name = 'Circle Graph.002Action.001'
            data_path = 'modifiers["GeometryNodes"]["Input_52"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 90
                    fcurve.keyframe_points[0].handle_left[0] = 90
                    fcurve.keyframe_points[0].handle_left[1] = -0.841
                    fcurve.keyframe_points[0].handle_right[0] = 90
                    fcurve.keyframe_points[0].handle_right[1] = 0.576
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 102.946
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 121
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.002Action.001'
            data_path = 'modifiers["GeometryNodes"]["Input_53"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 120
                    fcurve.keyframe_points[0].handle_left[0] = 120
                    fcurve.keyframe_points[0].handle_left[1] = -0.462
                    fcurve.keyframe_points[0].handle_right[0] = 120
                    fcurve.keyframe_points[0].handle_right[1] = 0.274
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 121.518
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 151
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.002Action.001'
            data_path = 'modifiers["GeometryNodes"]["Input_54"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 150
                    fcurve.keyframe_points[0].handle_left[0] = 150
                    fcurve.keyframe_points[0].handle_left[1] = -0.722
                    fcurve.keyframe_points[0].handle_right[0] = 150
                    fcurve.keyframe_points[0].handle_right[1] = 0.762
                    fcurve.keyframe_points[1].co.x = 180
                    fcurve.keyframe_points[1].handle_left[0] = 164.3
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 181
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
   
            action_name = 'Circle Graph.002Action.001'
            data_path = 'modifiers["GeometryNodes"]["Socket_4"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 180
                    fcurve.keyframe_points[0].handle_left[0] = 180
                    fcurve.keyframe_points[0].handle_left[1] = -0.864
                    fcurve.keyframe_points[0].handle_right[0] = 180
                    fcurve.keyframe_points[0].handle_right[1] = 0.727
                    fcurve.keyframe_points[1].co.x = 210
                    fcurve.keyframe_points[1].handle_left[0] = 200
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 220
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.002Action.001'
            data_path = 'modifiers["GeometryNodes"]["Socket_5"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 210
                    fcurve.keyframe_points[0].handle_left[0] = 210
                    fcurve.keyframe_points[0].handle_left[1] = -0.864
                    fcurve.keyframe_points[0].handle_right[0] = 210
                    fcurve.keyframe_points[0].handle_right[1] = 0.659
                    fcurve.keyframe_points[1].co.x = 240
                    fcurve.keyframe_points[1].handle_left[0] = 230
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 250
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.002Action.001'
            data_path = 'modifiers["GeometryNodes"]["Socket_6"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 240
                    fcurve.keyframe_points[0].handle_left[0] = 240
                    fcurve.keyframe_points[0].handle_left[1] = -0.864
                    fcurve.keyframe_points[0].handle_right[0] = 240
                    fcurve.keyframe_points[0].handle_right[1] = 0.606
                    fcurve.keyframe_points[1].co.x = 270
                    fcurve.keyframe_points[1].handle_left[0] = 260
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 280
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

        return {'FINISHED'}

class ADDONNAME_OT_my_opmppie(bpy.types.Operator):
    bl_label = "Add Ob33ject2"
    bl_idname = "addonname.myop_operatormppie"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enumMPpie == 'OPMP7pie':
            bpy.context.scene.render.fps = 24
            bpy.context.scene.frame_end = 264
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_49"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 24
                    fcurve.keyframe_points[0].handle_left[0] = 24
                    fcurve.keyframe_points[0].handle_left[1] = -7.667
                    fcurve.keyframe_points[0].handle_right[0] = 24
                    fcurve.keyframe_points[0].handle_right[1] = 0.623
                    fcurve.keyframe_points[1].co.x = 48
                    fcurve.keyframe_points[1].handle_left[0] = 37.893
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 55.667
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.005Action'
            data_path = 'modifiers["GeometryNodes"]["Input_50"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 48
                    fcurve.keyframe_points[0].handle_left[0] = 48
                    fcurve.keyframe_points[0].handle_left[1] = -0.675
                    fcurve.keyframe_points[0].handle_right[0] = 48
                    fcurve.keyframe_points[0].handle_right[1] = 0.675
                    fcurve.keyframe_points[1].co.x = 72
                    fcurve.keyframe_points[1].handle_left[0] = 60.567
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 90
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            action_name = 'Circle Graph.005Action'
            data_path = 'modifiers["GeometryNodes"]["Input_51"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 72
                    fcurve.keyframe_points[0].handle_left[0] = 72
                    fcurve.keyframe_points[0].handle_left[1] = -0.576
                    fcurve.keyframe_points[0].handle_right[0] = 72
                    fcurve.keyframe_points[0].handle_right[1] = 0.576
                    fcurve.keyframe_points[1].co.x = 96
                    fcurve.keyframe_points[1].handle_left[0] = 80.1
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 121
                    fcurve.keyframe_points[1].handle_right[1] = 1

            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            action_name = 'Circle Graph.005Action'
            data_path = 'modifiers["GeometryNodes"]["Input_52"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 96
                    fcurve.keyframe_points[0].handle_left[0] = 96
                    fcurve.keyframe_points[0].handle_left[1] = -0.704
                    fcurve.keyframe_points[0].handle_right[0] = 96
                    fcurve.keyframe_points[0].handle_right[1] = 0.699
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 109.4
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 151
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            action_name = 'Circle Graph.005Action'
            data_path = 'modifiers["GeometryNodes"]["Input_53"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 120
                    fcurve.keyframe_points[0].handle_left[0] = 120
                    fcurve.keyframe_points[0].handle_left[1] = -0.896
                    fcurve.keyframe_points[0].handle_right[0] = 120
                    fcurve.keyframe_points[0].handle_right[1] = 0.762
                    fcurve.keyframe_points[1].co.x = 144
                    fcurve.keyframe_points[1].handle_left[0] = 132.836
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 145
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.005Action'
            data_path = 'modifiers["GeometryNodes"]["Input_95"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 144
                    fcurve.keyframe_points[0].handle_left[0] = 144
                    fcurve.keyframe_points[0].handle_left[1] = -0.896
                    fcurve.keyframe_points[0].handle_right[0] = 144
                    fcurve.keyframe_points[0].handle_right[1] = 0.762
                    fcurve.keyframe_points[1].co.x = 168
                    fcurve.keyframe_points[1].handle_left[0] = 160
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 176
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.005Action'
            data_path = 'modifiers["GeometryNodes"]["Socket_2"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 168
                    fcurve.keyframe_points[0].handle_left[0] = 168
                    fcurve.keyframe_points[0].handle_left[1] = -0.896
                    fcurve.keyframe_points[0].handle_right[0] = 168
                    fcurve.keyframe_points[0].handle_right[1] = 0.762
                    fcurve.keyframe_points[1].co.x = 192
                    fcurve.keyframe_points[1].handle_left[0] = 184
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 200
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.005Action'
            data_path = 'modifiers["GeometryNodes"]["Socket_3"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 192
                    fcurve.keyframe_points[0].handle_left[0] = 192
                    fcurve.keyframe_points[0].handle_left[1] = -0.896
                    fcurve.keyframe_points[0].handle_right[0] = 192
                    fcurve.keyframe_points[0].handle_right[1] = 0.762
                    fcurve.keyframe_points[1].co.x = 216
                    fcurve.keyframe_points[1].handle_left[0] = 208
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 224
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

        if mytool.my_enumMPpie == 'OPMP8pie':
            bpy.context.scene.render.fps = 30
            bpy.context.scene.frame_end = 300
            
            action_name = bpy.context.active_object.animation_data.action.name
            data_path = 'modifiers["GeometryNodes"]["Input_49"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 30
                    fcurve.keyframe_points[0].handle_left[0] = 30
                    fcurve.keyframe_points[0].handle_left[1] = -0.623
                    fcurve.keyframe_points[0].handle_right[0] = 30
                    fcurve.keyframe_points[0].handle_right[1] = 0.623
                    fcurve.keyframe_points[1].co.x = 60
                    fcurve.keyframe_points[1].handle_left[0] = 47.614
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 72.398
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.005Action'
            data_path = 'modifiers["GeometryNodes"]["Input_50"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 60
                    fcurve.keyframe_points[0].handle_left[0] = 48
                    fcurve.keyframe_points[0].handle_left[1] = -0.623
                    fcurve.keyframe_points[0].handle_right[0] = 60.432
                    fcurve.keyframe_points[0].handle_right[1] = 0.519
                    fcurve.keyframe_points[1].co.x = 90
                    fcurve.keyframe_points[1].handle_left[0] = 72.7
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 91
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

            action_name = 'Circle Graph.005Action'
            data_path = 'modifiers["GeometryNodes"]["Input_51"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 90
                    fcurve.keyframe_points[0].handle_left[0] = 90
                    fcurve.keyframe_points[0].handle_left[1] = -0.841
                    fcurve.keyframe_points[0].handle_right[0] = 90
                    fcurve.keyframe_points[0].handle_right[1] = 0.576
                    fcurve.keyframe_points[1].co.x = 120
                    fcurve.keyframe_points[1].handle_left[0] = 102.946
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 121
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.005Action'
            data_path = 'modifiers["GeometryNodes"]["Input_52"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 120
                    fcurve.keyframe_points[0].handle_left[0] = 120
                    fcurve.keyframe_points[0].handle_left[1] = -0.462
                    fcurve.keyframe_points[0].handle_right[0] = 120
                    fcurve.keyframe_points[0].handle_right[1] = 0.274
                    fcurve.keyframe_points[1].co.x = 150
                    fcurve.keyframe_points[1].handle_left[0] = 121.518
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 151
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.005Action'
            data_path = 'modifiers["GeometryNodes"]["Input_53"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 150
                    fcurve.keyframe_points[0].handle_left[0] = 150
                    fcurve.keyframe_points[0].handle_left[1] = -0.722
                    fcurve.keyframe_points[0].handle_right[0] = 150
                    fcurve.keyframe_points[0].handle_right[1] = 0.762
                    fcurve.keyframe_points[1].co.x = 180
                    fcurve.keyframe_points[1].handle_left[0] = 164.3
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 181
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.005Action'
            data_path = 'modifiers["GeometryNodes"]["Input_95"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 180
                    fcurve.keyframe_points[0].handle_left[0] = 180
                    fcurve.keyframe_points[0].handle_left[1] = -0.722
                    fcurve.keyframe_points[0].handle_right[0] = 180
                    fcurve.keyframe_points[0].handle_right[1] = 0.762
                    fcurve.keyframe_points[1].co.x = 210
                    fcurve.keyframe_points[1].handle_left[0] = 194.3
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 211
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.005Action'
            data_path = 'modifiers["GeometryNodes"]["Socket_2"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 210
                    fcurve.keyframe_points[0].handle_left[0] = 210
                    fcurve.keyframe_points[0].handle_left[1] = -0.722
                    fcurve.keyframe_points[0].handle_right[0] = 210
                    fcurve.keyframe_points[0].handle_right[1] = 0.639
                    fcurve.keyframe_points[1].co.x = 240
                    fcurve.keyframe_points[1].handle_left[0] = 230
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 250
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")
            
            action_name = 'Circle Graph.005Action'
            data_path = 'modifiers["GeometryNodes"]["Socket_3"]'
            index = 0               # Z axis

            # Find the appropriate action
            action = bpy.data.actions.get(action_name)
            if action:
                # From this action, retrieve the appropriate F-Curve
                fcurve = action.fcurves.find(data_path = data_path, index = index)
                if fcurve:

                    fcurve.keyframe_points[0].co.x = 240
                    fcurve.keyframe_points[0].handle_left[0] = 240
                    fcurve.keyframe_points[0].handle_left[1] = -0.722
                    fcurve.keyframe_points[0].handle_right[0] = 240
                    fcurve.keyframe_points[0].handle_right[1] = 0.762
                    fcurve.keyframe_points[1].co.x = 270
                    fcurve.keyframe_points[1].handle_left[0] = 260
                    fcurve.keyframe_points[1].handle_left[1] = 1
                    fcurve.keyframe_points[1].handle_right[0] = 280
                    fcurve.keyframe_points[1].handle_right[1] = 1
            
                    print("changed")
                else:
                    print("no fcurve")
            else:
                print("no action")
    
            print("end")

        return {'FINISHED'}

class FontchangeCG(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorf"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        node_groupcg = modifier.node_group
        
        nodecgtitle = node_groupcg.nodes['String to Curves.005']
        datacgtitle_font = bpy.data.fonts.load(mytool.my_pathfontcg_title)
        nodecgtitle.font = datacgtitle_font
        
        nodecgsubtitle = node_groupcg.nodes['String to Curves.006']
        datacgsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontcg_subtitle)
        nodecgsubtitle.font = datacgsubtitle_font
        
        nodecgvalue = node_groupcg.nodes['String to Curves']
        datacgvalue_font = bpy.data.fonts.load(mytool.my_pathfontcg_value)
        nodecgvalue.font = datacgvalue_font        
        
        nodecgdescription = node_groupcg.nodes['String to Curves.001']
        datacgdescription_font = bpy.data.fonts.load(mytool.my_pathfontcg_description)
        nodecgdescription.font = datacgdescription_font
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreCG(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorres"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestorecg_group = modifier.node_group
        
        noderestorecgtitle = noderestorecg_group.nodes['String to Curves.005']
        datarestorecgtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorecgtitle.font = datarestorecgtitle_font
        
        noderestorecgsubtitle = noderestorecg_group.nodes['String to Curves.006']
        datarestorecgsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorecgsubtitle.font = datarestorecgsubtitle_font
        
        noderestorecgvalue = noderestorecg_group.nodes['String to Curves']
        datarestorecgvalue_font = bpy.data.fonts["Open Sans Regular"]
        noderestorecgvalue.font = datarestorecgvalue_font        
        
        noderestorecgdescription = noderestorecg_group.nodes['String to Curves.001']
        datarestorecgdescription_font = bpy.data.fonts["Open Sans Regular"]
        noderestorecgdescription.font = datarestorecgdescription_font
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}

    
class Fontchange23CG(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operator23cgfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        node23_group = modifier.node_group
        
        node23cgtitle = node23_group.nodes['String to Curves.005']
        data23cgtitle_font = bpy.data.fonts.load(mytool.my_pathfont23cg_title)
        node23cgtitle.font = data23cgtitle_font
        
        node23cgsubtitle = node23_group.nodes['String to Curves.006']
        data23cgsubtitle_font = bpy.data.fonts.load(mytool.my_pathfont23cg_subtitle)
        node23cgsubtitle.font = data23cgsubtitle_font
        
        node23cgvalue_names = ['String to Curves', 'String to Curves.001', 'String to Curves.002']
        for name in node23cgvalue_names:
            node23cgvalue = node23_group.nodes.get(name)
            if node23cgvalue:
                data23cgvalue_font = bpy.data.fonts.load(mytool.my_pathfont23cg_value)
                node23cgvalue.font = data23cgvalue_font

        node23cgdescription_names = ['String to Curves.004', 'String to Curves.007', 'String to Curves.008']
        for name in node23cgdescription_names:
            node23cgdescription = node23_group.nodes.get(name)
            if node23cgdescription:
                data23cgdescription_font = bpy.data.fonts.load(mytool.my_pathfont23cg_description)
                node23cgdescription.font = data23cgdescription_font    
        
        node23cglegend_names = ['String to Curves.037', 'String to Curves.036', 'String to Curves.035']
        for name in node23cglegend_names:
            node23cglegend = node23_group.nodes.get(name)
            if node23cglegend:
                data23cglegend_font = bpy.data.fonts.load(mytool.my_pathfont23cg_legend)
                node23cglegend.font = data23cglegend_font
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class Fontrestore23CG(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operator23cgresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj23cg = bpy.context.view_layer.objects.active
        modifier23cg = obj23cg.modifiers.active 
        noderestore23cg_group = modifier23cg.node_group
        
        noderestore23cgtitle = noderestore23cg_group.nodes['String to Curves.005']
        datarestore23cgtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestore23cgtitle.font = datarestore23cgtitle_font
        
        noderestore23cgsubtitle = noderestore23cg_group.nodes['String to Curves.006']
        datarestore23cgsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestore23cgsubtitle.font = datarestore23cgsubtitle_font
        
        node23cgvalue_names = ['String to Curves', 'String to Curves.001', 'String to Curves.002']
        for name in node23cgvalue_names:
            node23cgvalue = noderestore23cg_group.nodes.get(name)
            if node23cgvalue:
                data23cgvalue_font = bpy.data.fonts["Open Sans Regular"]
                node23cgvalue.font = data23cgvalue_font     
        
        node23cgdescription_names = ['String to Curves.004', 'String to Curves.007', 'String to Curves.008']
        for name in node23cgdescription_names:
            node23cgdescription = noderestore23cg_group.nodes.get(name)
            if node23cgdescription:
                data23cgdescription_font = bpy.data.fonts["Open Sans Regular"]
                node23cgdescription.font = data23cgdescription_font  

        node23cglegend_names = ['String to Curves.037', 'String to Curves.036', 'String to Curves.035']
        for name in node23cglegend_names:
            node23cglegend = noderestore23cg_group.nodes.get(name)
            if node23cglegend:
                data23cglegend_font = bpy.data.fonts["Open Sans Regular"]
                node23cglegend.font = data23cglegend_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontchangeRG(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorrgfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        node23_group = modifier.node_group
        
        nodergtitle = node23_group.nodes['String to Curves.005']
        datargtitle_font = bpy.data.fonts.load(mytool.my_pathfontrg_title)
        nodergtitle.font = datargtitle_font
        
        nodergsubtitle = node23_group.nodes['String to Curves.006']
        datargsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontrg_subtitle)
        nodergsubtitle.font = datargsubtitle_font

        # List of specific node groups to access
        specific_group_names = ['Group.022', 'Group.023', 'Group.019', 'Group.039', 'Group.040','Group.041','Group.042','Group.043','Group.044','Group.030','Group.031','Group.032','Group.033','Group.034','Group.035','Group.036','Group.038','Group.037']
        
        nodergdescription_names = []
        # Loop through nodes in the main node group
        for node in node23_group.nodes:
            if node.type == 'GROUP' and node.name in specific_group_names:
                sub_group = node.node_tree  # Access the internal node tree of the group
                for sub_node in sub_group.nodes:
                    if sub_node.bl_idname == 'GeometryNodeStringToCurves':  # Check if it's a String to Curves node
                        nodergdescription_names.append(sub_node.name)  # Add the node name to your list
                        datargdescription_font = bpy.data.fonts.load(mytool.my_pathfontrg_barvalue)
                        sub_node.font = datargdescription_font  # Apply the font  
        
        noderglegend_names = ['String to Curves.037', 'String to Curves.036', 'String to Curves.035']
        for name in noderglegend_names:
            noderglegend = node23_group.nodes.get(name)
            if noderglegend:
                datarglegend_font = bpy.data.fonts.load(mytool.my_pathfontrg_bartext)
                noderglegend.font = datarglegend_font
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreRG(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorrgresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        objrg = bpy.context.view_layer.objects.active
        modifierrg = objrg.modifiers.active 
        noderestorerg_group = modifierrg.node_group
        
        noderestorergtitle = noderestorerg_group.nodes['String to Curves.005']
        datarestorergtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorergtitle.font = datarestorergtitle_font
        
        noderestorergsubtitle = noderestorerg_group.nodes['String to Curves.006']
        datarestorergsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorergsubtitle.font = datarestorergsubtitle_font 
        
        # List of specific node groups to access
        specific_group_names = ['Group.022', 'Group.023', 'Group.019', 'Group.039', 'Group.040', 'Group.041', 'Group.042', 'Group.043', 'Group.044', 'Group.030', 'Group.031', 'Group.032', 'Group.033', 'Group.034', 'Group.035', 'Group.036', 'Group.038', 'Group.037']
        
        # Initialize the nodergdescription_names list to hold the names of the nodes you want to access
        nodergdescription_names = []
        
        # Loop through the main node group and filter for specific groups
        for node in noderestorerg_group.nodes:  # Corrected from node23_group to noderestorerg_group
            if node.type == 'GROUP' and node.name in specific_group_names:
                sub_group = node.node_tree  # Access the internal node tree of the group
                
                # Access nodes inside the nested node group and find description nodes
                for sub_node in sub_group.nodes:
                    if sub_node.bl_idname == 'GeometryNodeStringToCurves':  # Assuming 'String to Curves' node type
                        nodergdescription_names.append(sub_node.name)  # Add the node name to the list

                        # Now apply the font to each description node found
                        datargdescription_font = bpy.data.fonts["Open Sans Regular"]
                        sub_node.font = datargdescription_font  # Apply the font to the node

        noderglegend_names = ['String to Curves.037', 'String to Curves.036', 'String to Curves.035']
        for name in noderglegend_names:
            noderglegend = noderestorerg_group.nodes.get(name)
            if noderglegend:
                datarglegend_font = bpy.data.fonts["Open Sans Regular"]
                noderglegend.font = datarglegend_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}

    
class Fontchange23PG(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operator23pgfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        node23pg_group = modifier.node_group
        
        node23pgtitle = node23pg_group.nodes['String to Curves.005']
        data23pgtitle_font = bpy.data.fonts.load(mytool.my_pathfont23pg_title)
        node23pgtitle.font = data23pgtitle_font
        
        node23pgsubtitle = node23pg_group.nodes['String to Curves.006']
        data23pgsubtitle_font = bpy.data.fonts.load(mytool.my_pathfont23pg_subtitle)
        node23pgsubtitle.font = data23pgsubtitle_font
        
        node23pgvalue_names = ['String to Curves', 'String to Curves.001', 'String to Curves.002']
        for name in node23pgvalue_names:
            node23pgvalue = node23pg_group.nodes.get(name)
            if node23pgvalue:
                data23pgvalue_font = bpy.data.fonts.load(mytool.my_pathfont23pg_value)
                node23pgvalue.font = data23pgvalue_font

        node23pgdescription_names = ['String to Curves.009', 'String to Curves.007', 'String to Curves.008']
        for name in node23pgdescription_names:
            node23pgdescription = node23pg_group.nodes.get(name)
            if node23pgdescription:
                data23pgdescription_font = bpy.data.fonts.load(mytool.my_pathfont23pg_description)
                node23pgdescription.font = data23pgdescription_font    
        
        node23pglegend_names = ['String to Curves.037', 'String to Curves.036', 'String to Curves.035']
        for name in node23pglegend_names:
            node23pglegend = node23pg_group.nodes.get(name)
            if node23pglegend:
                data23pglegend_font = bpy.data.fonts.load(mytool.my_pathfont23pg_legend)
                node23pglegend.font = data23pglegend_font
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class Fontrestore23PG(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operator23pgresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestore23pg_group = modifier.node_group
        
        noderestore23pgtitle = noderestore23pg_group.nodes['String to Curves.005']
        datarestore23pgtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestore23pgtitle.font = datarestore23pgtitle_font
        
        noderestore23pgsubtitle = noderestore23pg_group.nodes['String to Curves.006']
        datarestore23pgsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestore23pgsubtitle.font = datarestore23pgsubtitle_font
        
        node23pgvalue_names = ['String to Curves', 'String to Curves.001', 'String to Curves.002']
        for name in node23pgvalue_names:
            node23pgvalue = noderestore23pg_group.nodes.get(name)
            if node23pgvalue:
                data23pgvalue_font = bpy.data.fonts["Open Sans Regular"]
                node23pgvalue.font = data23pgvalue_font     
        
        node23pgdescription_names = ['String to Curves.009', 'String to Curves.007', 'String to Curves.008']
        for name in node23pgdescription_names:
            node23pgdescription = noderestore23pg_group.nodes.get(name)
            if node23pgdescription:
                data23pgdescription_font = bpy.data.fonts["Open Sans Regular"]
                node23pgdescription.font = data23pgdescription_font  

        node23pglegend_names = ['String to Curves.037', 'String to Curves.036', 'String to Curves.035']
        for name in node23pglegend_names:
            node23pglegend = noderestore23pg_group.nodes.get(name)
            if node23pglegend:
                data23pglegend_font = bpy.data.fonts["Open Sans Regular"]
                node23pglegend.font = data23pglegend_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontchangePG(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorfpie"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        node_grouppg = modifier.node_group
        
        nodepgtitle = node_grouppg.nodes['String to Curves.005']
        datapgtitle_font = bpy.data.fonts.load(mytool.my_pathfontpg_title)
        nodepgtitle.font = datapgtitle_font
        
        nodepgsubtitle = node_grouppg.nodes['String to Curves.006']
        datapgsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontpg_subtitle)
        nodepgsubtitle.font = datapgsubtitle_font
        
        nodepgvalue = node_grouppg.nodes['String to Curves']
        datapgvalue_font = bpy.data.fonts.load(mytool.my_pathfontpg_value)
        nodepgvalue.font = datapgvalue_font        
        
        nodepgdescription = node_grouppg.nodes['String to Curves.001']
        datapgdescription_font = bpy.data.fonts.load(mytool.my_pathfontpg_description)
        nodepgdescription.font = datapgdescription_font
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestorePG(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorrespie"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestorepg_group = modifier.node_group
        
        noderestorepgtitle = noderestorepg_group.nodes['String to Curves.005']
        datarestorepgtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorepgtitle.font = datarestorepgtitle_font
        
        noderestorepgsubtitle = noderestorepg_group.nodes['String to Curves.006']
        datarestorepgsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorepgsubtitle.font = datarestorepgsubtitle_font
        
        noderestorepgvalue = noderestorepg_group.nodes['String to Curves']
        datarestorepgvalue_font = bpy.data.fonts["Open Sans Regular"]
        noderestorepgvalue.font = datarestorepgvalue_font        
        
        noderestorepgdescription = noderestorepg_group.nodes['String to Curves.001']
        datarestorepgdescription_font = bpy.data.fonts["Open Sans Regular"]
        noderestorepgdescription.font = datarestorepgdescription_font
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
 
class FontchangeCANDLEG(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorcandlegfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodecandleg_group = modifier.node_group
        nestedcandlegrn_node_group = bpy.data.node_groups["NodeGroup.174"]
        nestedcandlegpointtext_node_group = bpy.data.node_groups["NodeGroup.173"]
        
        nodecandlegtitle = nodecandleg_group.nodes['String to Curves.014']
        datacandlegtitle_font = bpy.data.fonts.load(mytool.my_pathfontcandleg_title)
        nodecandlegtitle.font = datacandlegtitle_font
        
        nodecandlegsubtitle = nodecandleg_group.nodes['String to Curves.015']
        datacandlegsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontcandleg_subtitle)
        nodecandlegsubtitle.font = datacandlegsubtitle_font
        
        nodecandlegrangenumbers = nestedcandlegrn_node_group.nodes['String to Curves.013']
        datacandlegrangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontcandleg_rangenumbers)
        nodecandlegrangenumbers.font = datacandlegrangenumbers_font 

        nodecandlegpointtext = nestedcandlegpointtext_node_group.nodes['String to Curves.005']
        datacandlegpointtext_font = bpy.data.fonts.load(mytool.my_pathfontcandleg_bartext)
        nodecandlegpointtext.font = datacandlegpointtext_font       
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreCANDLEG(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorcandlegresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestore23_group = modifier.node_group
        nestedcandlegrn_node_group = bpy.data.node_groups["NodeGroup.174"]
        nestedcandlegpointtext_node_group = bpy.data.node_groups["NodeGroup.173"]
        
        noderestorecandlegtitle = noderestore23_group.nodes['String to Curves.014']
        datarestorecandlegtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorecandlegtitle.font = datarestorecandlegtitle_font
        
        noderestorecandlegsubtitle = noderestore23_group.nodes['String to Curves.015']
        datarestorecandlegsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorecandlegsubtitle.font = datarestorecandlegsubtitle_font
        
        noderestorecandlegrangenumbers = nestedcandlegrn_node_group.nodes['String to Curves.013']
        datarestorecandlegrangenumbers_font = bpy.data.fonts["Open Sans Regular"]
        noderestorecandlegrangenumbers.font = datarestorecandlegrangenumbers_font        
        
        noderestorecandlegpointtext = nestedcandlegpointtext_node_group.nodes['String to Curves.005']
        datarestorecandlegpointtext_font = bpy.data.fonts["Open Sans Regular"]
        noderestorecandlegpointtext.font = datarestorecandlegpointtext_font
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    

class FontchangeLINEG(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorlinegfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes.001"]
        nodelineg_group = modifier.node_group
        
        nodelinegtitle = nodelineg_group.nodes['String to Curves.014']
        datalinegtitle_font = bpy.data.fonts.load(mytool.my_pathfontlg_title)
        nodelinegtitle.font = datalinegtitle_font
        
        nodelinegsubtitle = nodelineg_group.nodes['String to Curves.015']
        datalinegsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontlg_subtitle)
        nodelinegsubtitle.font = datalinegsubtitle_font

        nodelinegvalue = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.022', 'String to Curves.023', 'String to Curves.025','String to Curves.027','String to Curves.029','String to Curves.031','String to Curves.033','String to Curves.035','String to Curves.037','String to Curves.039','String to Curves.041','String to Curves.043','String to Curves.045','String to Curves.047','String to Curves.049','String to Curves.051','String to Curves.053','String to Curves.055','String to Curves.057','String to Curves.059','String to Curves.061','String to Curves.063','String to Curves.065','String to Curves.067']
        for name in nodelinegvalue:
            nodelinegvalue = nodelineg_group.nodes.get(name)
            if nodelinegvalue:
                datalinegvalue_font = bpy.data.fonts.load(mytool.my_pathfontlg_barvalue)
                nodelinegvalue.font = datalinegvalue_font

        nodelinegrangenumbers = ['String to Curves.009', 'String to Curves.010', 'String to Curves.008', 'String to Curves.011', 'String to Curves.012', 'String to Curves.013']
        for name in nodelinegrangenumbers:
            nodelinegrangenumbers = nodelineg_group.nodes.get(name)
            if nodelinegrangenumbers:
                datalinegrangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontlg_rangenumbers)
                nodelinegrangenumbers.font = datalinegrangenumbers_font    
        
        nodelinegpointtext = ['String to Curves.005', 'String to Curves.003', 'String to Curves', 'String to Curves.001', 'String to Curves.006', 'String to Curves.007', 'String to Curves.004', 'String to Curves.002', 'String to Curves.024', 'String to Curves.026','String to Curves.028','String to Curves.030','String to Curves.032','String to Curves.034','String to Curves.036','String to Curves.038','String to Curves.040', 'String to Curves.042','String to Curves.044','String to Curves.046','String to Curves.048','String to Curves.050','String to Curves.052','String to Curves.054','String to Curves.056', 'String to Curves.058','String to Curves.060','String to Curves.062','String to Curves.064','String to Curves.066']
        for name in nodelinegpointtext:
            nodelinegpointtext = nodelineg_group.nodes.get(name)
            if nodelinegpointtext:
                datalinegpointtext_font = bpy.data.fonts.load(mytool.my_pathfontlg_bartext)
                nodelinegpointtext.font = datalinegpointtext_font     
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreLINEG(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorlinegresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes.001"]
        noderestoreline_group = modifier.node_group
        
        noderestorelinegtitle = noderestoreline_group.nodes['String to Curves.014']
        datarestorelinegtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorelinegtitle.font = datarestorelinegtitle_font
        
        noderestorelinegsubtitle = noderestoreline_group.nodes['String to Curves.015']
        datarestorelinegsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorelinegsubtitle.font = datarestorelinegsubtitle_font

        noderestorelinegvalue = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.022', 'String to Curves.023', 'String to Curves.025','String to Curves.027','String to Curves.029','String to Curves.031','String to Curves.033','String to Curves.035','String to Curves.037','String to Curves.039','String to Curves.041','String to Curves.043','String to Curves.045','String to Curves.047','String to Curves.049','String to Curves.051','String to Curves.053','String to Curves.055','String to Curves.057','String to Curves.059','String to Curves.061','String to Curves.063','String to Curves.065','String to Curves.067']
        for name in noderestorelinegvalue:
            noderestorelinegvalue = noderestoreline_group.nodes.get(name)
            if noderestorelinegvalue:
                datalinegvalue_font = bpy.data.fonts["Open Sans Regular"]
                noderestorelinegvalue.font = datalinegvalue_font     
        
        noderestorelinegrangenumbers = ['String to Curves.009', 'String to Curves.010', 'String to Curves.008', 'String to Curves.011', 'String to Curves.012', 'String to Curves.013']
        for name in noderestorelinegrangenumbers:
            noderestorelinegrangenumbers = noderestoreline_group.nodes.get(name)
            if noderestorelinegrangenumbers:
                datalinegrangenumbers_font = bpy.data.fonts["Open Sans Regular"]
                noderestorelinegrangenumbers.font = datalinegrangenumbers_font  

        noderestorelinegpointtext = nodelinegpointtext = ['String to Curves.005', 'String to Curves.003', 'String to Curves', 'String to Curves.001', 'String to Curves.006', 'String to Curves.007', 'String to Curves.004', 'String to Curves.002', 'String to Curves.024', 'String to Curves.026','String to Curves.028','String to Curves.030','String to Curves.032','String to Curves.034','String to Curves.036','String to Curves.038','String to Curves.040', 'String to Curves.042','String to Curves.044','String to Curves.046','String to Curves.048','String to Curves.050','String to Curves.052','String to Curves.054','String to Curves.056', 'String to Curves.058','String to Curves.060','String to Curves.062','String to Curves.064','String to Curves.066']
        for name in noderestorelinegpointtext:
            noderestorelinegpointtext = noderestoreline_group.nodes.get(name)
            if noderestorelinegpointtext:
                datalinegpointtext_font = bpy.data.fonts["Open Sans Regular"]
                noderestorelinegpointtext.font = datalinegpointtext_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'} 
    
class FontchangeLINEGC(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorlinegcfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes.001"]
        nodelinegc_group = modifier.node_group
        
        nodelinegctitle = nodelinegc_group.nodes['String to Curves.014']
        datalinegctitle_font = bpy.data.fonts.load(mytool.my_pathfontlgc_title)
        nodelinegctitle.font = datalinegctitle_font
        
        nodelinegcsubtitle = nodelinegc_group.nodes['String to Curves.015']
        datalinegcsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontlgc_subtitle)
        nodelinegcsubtitle.font = datalinegcsubtitle_font

        nodelinegcvalue = ['String to Curves.021','String to Curves.022','String to Curves.023','String to Curves.024','String to Curves.025', 'String to Curves.026', 'String to Curves.027','String to Curves.028','String to Curves.029','String to Curves.030','String to Curves.031','String to Curves.032', 'String to Curves.033','String to Curves.034','String to Curves.035','String to Curves.036']
        for name in nodelinegcvalue:
            nodelinegcvalue = nodelinegc_group.nodes.get(name)
            if nodelinegcvalue:
                datalinegcvalue_font = bpy.data.fonts.load(mytool.my_pathfontlgc_barvalue)
                nodelinegcvalue.font = datalinegcvalue_font

        nodelinegcrangenumbers = ['String to Curves.013', 'String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020']
        for name in nodelinegcrangenumbers:
            nodelinegcrangenumbers = nodelinegc_group.nodes.get(name)
            if nodelinegcrangenumbers:
                datalinegcrangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontlgc_rangenumbers)
                nodelinegcrangenumbers.font = datalinegcrangenumbers_font    
        
        nodelinegcpointtext = ['String to Curves.005', 'String to Curves.006', 'String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010', 'String to Curves.011', 'String to Curves.012']
        for name in nodelinegcpointtext:
            nodelinegcpointtext = nodelinegc_group.nodes.get(name)
            if nodelinegcpointtext:
                datalinegcpointtext_font = bpy.data.fonts.load(mytool.my_pathfontlgc_bartext)
                nodelinegcpointtext.font = datalinegcpointtext_font

        nodelinegclegend = ['String to Curves.0162', 'String to Curves.163']
        for name in nodelinegclegend:
            nodelinegclegend = nodelinegc_group.nodes.get(name)
            if nodelinegclegend:
                datalinegclegend_font = bpy.data.fonts.load(mytool.my_pathfontlgc_legend)
                nodelinegclegend.font = datalinegclegend_font    
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreLINEGC(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorlinegcresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes.001"]
        noderestorelinec_group = modifier.node_group
        
        noderestorelinegctitle = noderestorelinec_group.nodes['String to Curves.014']
        datarestorelinegctitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorelinegctitle.font = datarestorelinegctitle_font
        
        noderestorelinegcsubtitle = noderestorelinec_group.nodes['String to Curves.015']
        datarestorelinegcsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorelinegcsubtitle.font = datarestorelinegcsubtitle_font

        nodelinegcvalue = ['String to Curves.021','String to Curves.022','String to Curves.023','String to Curves.024','String to Curves.025', 'String to Curves.026', 'String to Curves.027','String to Curves.028','String to Curves.029','String to Curves.030','String to Curves.031','String to Curves.032', 'String to Curves.033','String to Curves.034','String to Curves.035','String to Curves.036']
        for name in nodelinegcvalue:
            nodelinegcvalue = noderestorelinec_group.nodes.get(name)
            if nodelinegcvalue:
                datalinegcvalue_font = bpy.data.fonts["Open Sans Regular"]
                nodelinegcvalue.font = datalinegcvalue_font     
        
        nodelinegcrangenumbers = ['String to Curves.013', 'String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020']
        for name in nodelinegcrangenumbers:
            nodelinegcrangenumbers = noderestorelinec_group.nodes.get(name)
            if nodelinegcrangenumbers:
                datalinegcrangenumbers_font = bpy.data.fonts["Open Sans Semibold"]
                nodelinegcrangenumbers.font = datalinegcrangenumbers_font  

        nodelinegcpointtext = ['String to Curves.005', 'String to Curves.006', 'String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010', 'String to Curves.011', 'String to Curves.012']
        for name in nodelinegcpointtext:
            nodelinegcpointtext = noderestorelinec_group.nodes.get(name)
            if nodelinegcpointtext:
                datalinegcpointtext_font = bpy.data.fonts["Open Sans Regular"]
                nodelinegcpointtext.font = datalinegcpointtext_font  

        nodelinegclegend = ['String to Curves.0162', 'String to Curves.163']
        for name in nodelinegclegend:
            nodelinegclegend = noderestorelinec_group.nodes.get(name)
            if nodelinegclegend:
                datalinegclegend_font = bpy.data.fonts["Open Sans Light"]
                nodelinegclegend.font = datalinegclegend_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontchangeMOUNTAING(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatormgfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodemountain_group = modifier.node_group
        
        nodemountaintitle = nodemountain_group.nodes['String to Curves.029']
        datamountaintitle_font = bpy.data.fonts.load(mytool.my_pathfontmg_title)
        nodemountaintitle.font = datamountaintitle_font
        
        nodemountainsubtitle = nodemountain_group.nodes['String to Curves.028']
        datamountainsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontmg_subtitle)
        nodemountainsubtitle.font = datamountainsubtitle_font

        nodemountainvalue = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.022', 'String to Curves.023']
        for name in nodemountainvalue:
            nodemountainvalue = nodemountain_group.nodes.get(name)
            if nodemountainvalue:
                datamountainvalue_font = bpy.data.fonts.load(mytool.my_pathfontmg_barvalue)
                nodemountainvalue.font = datamountainvalue_font

        nodemountainrangenumbers = ['String to Curves.001','String to Curves.002', 'String to Curves.003', 'String to Curves.004', 'String to Curves.013', 'String to Curves.014' ]
        for name in nodemountainrangenumbers:
            nodemountainrangenumbers = nodemountain_group.nodes.get(name)
            if nodemountainrangenumbers:
                datamountainrangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontmg_rangenumbers)
                nodemountainrangenumbers.font = datamountainrangenumbers_font    
        
        nodemountainpointtext = ['String to Curves.005', 'String to Curves.006', 'String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010', 'String to Curves.011', 'String to Curves.012']
        for name in nodemountainpointtext:
            nodemountainpointtext = nodemountain_group.nodes.get(name)
            if nodemountainpointtext:
                datamountainpointtext_font = bpy.data.fonts.load(mytool.my_pathfontmg_bartext)
                nodemountainpointtext.font = datamountainpointtext_font     
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreMOUNTAING(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatormgresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestoremountain_group = modifier.node_group
        
        noderestoremountaintitle = noderestoremountain_group.nodes['String to Curves.029']
        datarestoremountaintitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestoremountaintitle.font = datarestoremountaintitle_font
        
        noderestoremountainsubtitle = noderestoremountain_group.nodes['String to Curves.028']
        datarestoremountainsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestoremountainsubtitle.font = datarestoremountainsubtitle_font

        nodemountainvalue = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.022', 'String to Curves.023']
        for name in nodemountainvalue:
            nodemountainvalue = noderestoremountain_group.nodes.get(name)
            if nodemountainvalue:
                datamountainvalue_font = bpy.data.fonts["Open Sans Regular"]
                nodemountainvalue.font = datamountainvalue_font     
        
        nodemountainrangenumbers = ['String to Curves.001','String to Curves.002', 'String to Curves.003', 'String to Curves.004', 'String to Curves.013', 'String to Curves.014' ]
        for name in nodemountainrangenumbers:
            nodemountainrangenumbers = noderestoremountain_group.nodes.get(name)
            if nodemountainrangenumbers:
                datamountainrangenumbers_font = bpy.data.fonts["Open Sans Regular"]
                nodemountainrangenumbers.font = datamountainrangenumbers_font  

        nodemountainpointtext = ['String to Curves.005', 'String to Curves.006', 'String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010', 'String to Curves.011', 'String to Curves.012']
        for name in nodemountainpointtext:
            nodemountainpointtext = noderestoremountain_group.nodes.get(name)
            if nodemountainpointtext:
                datamountainpointtext_font = bpy.data.fonts["Open Sans Regular"]
                nodemountainpointtext.font = datamountainpointtext_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'} 
    
class FontchangeMOUNTAINGC(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatormgcfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodemountainc_group = modifier.node_group
        
        nodemountainctitle = nodemountainc_group.nodes['String to Curves.029']
        datamountainctitle_font = bpy.data.fonts.load(mytool.my_pathfontmgc_title)
        nodemountainctitle.font = datamountainctitle_font
        
        nodemountaincsubtitle = nodemountainc_group.nodes['String to Curves.028']
        datamountaincsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontmgc_subtitle)
        nodemountaincsubtitle.font = datamountaincsubtitle_font

        nodemountaincvalue = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.034', 'String to Curves.035', 'String to Curves.036', 'String to Curves.037', 'String to Curves.038', 'String to Curves.039', 'String to Curves.040', 'String to Curves.041', 'String to Curves.042', 'String to Curves.043']
        for name in nodemountaincvalue:
            nodemountaincvalue = nodemountainc_group.nodes.get(name)
            if nodemountaincvalue:
                datamountaincvalue_font = bpy.data.fonts.load(mytool.my_pathfontmgc_barvalue)
                nodemountaincvalue.font = datamountaincvalue_font

        nodemountaincrangenumbers = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.004', 'String to Curves.005']
        for name in nodemountaincrangenumbers:
            nodemountaincrangenumbers = nodemountainc_group.nodes.get(name)
            if nodemountaincrangenumbers:
                datamountaincrangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontmgc_rangenumbers)
                nodemountaincrangenumbers.font = datamountaincrangenumbers_font    
        
        nodemountaincpointtext = ['String to Curves.022', 'String to Curves.023', 'String to Curves.024', 'String to Curves.025', 'String to Curves.026', 'String to Curves.028', 'String to Curves.030', 'String to Curves.031']
        for name in nodemountaincpointtext:
            nodemountaincpointtext = nodemountainc_group.nodes.get(name)
            if nodemountaincpointtext:
                datamountaincpointtext_font = bpy.data.fonts.load(mytool.my_pathfontmgc_bartext)
                nodemountaincpointtext.font = datamountaincpointtext_font

        nodemountainclegend = ['String to Curves.032', 'String to Curves.033']
        for name in nodemountainclegend:
            nodemountainclegend = nodemountainc_group.nodes.get(name)
            if nodemountainclegend:
                datamountainclegend_font = bpy.data.fonts.load(mytool.my_pathfontmgc_legend)
                nodemountainclegend.font = datamountainclegend_font    
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreMOUNTAINGC(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatormgcresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestoremountainc_group = modifier.node_group
        
        noderestoremountainctitle = noderestoremountainc_group.nodes['String to Curves.029']
        datarestoremountainctitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestoremountainctitle.font = datarestoremountainctitle_font
        
        noderestoremountaincsubtitle = noderestoremountainc_group.nodes['String to Curves.028']
        datarestoremountaincsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestoremountaincsubtitle.font = datarestoremountaincsubtitle_font

        nodemountaincvalue = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.034', 'String to Curves.035', 'String to Curves.036', 'String to Curves.037', 'String to Curves.038', 'String to Curves.039', 'String to Curves.040', 'String to Curves.041', 'String to Curves.042', 'String to Curves.043']
        for name in nodemountaincvalue:
            nodemountaincvalue = noderestoremountainc_group.nodes.get(name)
            if nodemountaincvalue:
                datamountaincvalue_font = bpy.data.fonts["Open Sans Regular"]
                nodemountaincvalue.font = datamountaincvalue_font     
        
        nodemountaincrangenumbers = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.004', 'String to Curves.005']
        for name in nodemountaincrangenumbers:
            nodemountaincrangenumbers = noderestoremountainc_group.nodes.get(name)
            if nodemountaincrangenumbers:
                datamountaincrangenumbers_font = bpy.data.fonts["Open Sans Semibold"]
                nodemountaincrangenumbers.font = datamountaincrangenumbers_font  

        nodemountaincpointtext = ['String to Curves.022', 'String to Curves.023', 'String to Curves.024', 'String to Curves.025', 'String to Curves.026', 'String to Curves.028', 'String to Curves.030', 'String to Curves.031']
        for name in nodemountaincpointtext:
            nodemountaincpointtext = noderestoremountainc_group.nodes.get(name)
            if nodemountaincpointtext:
                datamountaincpointtext_font = bpy.data.fonts["Open Sans Regular"]
                nodemountaincpointtext.font = datamountaincpointtext_font  

        nodemountainclegend = ['String to Curves.032', 'String to Curves.033']
        for name in nodemountainclegend:
            nodemountainclegend = noderestoremountainc_group.nodes.get(name)
            if nodemountainclegend:
                datamountainclegend_font = bpy.data.fonts["Open Sans Light"]
                nodemountainclegend.font = datamountainclegend_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontchangeSCATTERGC(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorsgcfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodescatterc_group = modifier.node_group
        
        nodescatterctitle = nodescatterc_group.nodes['String to Curves.029']
        datascatterctitle_font = bpy.data.fonts.load(mytool.my_pathfontsgc_title)
        nodescatterctitle.font = datascatterctitle_font
        
        nodescattercsubtitle = nodescatterc_group.nodes['String to Curves.028']
        datascattercsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontsgc_subtitle)
        nodescattercsubtitle.font = datascattercsubtitle_font

        nodescattercrangenumbers = ['String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.004', 'String to Curves.005','String to Curves.006','String to Curves.007', 'String to Curves.008', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015', 'String to Curves.016']
        for name in nodescattercrangenumbers:
            nodescattercrangenumbers = nodescatterc_group.nodes.get(name)
            if nodescattercrangenumbers:
                datascattercrangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontsgc_rangenumbers)
                nodescattercrangenumbers.font = datascattercrangenumbers_font    
        
        nodescattercpointtext = ['String to Curves.032', 'String to Curves.033']
        for name in nodescattercpointtext:
            nodescattercpointtext = nodescatterc_group.nodes.get(name)
            if nodescattercpointtext:
                datascattercpointtext_font = bpy.data.fonts.load(mytool.my_pathfontsgc_bartext)
                nodescattercpointtext.font = datascattercpointtext_font

        nodescatterclegend = ['String to Curves.031', 'String to Curves.030']
        for name in nodescatterclegend:
            nodescatterclegend = nodescatterc_group.nodes.get(name)
            if nodescatterclegend:
                datascatterclegend_font = bpy.data.fonts.load(mytool.my_pathfontsgc_legend)
                nodescatterclegend.font = datascatterclegend_font    
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreSCATTERGC(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorsgcresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestorescatterc_group = modifier.node_group
        
        noderestorescatterctitle = noderestorescatterc_group.nodes['String to Curves.029']
        datarestorescatterctitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorescatterctitle.font = datarestorescatterctitle_font
        
        noderestorescattercsubtitle = noderestorescatterc_group.nodes['String to Curves.028']
        datarestorescattercsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorescattercsubtitle.font = datarestorescattercsubtitle_font  
        
        nodescattercrangenumbers = ['String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.004', 'String to Curves.005','String to Curves.006','String to Curves.007', 'String to Curves.008', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015', 'String to Curves.016']
        for name in nodescattercrangenumbers:
            nodescattercrangenumbers = noderestorescatterc_group.nodes.get(name)
            if nodescattercrangenumbers:
                datascattercrangenumbers_font = bpy.data.fonts["Open Sans Semibold"]
                nodescattercrangenumbers.font = datascattercrangenumbers_font  

        nodescattercpointtext = ['String to Curves.032', 'String to Curves.033']
        for name in nodescattercpointtext:
            nodescattercpointtext = noderestorescatterc_group.nodes.get(name)
            if nodescattercpointtext:
                datascattercpointtext_font = bpy.data.fonts["Open Sans Regular"]
                nodescattercpointtext.font = datascattercpointtext_font  

        nodescatterclegend = ['String to Curves.031', 'String to Curves.030']
        for name in nodescatterclegend:
            nodescatterclegend = noderestorescatterc_group.nodes.get(name)
            if nodescatterclegend:
                datascatterclegend_font = bpy.data.fonts["Open Sans Light"]
                nodescatterclegend.font = datascatterclegend_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontchangeBUBBLEGC(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorbgsfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodebubblec_group = modifier.node_group
        
        nodebubblectitle = nodebubblec_group.nodes['String to Curves.029']
        databubblectitle_font = bpy.data.fonts.load(mytool.my_pathfontbgs_title)
        nodebubblectitle.font = databubblectitle_font
        
        nodebubblecsubtitle = nodebubblec_group.nodes['String to Curves.028']
        databubblecsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontbgs_subtitle)
        nodebubblecsubtitle.font = databubblecsubtitle_font

        nodebubblecrangenumbers = ['String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.004', 'String to Curves.005','String to Curves.006','String to Curves.007', 'String to Curves.008', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015', 'String to Curves.016']
        for name in nodebubblecrangenumbers:
            nodebubblecrangenumbers = nodebubblec_group.nodes.get(name)
            if nodebubblecrangenumbers:
                databubblecrangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontbgs_rangenumbers)
                nodebubblecrangenumbers.font = databubblecrangenumbers_font    

        nodebubblecdescription = ['String to Curves.031', 'String to Curves.030']
        for name in nodebubblecdescription:
            nodebubblecdescription = nodebubblec_group.nodes.get(name)
            if nodebubblecdescription:
                databubblecdescription_font = bpy.data.fonts.load(mytool.my_pathfontbgs_description)
                nodebubblecdescription.font = databubblecdescription_font    

        nodebubbleclegend = ['String to Curves.034', 'String to Curves.033', 'String to Curves.032']
        for name in nodebubbleclegend:
            nodebubbleclegend = nodebubblec_group.nodes.get(name)
            if nodebubbleclegend:
                databubbleclegend_font = bpy.data.fonts.load(mytool.my_pathfontbgs_legend)
                nodebubbleclegend.font = databubbleclegend_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreBUBBLEGC(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorbgsresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestorebubblec_group = modifier.node_group
        
        noderestorebubblectitle = noderestorebubblec_group.nodes['String to Curves.029']
        datarestorebubblectitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorebubblectitle.font = datarestorebubblectitle_font
        
        noderestorebubblecsubtitle = noderestorebubblec_group.nodes['String to Curves.028']
        datarestorebubblecsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorebubblecsubtitle.font = datarestorebubblecsubtitle_font  
        
        nodebubblecrangenumbers = ['String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.004', 'String to Curves.005','String to Curves.006','String to Curves.007', 'String to Curves.008', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015', 'String to Curves.016']
        for name in nodebubblecrangenumbers:
            nodebubblecrangenumbers = noderestorebubblec_group.nodes.get(name)
            if nodebubblecrangenumbers:
                databubblecrangenumbers_font = bpy.data.fonts["Open Sans Semibold"]
                nodebubblecrangenumbers.font = databubblecrangenumbers_font   

        nodebubblecdescription = ['String to Curves.031', 'String to Curves.030']
        for name in nodebubblecdescription:
            nodebubblecdescription = noderestorebubblec_group.nodes.get(name)
            if nodebubblecdescription:
                databubblecdescription_font = bpy.data.fonts["Open Sans Light"]
                nodebubblecdescription.font = databubblecdescription_font  

        nodebubbleclegend = ['String to Curves.034', 'String to Curves.033', 'String to Curves.032']
        for name in nodebubbleclegend:
            nodebubbleclegend = noderestorebubblec_group.nodes.get(name)
            if nodebubbleclegend:
                databubbleclegend_font = bpy.data.fonts["Open Sans Light"]
                nodebubbleclegend.font = databubbleclegend_font 
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontchangeHBG(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorbgfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodehbg_group = modifier.node_group
        
        nodehbgtitle = nodehbg_group.nodes['String to Curves.005']
        datahbgtitle_font = bpy.data.fonts.load(mytool.my_pathfontbg_title)
        nodehbgtitle.font = datahbgtitle_font
        
        nodehbgsubtitle = nodehbg_group.nodes['String to Curves.006']
        datahbgsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontbg_subtitle)
        nodehbgsubtitle.font = datahbgsubtitle_font

        nodehbgvalue = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.023', 'String to Curves.024', 'String to Curves.025', 'String to Curves.026', 'String to Curves.027', 'String to Curves.028']
        for name in nodehbgvalue:
            nodehbgvalue = nodehbg_group.nodes.get(name)
            if nodehbgvalue:
                datahbgvalue_font = bpy.data.fonts.load(mytool.my_pathfontbg_barvalue)
                nodehbgvalue.font = datahbgvalue_font

        nodehbgrangenumbers = ['String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010', 'String to Curves.011']
        for name in nodehbgrangenumbers:
            nodehbgrangenumbers = nodehbg_group.nodes.get(name)
            if nodehbgrangenumbers:
                datahbgrangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontbg_rangenumbers)
                nodehbgrangenumbers.font = datahbgrangenumbers_font    
        
        nodehbgpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.022', 'String to Curves.021', 'String to Curves.020', 'String to Curves.015', 'String to Curves.014', 'String to Curves.013']
        for name in nodehbgpointtext:
            nodehbgpointtext = nodehbg_group.nodes.get(name)
            if nodehbgpointtext:
                datahbgpointtext_font = bpy.data.fonts.load(mytool.my_pathfontbg_bartext)
                nodehbgpointtext.font = datahbgpointtext_font

        nodehbgtexttotal = ['String to Curves.004']
        for name in nodehbgtexttotal:
            nodehbgtexttotal = nodehbg_group.nodes.get(name)
            if nodehbgtexttotal:
                datahbgtexttotal_font = bpy.data.fonts.load(mytool.my_pathfontbg_texttotal)
                nodehbgtexttotal.font = datahbgtexttotal_font   

        nodehbgvaluetotal = ['String to Curves.012']
        for name in nodehbgvaluetotal:
            nodehbgvaluetotal = nodehbg_group.nodes.get(name)
            if nodehbgvaluetotal:
                datahbgvaluetotal_font = bpy.data.fonts.load(mytool.my_pathfontbg_valuetotal)
                nodehbgvaluetotal.font = datahbgvaluetotal_font    
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreHBG(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorbgresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestorehbg_group = modifier.node_group
        
        noderestorehbgtitle = noderestorehbg_group.nodes['String to Curves.005']
        datarestorehbgtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorehbgtitle.font = datarestorehbgtitle_font
        
        noderestorehbgsubtitle = noderestorehbg_group.nodes['String to Curves.006']
        datarestorehbgsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorehbgsubtitle.font = datarestorehbgsubtitle_font

        nodehbgvalue = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.023', 'String to Curves.024', 'String to Curves.025', 'String to Curves.026', 'String to Curves.027', 'String to Curves.028']
        for name in nodehbgvalue:
            nodehbgvalue = noderestorehbg_group.nodes.get(name)
            if nodehbgvalue:
                datahbgvalue_font = bpy.data.fonts["Open Sans Regular"]
                nodehbgvalue.font = datahbgvalue_font     
        
        nodehbgrangenumbers = ['String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010', 'String to Curves.011']
        for name in nodehbgrangenumbers:
            nodehbgrangenumbers = noderestorehbg_group.nodes.get(name)
            if nodehbgrangenumbers:
                datahbgrangenumbers_font = bpy.data.fonts["Open Sans Semibold"]
                nodehbgrangenumbers.font = datahbgrangenumbers_font  

        nodehbgpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.022', 'String to Curves.021', 'String to Curves.020', 'String to Curves.015', 'String to Curves.014', 'String to Curves.013' ]
        for name in nodehbgpointtext:
            nodehbgpointtext = noderestorehbg_group.nodes.get(name)
            if nodehbgpointtext:
                datahbgpointtext_font = bpy.data.fonts["Open Sans Regular"]
                nodehbgpointtext.font = datahbgpointtext_font  

        nodehbgtexttotal = ['String to Curves.004']
        for name in nodehbgtexttotal:
            nodehbgtexttotal = noderestorehbg_group.nodes.get(name)
            if nodehbgtexttotal:
                datahbgtexttotal_font = bpy.data.fonts["Open Sans Light"]
                nodehbgtexttotal.font = datahbgtexttotal_font  

        nodehbgvaluetotal = ['String to Curves.012']
        for name in nodehbgvaluetotal:
            nodehbgvaluetotal = noderestorehbg_group.nodes.get(name)
            if nodehbgvaluetotal:
                datahbgvaluetotal_font = bpy.data.fonts["Open Sans Light"]
                nodehbgvaluetotal.font = datahbgvaluetotal_font 
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}    

class FontchangeHBO(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorbgofont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodehbgo_group = modifier.node_group
        
        nodehbgotitle = nodehbgo_group.nodes['String to Curves.005']
        datahbgotitle_font = bpy.data.fonts.load(mytool.my_pathfontbgo_title)
        nodehbgotitle.font = datahbgotitle_font
        
        nodehbgosubtitle = nodehbgo_group.nodes['String to Curves.006']
        datahbgosubtitle_font = bpy.data.fonts.load(mytool.my_pathfontbgo_subtitle)
        nodehbgosubtitle.font = datahbgosubtitle_font

        nodehbgovalue = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.023', 'String to Curves.024', 'String to Curves.025', 'String to Curves.026', 'String to Curves.027', 'String to Curves.028', 'String to Curves.034', 'String to Curves.035','String to Curves.036','String to Curves.037','String to Curves.038','String to Curves.039','String to Curves.040','String to Curves.041','String to Curves.042','String to Curves.043',]
        for name in nodehbgovalue:
            nodehbgovalue = nodehbgo_group.nodes.get(name)
            if nodehbgovalue:
                datahbgovalue_font = bpy.data.fonts.load(mytool.my_pathfontbgo_barvalue)
                nodehbgovalue.font = datahbgovalue_font

        nodehbgorangenumbers = ['String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010', 'String to Curves.011', 'String to Curves.029','String to Curves.030','String to Curves.031','String to Curves.032','String to Curves.033']
        for name in nodehbgorangenumbers:
            nodehbgorangenumbers = nodehbgo_group.nodes.get(name)
            if nodehbgorangenumbers:
                datahbgorangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontbgo_rangenumbers)
                nodehbgorangenumbers.font = datahbgorangenumbers_font    
        
        nodehbgopointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.022', 'String to Curves.021', 'String to Curves.020', 'String to Curves.015', 'String to Curves.014', 'String to Curves.013']
        for name in nodehbgopointtext:
            nodehbgopointtext = nodehbgo_group.nodes.get(name)
            if nodehbgopointtext:
                datahbgopointtext_font = bpy.data.fonts.load(mytool.my_pathfontbgo_bartext)
                nodehbgopointtext.font = datahbgopointtext_font

        nodehbgotexttotal = ['String to Curves.045', 'String to Curves.044']
        for name in nodehbgotexttotal:
            nodehbgotexttotal = nodehbgo_group.nodes.get(name)
            if nodehbgotexttotal:
                datahbgotexttotal_font = bpy.data.fonts.load(mytool.my_pathfontbgo_legend)
                nodehbgotexttotal.font = datahbgotexttotal_font   
   
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreHBO(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorbgoresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestorehbgo_group = modifier.node_group
        
        noderestorehbgotitle = noderestorehbgo_group.nodes['String to Curves.005']
        datarestorehbgotitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorehbgotitle.font = datarestorehbgotitle_font
        
        noderestorehbgosubtitle = noderestorehbgo_group.nodes['String to Curves.006']
        datarestorehbgosubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorehbgosubtitle.font = datarestorehbgosubtitle_font

        nodehbgovalue = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.023', 'String to Curves.024', 'String to Curves.025', 'String to Curves.026', 'String to Curves.027', 'String to Curves.028', 'String to Curves.034', 'String to Curves.035','String to Curves.036','String to Curves.037','String to Curves.038','String to Curves.039','String to Curves.040','String to Curves.041','String to Curves.042','String to Curves.043',]
        for name in nodehbgovalue:
            nodehbgovalue = noderestorehbgo_group.nodes.get(name)
            if nodehbgovalue:
                datahbgovalue_font = bpy.data.fonts["Open Sans Regular"]
                nodehbgovalue.font = datahbgovalue_font     
        
        nodehbgorangenumbers = ['String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010', 'String to Curves.011', 'String to Curves.029','String to Curves.030','String to Curves.031','String to Curves.032','String to Curves.033']
        for name in nodehbgorangenumbers:
            nodehbgorangenumbers = noderestorehbgo_group.nodes.get(name)
            if nodehbgorangenumbers:
                datahbgorangenumbers_font = bpy.data.fonts["Open Sans Semibold"]
                nodehbgorangenumbers.font = datahbgorangenumbers_font  

        nodehbgopointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.022', 'String to Curves.021', 'String to Curves.020', 'String to Curves.015', 'String to Curves.014', 'String to Curves.013' ]
        for name in nodehbgopointtext:
            nodehbgopointtext = noderestorehbgo_group.nodes.get(name)
            if nodehbgopointtext:
                datahbgopointtext_font = bpy.data.fonts["Open Sans Regular"]
                nodehbgopointtext.font = datahbgopointtext_font  

        nodehbgotexttotal = ['String to Curves.045', 'String to Curves.044']
        for name in nodehbgotexttotal:
            nodehbgotexttotal = noderestorehbgo_group.nodes.get(name)
            if nodehbgotexttotal:
                datahbgotexttotal_font = bpy.data.fonts["Open Sans Light"]
                nodehbgotexttotal.font = datahbgotexttotal_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontchangeSHBG(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorshbgfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodehshbg_group = modifier.node_group
        
        nodehshbgtitle = nodehshbg_group.nodes['String to Curves.005']
        datahshbgtitle_font = bpy.data.fonts.load(mytool.my_pathfontshbg_title)
        nodehshbgtitle.font = datahshbgtitle_font
        
        nodehshbgsubtitle = nodehshbg_group.nodes['String to Curves.006']
        datahshbgsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontshbg_subtitle)
        nodehshbgsubtitle.font = datahshbgsubtitle_font

        nodehshbgvalue = ['String to Curves.038', 'String to Curves.037', 'String to Curves.034', 'String to Curves.033', 'String to Curves.032', 'String to Curves.031', 'String to Curves.030', 'String to Curves.029', 'String to Curves.018', 'String to Curves.019']
        for name in nodehshbgvalue:
            nodehshbgvalue = nodehshbg_group.nodes.get(name)
            if nodehshbgvalue:
                datahshbgvalue_font = bpy.data.fonts.load(mytool.my_pathfontshbg_barvalue)
                nodehshbgvalue.font = datahshbgvalue_font

        nodehshbgrangenumbers = ['String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010', 'String to Curves.011']
        for name in nodehshbgrangenumbers:
            nodehshbgrangenumbers = nodehshbg_group.nodes.get(name)
            if nodehshbgrangenumbers:
                datahshbgrangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontshbg_rangenumbers)
                nodehshbgrangenumbers.font = datahshbgrangenumbers_font    
        
        nodehshbgpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.022', 'String to Curves.021', 'String to Curves.020', 'String to Curves.015', 'String to Curves.014', 'String to Curves.013']
        for name in nodehshbgpointtext:
            nodehshbgpointtext = nodehshbg_group.nodes.get(name)
            if nodehshbgpointtext:
                datahshbgpointtext_font = bpy.data.fonts.load(mytool.my_pathfontshbg_bartext)
                nodehshbgpointtext.font = datahshbgpointtext_font

        nodehshbgtexttotal = ['String to Curves.035', 'String to Curves.036', 'String to Curves.039']
        for name in nodehshbgtexttotal:
            nodehshbgtexttotal = nodehshbg_group.nodes.get(name)
            if nodehshbgtexttotal:
                datahshbgtexttotal_font = bpy.data.fonts.load(mytool.my_pathfontshbg_legend)
                nodehshbgtexttotal.font = datahshbgtexttotal_font   
         
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreSHBG(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorshbgresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestorehshbg_group = modifier.node_group
        
        noderestorehshbgtitle = noderestorehshbg_group.nodes['String to Curves.005']
        datarestorehshbgtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorehshbgtitle.font = datarestorehshbgtitle_font
        
        noderestorehshbgsubtitle = noderestorehshbg_group.nodes['String to Curves.006']
        datarestorehshbgsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorehshbgsubtitle.font = datarestorehshbgsubtitle_font

        nodehshbgvalue = ['String to Curves.038', 'String to Curves.037', 'String to Curves.034', 'String to Curves.033', 'String to Curves.032', 'String to Curves.031', 'String to Curves.030', 'String to Curves.029', 'String to Curves.018', 'String to Curves.019']
        for name in nodehshbgvalue:
            nodehshbgvalue = noderestorehshbg_group.nodes.get(name)
            if nodehshbgvalue:
                datahshbgvalue_font = bpy.data.fonts["Open Sans Regular"]
                nodehshbgvalue.font = datahshbgvalue_font     
        
        nodehshbgrangenumbers = ['String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010', 'String to Curves.011']
        for name in nodehshbgrangenumbers:
            nodehshbgrangenumbers = noderestorehshbg_group.nodes.get(name)
            if nodehshbgrangenumbers:
                datahshbgrangenumbers_font = bpy.data.fonts["Open Sans Semibold"]
                nodehshbgrangenumbers.font = datahshbgrangenumbers_font  

        nodehshbgpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.022', 'String to Curves.021', 'String to Curves.020', 'String to Curves.015', 'String to Curves.014', 'String to Curves.013' ]
        for name in nodehshbgpointtext:
            nodehshbgpointtext = noderestorehshbg_group.nodes.get(name)
            if nodehshbgpointtext:
                datahshbgpointtext_font = bpy.data.fonts["Open Sans Regular"]
                nodehshbgpointtext.font = datahshbgpointtext_font  

        nodehshbgtexttotal = ['String to Curves.035', 'String to Curves.036', 'String to Curves.039']
        for name in nodehshbgtexttotal:
            nodehshbgtexttotal = noderestorehshbg_group.nodes.get(name)
            if nodehshbgtexttotal:
                datahshbgtexttotal_font = bpy.data.fonts["Open Sans Light"]
                nodehshbgtexttotal.font = datahshbgtexttotal_font  
       
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontchangeSVBG(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorsvbgfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodehsvbg_group = modifier.node_group
        
        nodehsvbgtitle = nodehsvbg_group.nodes['String to Curves.005']
        datahsvbgtitle_font = bpy.data.fonts.load(mytool.my_pathfontsvbg_title)
        nodehsvbgtitle.font = datahsvbgtitle_font
        
        nodehsvbgsubtitle = nodehsvbg_group.nodes['String to Curves.006']
        datahsvbgsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontsvbg_subtitle)
        nodehsvbgsubtitle.font = datahsvbgsubtitle_font

        nodehsvbgvalue = ['String to Curves.025', 'String to Curves.026', 'String to Curves.027', 'String to Curves.028', 'String to Curves.029', 'String to Curves.030', 'String to Curves.031', 'String to Curves.032']
        for name in nodehsvbgvalue:
            nodehsvbgvalue = nodehsvbg_group.nodes.get(name)
            if nodehsvbgvalue:
                datahsvbgvalue_font = bpy.data.fonts.load(mytool.my_pathfontsvbg_barvalue)
                nodehsvbgvalue.font = datahsvbgvalue_font

        nodehsvbgrangenumbers = ['String to Curves.011', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015', 'String to Curves.016']
        for name in nodehsvbgrangenumbers:
            nodehsvbgrangenumbers = nodehsvbg_group.nodes.get(name)
            if nodehsvbgrangenumbers:
                datahsvbgrangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontsvbg_rangenumbers)
                nodehsvbgrangenumbers.font = datahsvbgrangenumbers_font    
        
        nodehsvbgpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010']
        for name in nodehsvbgpointtext:
            nodehsvbgpointtext = nodehsvbg_group.nodes.get(name)
            if nodehsvbgpointtext:
                datahsvbgpointtext_font = bpy.data.fonts.load(mytool.my_pathfontsvbg_bartext)
                nodehsvbgpointtext.font = datahsvbgpointtext_font

        nodehsvbgtexttotal = ['String to Curves.035', 'String to Curves.036', 'String to Curves.037']
        for name in nodehsvbgtexttotal:
            nodehsvbgtexttotal = nodehsvbg_group.nodes.get(name)
            if nodehsvbgtexttotal:
                datahsvbgtexttotal_font = bpy.data.fonts.load(mytool.my_pathfontsvbg_legend)
                nodehsvbgtexttotal.font = datahsvbgtexttotal_font   
         
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreSVBG(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorsvbgresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestorehsvbg_group = modifier.node_group
        
        noderestorehsvbgtitle = noderestorehsvbg_group.nodes['String to Curves.005']
        datarestorehsvbgtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorehsvbgtitle.font = datarestorehsvbgtitle_font
        
        noderestorehsvbgsubtitle = noderestorehsvbg_group.nodes['String to Curves.006']
        datarestorehsvbgsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorehsvbgsubtitle.font = datarestorehsvbgsubtitle_font

        nodehsvbgvalue = ['String to Curves.025', 'String to Curves.026', 'String to Curves.027', 'String to Curves.028', 'String to Curves.029', 'String to Curves.030', 'String to Curves.031', 'String to Curves.032']
        for name in nodehsvbgvalue:
            nodehsvbgvalue = noderestorehsvbg_group.nodes.get(name)
            if nodehsvbgvalue:
                datahsvbgvalue_font = bpy.data.fonts["Open Sans Regular"]
                nodehsvbgvalue.font = datahsvbgvalue_font     
        
        nodehsvbgrangenumbers = ['String to Curves.011', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015', 'String to Curves.016']
        for name in nodehsvbgrangenumbers:
            nodehsvbgrangenumbers = noderestorehsvbg_group.nodes.get(name)
            if nodehsvbgrangenumbers:
                datahsvbgrangenumbers_font = bpy.data.fonts["Open Sans Semibold"]
                nodehsvbgrangenumbers.font = datahsvbgrangenumbers_font  

        nodehsvbgpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010']
        for name in nodehsvbgpointtext:
            nodehsvbgpointtext = noderestorehsvbg_group.nodes.get(name)
            if nodehsvbgpointtext:
                datahsvbgpointtext_font = bpy.data.fonts["Open Sans Regular"]
                nodehsvbgpointtext.font = datahsvbgpointtext_font  

        nodehsvbgtexttotal = ['String to Curves.035', 'String to Curves.036', 'String to Curves.037']
        for name in nodehsvbgtexttotal:
            nodehsvbgtexttotal = noderestorehsvbg_group.nodes.get(name)
            if nodehsvbgtexttotal:
                datahsvbgtexttotal_font = bpy.data.fonts["Open Sans Light"]
                nodehsvbgtexttotal.font = datahsvbgtexttotal_font  
       
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}    

class FontchangeHBGC(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorbgcfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodehbg_group = modifier.node_group
        
        nodehbgtitle = nodehbg_group.nodes['String to Curves.005']
        datahbgtitle_font = bpy.data.fonts.load(mytool.my_pathfontbgc_title)
        nodehbgtitle.font = datahbgtitle_font
        
        nodehbgsubtitle = nodehbg_group.nodes['String to Curves.006']
        datahbgsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontbgc_subtitle)
        nodehbgsubtitle.font = datahbgsubtitle_font

        nodehbgvalue = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.022', 'String to Curves.023', 'String to Curves.027','String to Curves.026', 'String to Curves.029', 'String to Curves.028', 'String to Curves.031', 'String to Curves.030', 'String to Curves.033', 'String to Curves.032', 'String to Curves.035', 'String to Curves.034']
        for name in nodehbgvalue:
            nodehbgvalue = nodehbg_group.nodes.get(name)
            if nodehbgvalue:
                datahbgvalue_font = bpy.data.fonts.load(mytool.my_pathfontbgc_barvalue)
                nodehbgvalue.font = datahbgvalue_font

        nodehbgrangenumbers = ['String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010', 'String to Curves.011']
        for name in nodehbgrangenumbers:
            nodehbgrangenumbers = nodehbg_group.nodes.get(name)
            if nodehbgrangenumbers:
                datahbgrangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontbgc_rangenumbers)
                nodehbgrangenumbers.font = datahbgrangenumbers_font    
        
        nodehbgpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.025', 'String to Curves.024', 'String to Curves.015', 'String to Curves.014', 'String to Curves.013']
        for name in nodehbgpointtext:
            nodehbgpointtext = nodehbg_group.nodes.get(name)
            if nodehbgpointtext:
                datahbgpointtext_font = bpy.data.fonts.load(mytool.my_pathfontbgc_bartext)
                nodehbgpointtext.font = datahbgpointtext_font

        nodehbglegend = ['String to Curves.004', 'String to Curves.012']
        for name in nodehbglegend:
            nodehbglegend = nodehbg_group.nodes.get(name)
            if nodehbglegend:
                datahbglegend_font = bpy.data.fonts.load(mytool.my_pathfontbgc_legend)
                nodehbglegend.font = datahbglegend_font     
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreHBGC(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorbgcresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestorehbg_group = modifier.node_group
        
        noderestorehbgtitle = noderestorehbg_group.nodes['String to Curves.005']
        datarestorehbgtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorehbgtitle.font = datarestorehbgtitle_font
        
        noderestorehbgsubtitle = noderestorehbg_group.nodes['String to Curves.006']
        datarestorehbgsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorehbgsubtitle.font = datarestorehbgsubtitle_font

        nodehbgvalue = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.022', 'String to Curves.023', 'String to Curves.027','String to Curves.026', 'String to Curves.029', 'String to Curves.028', 'String to Curves.031', 'String to Curves.030', 'String to Curves.033', 'String to Curves.032', 'String to Curves.035', 'String to Curves.034']
        for name in nodehbgvalue:
            nodehbgvalue = noderestorehbg_group.nodes.get(name)
            if nodehbgvalue:
                datahbgvalue_font = bpy.data.fonts["Open Sans Regular"]
                nodehbgvalue.font = datahbgvalue_font     
        
        nodehbgrangenumbers = ['String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010', 'String to Curves.011']
        for name in nodehbgrangenumbers:
            nodehbgrangenumbers = noderestorehbg_group.nodes.get(name)
            if nodehbgrangenumbers:
                datahbgrangenumbers_font = bpy.data.fonts["Open Sans Semibold"]
                nodehbgrangenumbers.font = datahbgrangenumbers_font  

        nodehbgpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.025', 'String to Curves.024', 'String to Curves.015', 'String to Curves.014', 'String to Curves.013']
        for name in nodehbgpointtext:
            nodehbgpointtext = noderestorehbg_group.nodes.get(name)
            if nodehbgpointtext:
                datahbgpointtext_font = bpy.data.fonts["Open Sans Regular"]
                nodehbgpointtext.font = datahbgpointtext_font  

        nodehbglegend = ['String to Curves.004', 'String to Curves.012']
        for name in nodehbglegend:
            nodehbglegend = noderestorehbg_group.nodes.get(name)
            if nodehbglegend:
                datahbglegend_font = bpy.data.fonts["Open Sans Light"]
                nodehbglegend.font = datahbglegend_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'} 
    
class FontchangeMCG(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatormcgfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodemcg_group = modifier.node_group
        
        nodemcgtitle = nodemcg_group.nodes['String to Curves.005']
        datamcgtitle_font = bpy.data.fonts.load(mytool.my_pathfontmcg_title)
        nodemcgtitle.font = datamcgtitle_font
        
        nodemcgsubtitle = nodemcg_group.nodes['String to Curves.006']
        datamcgsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontmcg_subtitle)
        nodemcgsubtitle.font = datamcgsubtitle_font

        nodemcgvalue = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.004', 'String to Curves.009', 'String to Curves.008', 'String to Curves.007']
        for name in nodemcgvalue:
            nodemcgvalue = nodemcg_group.nodes.get(name)
            if nodemcgvalue:
                datamcgvalue_font = bpy.data.fonts.load(mytool.my_pathfontmcg_barvalue)
                nodemcgvalue.font = datamcgvalue_font

        nodemcgdescription = nodemcgdescription = ['String to Curves.011', 'String to Curves.012', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015', 'String to Curves.018', 'String to Curves.017', 'String to Curves.016']
        for name in nodemcgdescription:
            nodemcgdescription = nodemcg_group.nodes.get(name)
            if nodemcgdescription:
                datamcgdescription_font = bpy.data.fonts.load(mytool.my_pathfontmcg_bartext)
                nodemcgdescription.font = datamcgdescription_font      
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreMCG(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatormcgresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestoremcg_group = modifier.node_group
        
        noderestoremcgtitle = noderestoremcg_group.nodes['String to Curves.005']
        datarestoremcgtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestoremcgtitle.font = datarestoremcgtitle_font
        
        noderestoremcgsubtitle = noderestoremcg_group.nodes['String to Curves.006']
        datarestoremcgsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestoremcgsubtitle.font = datarestoremcgsubtitle_font

        nodemcgvalue = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.004', 'String to Curves.009', 'String to Curves.008', 'String to Curves.007']
        for name in nodemcgvalue:
            nodemcgvalue = noderestoremcg_group.nodes.get(name)
            if nodemcgvalue:
                datamcgvalue_font = bpy.data.fonts["Open Sans Semibold"]
                nodemcgvalue.font = datamcgvalue_font     
        
        nodemcgdescription = nodemcgdescription = ['String to Curves.011', 'String to Curves.012', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015', 'String to Curves.018', 'String to Curves.017', 'String to Curves.016']
        for name in nodemcgdescription:
            nodemcgdescription = noderestoremcg_group.nodes.get(name)
            if nodemcgdescription:
                datamcgdescription_font = bpy.data.fonts["Open Sans Light"]
                nodemcgdescription.font = datamcgdescription_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
         
class FontchangeMPG(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatormpgfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodempg_group = modifier.node_group
        
        nodempgtitle = nodempg_group.nodes['String to Curves.005']
        datampgtitle_font = bpy.data.fonts.load(mytool.my_pathfontmpg_title)
        nodempgtitle.font = datampgtitle_font
        
        nodempgsubtitle = nodempg_group.nodes['String to Curves.006']
        datampgsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontmpg_subtitle)
        nodempgsubtitle.font = datampgsubtitle_font

        nodempgvalue = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.004', 'String to Curves.007', 'String to Curves.009', 'String to Curves.008']
        for name in nodempgvalue:
            nodempgvalue = nodempg_group.nodes.get(name)
            if nodempgvalue:
                datampgvalue_font = bpy.data.fonts.load(mytool.my_pathfontmpg_barvalue)
                nodempgvalue.font = datampgvalue_font

        nodempgdescription = ['String to Curves.011', 'String to Curves.012', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015', 'String to Curves.016', 'String to Curves.018', 'String to Curves.017']
        for name in nodempgdescription:
            nodempgdescription = nodempg_group.nodes.get(name)
            if nodempgdescription:
                datampgdescription_font = bpy.data.fonts.load(mytool.my_pathfontmpg_bartext)
                nodempgdescription.font = datampgdescription_font      
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreMPG(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatormpgresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestorempg_group = modifier.node_group
        
        noderestorempgtitle = noderestorempg_group.nodes['String to Curves.005']
        datarestorempgtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorempgtitle.font = datarestorempgtitle_font
        
        noderestorempgsubtitle = noderestorempg_group.nodes['String to Curves.006']
        datarestorempgsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorempgsubtitle.font = datarestorempgsubtitle_font

        nodempgvalue = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.004', 'String to Curves.007', 'String to Curves.009', 'String to Curves.008']
        for name in nodempgvalue:
            nodempgvalue = noderestorempg_group.nodes.get(name)
            if nodempgvalue:
                datampgvalue_font = bpy.data.fonts["Open Sans Semibold"]
                nodempgvalue.font = datampgvalue_font     
        
        nodempgdescription = ['String to Curves.011', 'String to Curves.012', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015', 'String to Curves.016', 'String to Curves.018', 'String to Curves.017']
        for name in nodempgdescription:
            nodempgdescription = noderestorempg_group.nodes.get(name)
            if nodempgdescription:
                datampgdescription_font = bpy.data.fonts["Open Sans Light"]
                nodempgdescription.font = datampgdescription_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontchangeUSM(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorusmapfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodeusmap_group = modifier.node_group
        nestedcandlegrn_node_group = bpy.data.node_groups["NodeGroup.174"]
        nestedcandlegpointtext_node_group = bpy.data.node_groups["NodeGroup.173"]
        
        nodeusmaptitle = ['String to Curves', 'String to Curves.002', 'String to Curves.004']
        for name in nodeusmaptitle:
            nodeusmaptitle = nodeusmap_group.nodes.get(name)
            if nodeusmaptitle:
                datausmaptitle_font = bpy.data.fonts.load(mytool.my_pathfontusmap_title)
                nodeusmaptitle.font = datausmaptitle_font
        
        nodeusmapsubtitle = ['String to Curves.005', 'String to Curves.001', 'String to Curves.003']
        for name in nodeusmapsubtitle:
            nodeusmapsubtitle = nodeusmap_group.nodes.get(name)
            if nodeusmapsubtitle:
                datausmapsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontusmap_subtitle)
                nodeusmapsubtitle.font = datausmapsubtitle_font
    
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreUSM(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorusmapresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestoreusmap_group = modifier.node_group
        nestedcandlegrn_node_group = bpy.data.node_groups["NodeGroup.174"]
        nestedcandlegpointtext_node_group = bpy.data.node_groups["NodeGroup.173"]

        noderestoreusmaptitle = ['String to Curves', 'String to Curves.002', 'String to Curves.004']
        for name in noderestoreusmaptitle:
            noderestoreusmaptitle = noderestoreusmap_group.nodes.get(name)
            if noderestoreusmaptitle:
                datausmaptitle_font = bpy.data.fonts["Open Sans Extrabold"]
                noderestoreusmaptitle.font = datausmaptitle_font   

        noderestoreusmapsubtitle = ['String to Curves.005', 'String to Curves.001', 'String to Curves.003']
        for name in noderestoreusmapsubtitle:
            noderestoreusmapsubtitle = noderestoreusmap_group.nodes.get(name)
            if noderestoreusmapsubtitle:
                datausmapsubtitle_font = bpy.data.fonts["Open Sans Light"]
                noderestoreusmapsubtitle.font = datausmapsubtitle_font
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
         
class FontchangeVBG(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorvbgfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodevvbg_group = modifier.node_group
        
        nodevvbgtitle = nodevvbg_group.nodes['String to Curves.005']
        datavvbgtitle_font = bpy.data.fonts.load(mytool.my_pathfontvbg_title)
        nodevvbgtitle.font = datavvbgtitle_font
        
        nodevvbgsubtitle = nodevvbg_group.nodes['String to Curves.006']
        datavvbgsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontvbg_subtitle)
        nodevvbgsubtitle.font = datavvbgsubtitle_font

        nodevvbgvalue = ['String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.022', 'String to Curves.023', 'String to Curves.024']
        for name in nodevvbgvalue:
            nodevvbgvalue = nodevvbg_group.nodes.get(name)
            if nodevvbgvalue:
                datavvbgvalue_font = bpy.data.fonts.load(mytool.my_pathfontvbg_barvalue)
                nodevvbgvalue.font = datavvbgvalue_font

        nodevvbgrangenumbers = ['String to Curves.011', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015', 'String to Curves.016']
        for name in nodevvbgrangenumbers:
            nodevvbgrangenumbers = nodevvbg_group.nodes.get(name)
            if nodevvbgrangenumbers:
                datavvbgrangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontvbg_rangenumbers)
                nodevvbgrangenumbers.font = datavvbgrangenumbers_font    
        
        nodevvbgpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010']
        for name in nodevvbgpointtext:
            nodevvbgpointtext = nodevvbg_group.nodes.get(name)
            if nodevvbgpointtext:
                datavvbgpointtext_font = bpy.data.fonts.load(mytool.my_pathfontvbg_bartext)
                nodevvbgpointtext.font = datavvbgpointtext_font

        nodevvbgtexttotal = ['String to Curves.004']
        for name in nodevvbgtexttotal:
            nodevvbgtexttotal = nodevvbg_group.nodes.get(name)
            if nodevvbgtexttotal:
                datavvbgtexttotal_font = bpy.data.fonts.load(mytool.my_pathfontvbg_texttotal)
                nodevvbgtexttotal.font = datavvbgtexttotal_font   

        nodevvbgvaluetotal = ['String to Curves.012']
        for name in nodevvbgvaluetotal:
            nodevvbgvaluetotal = nodevvbg_group.nodes.get(name)
            if nodevvbgvaluetotal:
                datavvbgvaluetotal_font = bpy.data.fonts.load(mytool.my_pathfontvbg_valuetotal)
                nodevvbgvaluetotal.font = datavvbgvaluetotal_font    
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreVBG(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorvbgresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestorevvbg_group = modifier.node_group
        
        noderestorevvbgtitle = noderestorevvbg_group.nodes['String to Curves.005']
        datarestorevvbgtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorevvbgtitle.font = datarestorevvbgtitle_font
        
        noderestorevvbgsubtitle = noderestorevvbg_group.nodes['String to Curves.006']
        datarestorevvbgsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorevvbgsubtitle.font = datarestorevvbgsubtitle_font

        nodevvbgvalue = ['String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.022', 'String to Curves.023', 'String to Curves.024']
        for name in nodevvbgvalue:
            nodevvbgvalue = noderestorevvbg_group.nodes.get(name)
            if nodevvbgvalue:
                datavvbgvalue_font = bpy.data.fonts["Open Sans Extrabold"]
                nodevvbgvalue.font = datavvbgvalue_font     
        
        nodevvbgrangenumbers = ['String to Curves.011', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015', 'String to Curves.016']
        for name in nodevvbgrangenumbers:
            nodevvbgrangenumbers = noderestorevvbg_group.nodes.get(name)
            if nodevvbgrangenumbers:
                datavvbgrangenumbers_font = bpy.data.fonts["Open Sans Light"]
                nodevvbgrangenumbers.font = datavvbgrangenumbers_font  

        nodevvbgpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010']
        for name in nodevvbgpointtext:
            nodevvbgpointtext = noderestorevvbg_group.nodes.get(name)
            if nodevvbgpointtext:
                datavvbgpointtext_font = bpy.data.fonts["Open Sans Regular"]
                nodevvbgpointtext.font = datavvbgpointtext_font  

        nodevvbgtexttotal = ['String to Curves.004']
        for name in nodevvbgtexttotal:
            nodevvbgtexttotal = noderestorevvbg_group.nodes.get(name)
            if nodevvbgtexttotal:
                datavvbgtexttotal_font = bpy.data.fonts["Open Sans Extrabold"]
                nodevvbgtexttotal.font = datavvbgtexttotal_font  

        nodevvbgvaluetotal = ['String to Curves.012']
        for name in nodevvbgvaluetotal:
            nodevvbgvaluetotal = noderestorevvbg_group.nodes.get(name)
            if nodevvbgvaluetotal:
                datavvbgvaluetotal_font = bpy.data.fonts["Open Sans Extrabold"]
                nodevvbgvaluetotal.font = datavvbgvaluetotal_font 
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontchangeVBGC(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorvbgcfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodevvbgc_group = modifier.node_group
        
        nodevvbgctitle = nodevvbgc_group.nodes['String to Curves.005']
        datavvbgctitle_font = bpy.data.fonts.load(mytool.my_pathfontvbgc_title)
        nodevvbgctitle.font = datavvbgctitle_font
        
        nodevvbgcsubtitle = nodevvbgc_group.nodes['String to Curves.006']
        datavvbgcsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontvbgc_subtitle)
        nodevvbgcsubtitle.font = datavvbgcsubtitle_font

        nodevvbgcvaluea = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.022', 'String to Curves.023']
        for name in nodevvbgcvaluea:
            nodevvbgcvaluea = nodevvbgc_group.nodes.get(name)
            if nodevvbgcvaluea:
                datavvbgcvaluea_font = bpy.data.fonts.load(mytool.my_pathfontvbgc_barvaluea)
                nodevvbgcvaluea.font = datavvbgcvaluea_font

        nodevvbgcvalueb = ['String to Curves.025', 'String to Curves.026', 'String to Curves.027', 'String to Curves.028', 'String to Curves.029', 'String to Curves.030', 'String to Curves.031', 'String to Curves.032']
        for name in nodevvbgcvalueb:
            nodevvbgcvalueb = nodevvbgc_group.nodes.get(name)
            if nodevvbgcvalueb:
                datavvbgcvalueb_font = bpy.data.fonts.load(mytool.my_pathfontvbgc_barvalueb)
                nodevvbgcvalueb.font = datavvbgcvalueb_font

        nodevvbgcrangenumbers = ['String to Curves.011', 'String to Curves.012', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015']
        for name in nodevvbgcrangenumbers:
            nodevvbgcrangenumbers = nodevvbgc_group.nodes.get(name)
            if nodevvbgcrangenumbers:
                datavvbgcrangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontvbgc_rangenumbers)
                nodevvbgcrangenumbers.font = datavvbgcrangenumbers_font    
        
        nodevvbgcpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010']
        for name in nodevvbgcpointtext:
            nodevvbgcpointtext = nodevvbgc_group.nodes.get(name)
            if nodevvbgcpointtext:
                datavvbgcpointtext_font = bpy.data.fonts.load(mytool.my_pathfontvbgc_bartext)
                nodevvbgcpointtext.font = datavvbgcpointtext_font

        nodevvbgclegend = ['String to Curves.033', 'String to Curves.034']
        for name in nodevvbgclegend:
            nodevvbgclegend = nodevvbgc_group.nodes.get(name)
            if nodevvbgclegend:
                datavvbgclegend_font = bpy.data.fonts.load(mytool.my_pathfontvbgc_legend)
                nodevvbgclegend.font = datavvbgclegend_font     
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreVBGC(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorvbgcresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestorevvbgc_group = modifier.node_group
        
        noderestorevvbgctitle = noderestorevvbgc_group.nodes['String to Curves.005']
        datarestorevvbgctitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorevvbgctitle.font = datarestorevvbgctitle_font
        
        noderestorevvbgcsubtitle = noderestorevvbgc_group.nodes['String to Curves.006']
        datarestorevvbgcsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorevvbgcsubtitle.font = datarestorevvbgcsubtitle_font

        nodevvbgcvaluea = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.022', 'String to Curves.023']
        for name in nodevvbgcvaluea:
            nodevvbgcvaluea = noderestorevvbgc_group.nodes.get(name)
            if nodevvbgcvaluea:
                datavvbgcvaluea_font = bpy.data.fonts["Open Sans Extrabold"]
                nodevvbgcvaluea.font = datavvbgcvaluea_font   

        nodevvbgcvalueb = ['String to Curves.025', 'String to Curves.026', 'String to Curves.027', 'String to Curves.028', 'String to Curves.029', 'String to Curves.030', 'String to Curves.031', 'String to Curves.032']
        for name in nodevvbgcvalueb:
            nodevvbgcvalueb = noderestorevvbgc_group.nodes.get(name)
            if nodevvbgcvalueb:
                datavvbgcvalueb_font = bpy.data.fonts["Open Sans Extrabold"]
                nodevvbgcvalueb.font = datavvbgcvalueb_font    
        
        nodevvbgcrangenumbers = ['String to Curves.011', 'String to Curves.012', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015']
        for name in nodevvbgcrangenumbers:
            nodevvbgcrangenumbers = noderestorevvbgc_group.nodes.get(name)
            if nodevvbgcrangenumbers:
                datavvbgcrangenumbers_font = bpy.data.fonts["Open Sans Regular"]
                nodevvbgcrangenumbers.font = datavvbgcrangenumbers_font  

        nodevvbgcpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010']
        for name in nodevvbgcpointtext:
            nodevvbgcpointtext = noderestorevvbgc_group.nodes.get(name)
            if nodevvbgcpointtext:
                datavvbgcpointtext_font = bpy.data.fonts["Open Sans Regular"]
                nodevvbgcpointtext.font = datavvbgcpointtext_font  

        nodevvbgclegend = ['String to Curves.033', 'String to Curves.034']
        for name in nodevvbgclegend:
            nodevvbgclegend = noderestorevvbgc_group.nodes.get(name)
            if nodevvbgclegend:
                datavvbgclegend_font = bpy.data.fonts["Open Sans Regular"]
                nodevvbgclegend.font = datavvbgclegend_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'} 
    
class FontchangeVBGM(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorvbgmfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodevvbgm_group = modifier.node_group
        
        nodevvbgmtitle = nodevvbgm_group.nodes['String to Curves.005']
        datavvbgmtitle_font = bpy.data.fonts.load(mytool.my_pathfontvbgm_title)
        nodevvbgmtitle.font = datavvbgmtitle_font
        
        nodevvbgmsubtitle = nodevvbgm_group.nodes['String to Curves.006']
        datavvbgmsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontvbgm_subtitle)
        nodevvbgmsubtitle.font = datavvbgmsubtitle_font

        nodevvbgmvaluea = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.022', 'String to Curves.023']
        for name in nodevvbgmvaluea:
            nodevvbgmvaluea = nodevvbgm_group.nodes.get(name)
            if nodevvbgmvaluea:
                datavvbgmvaluea_font = bpy.data.fonts.load(mytool.my_pathfontvbgm_barvaluea)
                nodevvbgmvaluea.font = datavvbgmvaluea_font

        nodevvbgmvalueb = ['String to Curves.025', 'String to Curves.026', 'String to Curves.027', 'String to Curves.028', 'String to Curves.029', 'String to Curves.030', 'String to Curves.031', 'String to Curves.032']
        for name in nodevvbgmvalueb:
            nodevvbgmvalueb = nodevvbgm_group.nodes.get(name)
            if nodevvbgmvalueb:
                datavvbgmvalueb_font = bpy.data.fonts.load(mytool.my_pathfontvbgm_barvalueb)
                nodevvbgmvalueb.font = datavvbgmvalueb_font
                
        nodevvbgmvaluec = ['String to Curves.024', 'String to Curves.038', 'String to Curves.040', 'String to Curves.042', 'String to Curves.044', 'String to Curves.046', 'String to Curves.050', 'String to Curves.048']
        for name in nodevvbgmvaluec:
            nodevvbgmvaluec = nodevvbgm_group.nodes.get(name)
            if nodevvbgmvaluec:
                datavvbgmvaluec_font = bpy.data.fonts.load(mytool.my_pathfontvbgm_barvaluec)
                nodevvbgmvaluec.font = datavvbgmvaluec_font

        nodevvbgmvalued = ['String to Curves.035', 'String to Curves.039', 'String to Curves.041', 'String to Curves.043', 'String to Curves.045', 'String to Curves.047', 'String to Curves.051', 'String to Curves.049']
        for name in nodevvbgmvalued:
            nodevvbgmvalued = nodevvbgm_group.nodes.get(name)
            if nodevvbgmvalued:
                datavvbgmvalued_font = bpy.data.fonts.load(mytool.my_pathfontvbgm_barvalued)
                nodevvbgmvalued.font = datavvbgmvalued_font

        nodevvbgmrangenumbers = ['String to Curves.011', 'String to Curves.012', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015']
        for name in nodevvbgmrangenumbers:
            nodevvbgmrangenumbers = nodevvbgm_group.nodes.get(name)
            if nodevvbgmrangenumbers:
                datavvbgmrangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontvbgm_rangenumbers)
                nodevvbgmrangenumbers.font = datavvbgmrangenumbers_font    
        
        nodevvbgmpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010']
        for name in nodevvbgmpointtext:
            nodevvbgmpointtext = nodevvbgm_group.nodes.get(name)
            if nodevvbgmpointtext:
                datavvbgmpointtext_font = bpy.data.fonts.load(mytool.my_pathfontvbgm_bartext)
                nodevvbgmpointtext.font = datavvbgmpointtext_font

        nodevvbgmlegend = ['String to Curves.033', 'String to Curves.034', 'String to Curves.036', 'String to Curves.037']
        for name in nodevvbgmlegend:
            nodevvbgmlegend = nodevvbgm_group.nodes.get(name)
            if nodevvbgmlegend:
                datavvbgmlegend_font = bpy.data.fonts.load(mytool.my_pathfontvbgm_legend)
                nodevvbgmlegend.font = datavvbgmlegend_font     
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestoreVBGM(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorvbgmresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestorevvbgm_group = modifier.node_group
        
        noderestorevvbgmtitle = noderestorevvbgm_group.nodes['String to Curves.005']
        datarestorevvbgmtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorevvbgmtitle.font = datarestorevvbgmtitle_font
        
        noderestorevvbgmsubtitle = noderestorevvbgm_group.nodes['String to Curves.006']
        datarestorevvbgmsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorevvbgmsubtitle.font = datarestorevvbgmsubtitle_font

        nodevvbgmvaluea = ['String to Curves.016', 'String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.022', 'String to Curves.023']
        for name in nodevvbgmvaluea:
            nodevvbgmvaluea = noderestorevvbgm_group.nodes.get(name)
            if nodevvbgmvaluea:
                datavvbgmvaluea_font = bpy.data.fonts["Open Sans Extrabold"]
                nodevvbgmvaluea.font = datavvbgmvaluea_font   

        nodevvbgmvalueb = ['String to Curves.025', 'String to Curves.026', 'String to Curves.027', 'String to Curves.028', 'String to Curves.029', 'String to Curves.030', 'String to Curves.031', 'String to Curves.032']
        for name in nodevvbgmvalueb:
            nodevvbgmvalueb = noderestorevvbgm_group.nodes.get(name)
            if nodevvbgmvalueb:
                datavvbgmvalueb_font = bpy.data.fonts["Open Sans Extrabold"]
                nodevvbgmvalueb.font = datavvbgmvalueb_font  
                
        nodevvbgmvaluec = ['String to Curves.024', 'String to Curves.038', 'String to Curves.040', 'String to Curves.042', 'String to Curves.044', 'String to Curves.046', 'String to Curves.050', 'String to Curves.048']
        for name in nodevvbgmvaluec:
            nodevvbgmvaluec = noderestorevvbgm_group.nodes.get(name)
            if nodevvbgmvaluec:
                datavvbgmvaluec_font = bpy.data.fonts["Open Sans Extrabold"]
                nodevvbgmvaluec.font = datavvbgmvaluec_font   

        nodevvbgmvalued = ['String to Curves.035', 'String to Curves.039', 'String to Curves.041', 'String to Curves.043', 'String to Curves.045', 'String to Curves.047', 'String to Curves.051', 'String to Curves.049']
        for name in nodevvbgmvalued:
            nodevvbgmvalued = noderestorevvbgm_group.nodes.get(name)
            if nodevvbgmvalued:
                datavvbgmvalued_font = bpy.data.fonts["Open Sans Extrabold"]
                nodevvbgmvalued.font = datavvbgmvalued_font                 
  
        
        nodevvbgmrangenumbers = ['String to Curves.011', 'String to Curves.012', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015']
        for name in nodevvbgmrangenumbers:
            nodevvbgmrangenumbers = noderestorevvbgm_group.nodes.get(name)
            if nodevvbgmrangenumbers:
                datavvbgmrangenumbers_font = bpy.data.fonts["Open Sans Regular"]
                nodevvbgmrangenumbers.font = datavvbgmrangenumbers_font  

        nodevvbgmpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010']
        for name in nodevvbgmpointtext:
            nodevvbgmpointtext = noderestorevvbgm_group.nodes.get(name)
            if nodevvbgmpointtext:
                datavvbgmpointtext_font = bpy.data.fonts["Open Sans Regular"]
                nodevvbgmpointtext.font = datavvbgmpointtext_font  

        nodevvbgmlegend = ['String to Curves.033', 'String to Curves.034', 'String to Curves.036', 'String to Curves.037']
        for name in nodevvbgmlegend:
            nodevvbgmlegend = noderestorevvbgm_group.nodes.get(name)
            if nodevvbgmlegend:
                datavvbgmlegend_font = bpy.data.fonts["Open Sans Regular"]
                nodevvbgmlegend.font = datavvbgmlegend_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'} 
    
class FontchangePLG(bpy.types.Operator):
    bl_label = "Apply All Fonts"
    bl_idname = "addonname.myop_operatorplgfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        nodevplg_group = modifier.node_group
        
        nodevplgtitle = nodevplg_group.nodes['String to Curves.005']
        datavplgtitle_font = bpy.data.fonts.load(mytool.my_pathfontplg_title)
        nodevplgtitle.font = datavplgtitle_font
        
        nodevplgsubtitle = nodevplg_group.nodes['String to Curves.006']
        datavplgsubtitle_font = bpy.data.fonts.load(mytool.my_pathfontplg_subtitle)
        nodevplgsubtitle.font = datavplgsubtitle_font

        nodevplgvalue = ['String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.022', 'String to Curves.023', 'String to Curves.024']
        for name in nodevplgvalue:
            nodevplgvalue = nodevplg_group.nodes.get(name)
            if nodevplgvalue:
                datavplgvalue_font = bpy.data.fonts.load(mytool.my_pathfontplg_barvalue)
                nodevplgvalue.font = datavplgvalue_font

        nodevplgrangenumbers = ['String to Curves.011', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015', 'String to Curves.016', 'String to Curves.026', 'String to Curves.027', 'String to Curves.028', 'String to Curves.029']
        for name in nodevplgrangenumbers:
            nodevplgrangenumbers = nodevplg_group.nodes.get(name)
            if nodevplgrangenumbers:
                datavplgrangenumbers_font = bpy.data.fonts.load(mytool.my_pathfontplg_rangenumbers)
                nodevplgrangenumbers.font = datavplgrangenumbers_font    
        
        nodevplgpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010']
        for name in nodevplgpointtext:
            nodevplgpointtext = nodevplg_group.nodes.get(name)
            if nodevplgpointtext:
                datavplgpointtext_font = bpy.data.fonts.load(mytool.my_pathfontplg_bartext)
                nodevplgpointtext.font = datavplgpointtext_font 
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class FontrestorePLG(bpy.types.Operator):
    bl_label = "Restore OpenSans"
    bl_idname = "addonname.myop_operatorplgresfont"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        obj = bpy.context.view_layer.objects.active
        modifier = obj.modifiers["GeometryNodes"]
        noderestorevplg_group = modifier.node_group
        
        noderestorevplgtitle = noderestorevplg_group.nodes['String to Curves.005']
        datarestorevplgtitle_font = bpy.data.fonts["Open Sans Extrabold"]
        noderestorevplgtitle.font = datarestorevplgtitle_font
        
        noderestorevplgsubtitle = noderestorevplg_group.nodes['String to Curves.006']
        datarestorevplgsubtitle_font = bpy.data.fonts["Open Sans Light"]
        noderestorevplgsubtitle.font = datarestorevplgsubtitle_font

        nodevplgvalue = ['String to Curves.017', 'String to Curves.018', 'String to Curves.019', 'String to Curves.020', 'String to Curves.021', 'String to Curves.022', 'String to Curves.023', 'String to Curves.024']
        for name in nodevplgvalue:
            nodevplgvalue = noderestorevplg_group.nodes.get(name)
            if nodevplgvalue:
                datavplgvalue_font = bpy.data.fonts["Open Sans Extrabold"]
                nodevplgvalue.font = datavplgvalue_font     
        
        nodevplgrangenumbers = ['String to Curves.011', 'String to Curves.013', 'String to Curves.014', 'String to Curves.015', 'String to Curves.016', 'String to Curves.026', 'String to Curves.027', 'String to Curves.028', 'String to Curves.029']
        for name in nodevplgrangenumbers:
            nodevplgrangenumbers = noderestorevplg_group.nodes.get(name)
            if nodevplgrangenumbers:
                datavplgrangenumbers_font = bpy.data.fonts["Open Sans Light"]
                nodevplgrangenumbers.font = datavplgrangenumbers_font  

        nodevplgpointtext = ['String to Curves', 'String to Curves.001', 'String to Curves.002', 'String to Curves.003', 'String to Curves.007', 'String to Curves.008', 'String to Curves.009', 'String to Curves.010']
        for name in nodevplgpointtext:
            nodevplgpointtext = noderestorevplg_group.nodes.get(name)
            if nodevplgpointtext:
                datavplgpointtext_font = bpy.data.fonts["Open Sans Regular"]
                nodevplgpointtext.font = datavplgpointtext_font  
        
        bpy.ops.file.pack_all()    
        
        return {'FINISHED'}
    
class ADDONNAME_OT_my_op3(bpy.types.Operator):
    bl_label = "Add Object3"
    bl_idname = "addonname.myop_operator3"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool       
    
        if mytool.my_enum3 == 'OP9':

            bpy.context.scene.render.use_file_extension = True
            bpy.context.scene.render.use_render_cache = False
            bpy.context.scene.render.image_settings.file_format = 'PNG'
            bpy.context.scene.render.image_settings.color_mode = 'RGBA'
            bpy.context.scene.render.image_settings.color_depth = '8'
            bpy.context.scene.render.image_settings.compression = 50
            bpy.context.scene.render.use_overwrite = True
            bpy.context.scene.render.use_placeholder = False
            
        if mytool.my_enum3 == 'OP10':

            bpy.context.scene.render.use_file_extension = True
            bpy.context.scene.render.use_render_cache = False
            bpy.context.scene.render.image_settings.file_format = 'OPEN_EXR'
            bpy.context.scene.render.image_settings.color_mode = 'RGBA'
            bpy.context.scene.render.image_settings.color_depth = '32'
            bpy.context.scene.render.image_settings.exr_codec = 'ZIP'
            bpy.context.scene.render.image_settings.use_zbuffer = False
            bpy.context.scene.render.image_settings.use_preview = False
            bpy.context.scene.render.use_overwrite = True
            bpy.context.scene.render.use_placeholder = False
            
        if mytool.my_enum3 == 'OP11':

            bpy.context.scene.render.use_file_extension = True
            bpy.context.scene.render.use_render_cache = False
            bpy.context.scene.render.image_settings.file_format = 'FFMPEG'
            bpy.context.scene.render.image_settings.color_mode = 'RGB'
            bpy.context.scene.render.image_settings.color_management = 'FOLLOW_SCENE'
            bpy.context.scene.render.ffmpeg.format = 'MPEG4'
            bpy.context.scene.render.ffmpeg.use_autosplit = False
            bpy.context.scene.render.ffmpeg.audio_codec = 'AAC'
            bpy.context.scene.render.ffmpeg.codec = 'H264'
            bpy.context.scene.render.ffmpeg.constant_rate_factor = 'HIGH'
            bpy.context.scene.render.ffmpeg.ffmpeg_preset = 'GOOD'
            bpy.context.scene.render.ffmpeg.gopsize = 18
            bpy.context.scene.render.ffmpeg.use_max_b_frames = False
        
        return {'FINISHED'} 
    
class Locationchange(bpy.types.Operator):
    bl_label = "font Object"
    bl_idname = "addonname.myop_operatorffg"
        
    def execute(self, context):
        scene = context.scene
        mytool = scene.my_tool
        
        bpy.context.scene.render.filepath = mytool.my_path2  
        
        return {'FINISHED'}    

classes = [MyProperties, MyoperatorCGsql, MyoperatorPGsql, Myoperator23CGsql, Myoperatorcandlesql, Myoperator23PGsql, MyoperatorHBGsql, MyoperatorHBGCsql, MyoperatorMCGsql, MyoperatorMPGsql, MyoperatorLGsql, MyoperatorRGsql, MyoperatorMGsql, MyoperatorLGCsql, MyoperatorMGCsql, MyoperatorSGCsql, MyoperatorBGSsql, Myoperatorusmapsql, MyoperatorVBGsql, MyoperatorVBGCsql, MyoperatorVBGMsql, MyoperatorPLsql, MyoperatorHBGOsql, MyoperatorHBGSsql, MyoperatorVBGSsql, MyoperatorCGcsv, MyoperatorCGCcsv, MyoperatorCANDLEcsv, MyoperatorRGcsv, MyoperatorPGCcsv, MyoperatorPGcsv, MyoperatorPGgenai, MyoperatorCGgenai, Myoperator23CGgenai, Myoperator23PGgenai, MyoperatorMCGgenai, MyoperatorMPGgenai, MyoperatorHBGgenai, MyoperatorHBGCgenai, MyoperatorVBGgenai, MyoperatorVBGCgenai, MyoperatorLGgenai, MyoperatorLGCgenai, MyoperatorMGgenai, MyoperatorMGCgenai, MyoperatorUSMAPgenai, MyoperatorLGcsv, MyoperatorLGCcsv, 
MyoperatorHBcsv, MyoperatorHBCcsv, MyoperatorHBOcsv, MyoperatorHBScsv, MyoperatorVBScsv, MyoperatorMCcsv, MyoperatorMPcsv, MyoperatorMGcsv, MyoperatorMGCcsv, MyoperatorSGCcsv, MyoperatorBGScsv, MyoperatorUSMcsv, MyoperatorVBcsv, MyoperatorPLcsv,
MyoperatorVBCcsv, MyoperatorVBMcsv, RenderRender2, ADDONNAME_OT_my_opc, ADDONNAME_OT_my_op23cAL, ADDONNAME_OT_my_op23cBL, ADDONNAME_OT_my_op23cCL, ADDONNAME_OT_my_oprgAL, ADDONNAME_OT_my_oprgBL, ADDONNAME_OT_my_oprgCL,
ADDONNAME_OT_my_op23pAL, ADDONNAME_OT_my_op23pBL, ADDONNAME_OT_my_op23pCL, ADDONNAME_OT_my_opHBGAL, ADDONNAME_OT_my_opHBGBL, 
ADDONNAME_OT_my_opHBGCL, ADDONNAME_OT_my_opHBGDL, ADDONNAME_OT_my_opHBGEL, ADDONNAME_OT_my_opHBGFL, ADDONNAME_OT_my_opHBGGL, ADDONNAME_OT_my_opHBGHL, ADDONNAME_OT_my_opHBGIL, ADDONNAME_OT_my_opHBGJL, ADDONNAME_OT_my_opOPPOSINGAHBARAL, ADDONNAME_OT_my_opOPPOSINGAHBARBL, ADDONNAME_OT_my_opOPPOSINGAHBARCL, ADDONNAME_OT_my_opOPPOSINGAHBARDL, ADDONNAME_OT_my_opOPPOSINGAHBAREL, ADDONNAME_OT_my_opOPPOSINGAHBARFL, 
ADDONNAME_OT_my_opOPPOSINGAHBARGL, ADDONNAME_OT_my_opOPPOSINGAHBARHL, ADDONNAME_OT_my_opOPPOSINGAHBARIL,
ADDONNAME_OT_my_opOPPOSINGAHBARJL , ADDONNAME_OT_my_opSTACKEDAHBARAL, ADDONNAME_OT_my_opSTACKEDAHBARBL, ADDONNAME_OT_my_opSTACKEDAHBARCL, ADDONNAME_OT_my_opSTACKEDAVBARAL, ADDONNAME_OT_my_opSTACKEDAVBARBL, ADDONNAME_OT_my_opSTACKEDAVBARCL, ADDONNAME_OT_my_opVBGAL, ADDONNAME_OT_my_opVBGBL, ADDONNAME_OT_my_opVBGCL, 
ADDONNAME_OT_my_opVBGDL, ADDONNAME_OT_my_opVBGEL, ADDONNAME_OT_my_opVBGFL, ADDONNAME_OT_my_opVBGGL, ADDONNAME_OT_my_opVBGHL, ADDONNAME_OT_my_opPLGAL, ADDONNAME_OT_my_opPLGBL, ADDONNAME_OT_my_opPLGCL, ADDONNAME_OT_my_opPLGDL, ADDONNAME_OT_my_opPLGEL, ADDONNAME_OT_my_opPLGFL, ADDONNAME_OT_my_opPLGGL, ADDONNAME_OT_my_opPLGHL, 
ADDONNAME_23C, ADDONNAME_RADAR, ADDONNAME_23P, ADDONNAME_LGC, ADDONNAME_HBC, ADDONNAME_SHBG, ADDONNAME_SVBG, ADDONNAME_MG, ADDONNAME_MGC, ADDONNAME_SGC, ADDONNAME_BGS, ADDONNAME_USM, ADDONNAME_VB, ADDONNAME_PL, ADDONNAME_VBC, ADDONNAME_VBM, ADDONNAME_OT_my_opggpie, 
ADDONNAME_OT_my_op, ADDONNAME_OT_my_op2, ADDONNAME_OT_my_op2pie, ADDONNAME_OT_my_oplgpie, ADDONNAME_OT_my_ophbpie, ADDONNAME_OT_my_ophbo, ADDONNAME_OT_my_opmcpie, 
ADDONNAME_OT_my_opmppie, ADDONNAME_OT_my_op3, FontchangeCG, FontchangePG, Fontchange23CG, Fontchange23PG, FontchangeCANDLEG, FontchangeLINEG, FontchangeMOUNTAING, FontchangeLINEGC, FontchangeMOUNTAINGC, FontchangeSCATTERGC, FontrestoreSCATTERGC, FontchangeBUBBLEGC, FontrestoreBUBBLEGC, FontchangeHBG, FontchangeSHBG, FontchangeSVBG, FontrestoreSVBG, FontrestoreSHBG, FontchangeHBO, FontrestoreHBO, FontchangeMCG, FontchangeMPG, FontchangeUSM, FontrestoreUSM, FontchangeVBG, FontchangeVBGC, FontrestoreVBGC, FontchangeVBGM, FontrestoreVBGM, FontrestoreVBG, FontchangePLG, FontrestorePLG, FontrestoreMPG, FontrestoreMCG, FontrestoreHBG, FontchangeHBGC, FontrestoreHBGC, FontrestoreLINEGC, FontrestoreMOUNTAING, FontrestoreMOUNTAINGC, Fontrestore23CG, FontchangeRG, FontrestoreRG, FontrestoreLINEG, Fontrestore23PG, FontrestoreCG, FontrestorePG, FontrestoreCANDLEG,
NG_PT_QuickRenderPresets_1, NG_PT_QuickRenderPresets_2, NG_PT_QuickRenderPresets_3, CIRCLE_GRAPH_PT_panel_1, CIRCLE_GRAPH_PT_panel_2, CIRCLE_GRAPH_PT_panel_3, CIRCLE_GRAPH_PT_panel_4, CIRCLE_GRAPH_PT_panel_5, CIRCLE_GRAPH_PT_panel_6, CIRCLE_GRAPH_23_PT_panel_1, CIRCLE_GRAPH_23_PT_panel_2, CIRCLE_GRAPH_23_PT_panel_3, CIRCLE_GRAPH_23_PT_panel_4, CIRCLE_GRAPH_23_PT_panel_5, CIRCLE_GRAPH_23_PT_panel_6, CANDLESTICK_GRAPH_PT_panel_1, CANDLESTICK_GRAPH_PT_panel_2, CANDLESTICK_GRAPH_PT_panel_3, CANDLESTICK_GRAPH_PT_panel_4, CANDLESTICK_GRAPH_PT_panel_5, PIE_GRAPH_PT_panel_1, PIE_GRAPH_PT_panel_2, PIE_GRAPH_PT_panel_3, PIE_GRAPH_PT_panel_4, PIE_GRAPH_PT_panel_5, PIE_GRAPH_PT_panel_6, PIE_GRAPH_23_PT_panel_1, 
PIE_GRAPH_23_PT_panel_2, PIE_GRAPH_23_PT_panel_3, PIE_GRAPH_23_PT_panel_4, PIE_GRAPH_23_PT_panel_5, PIE_GRAPH_23_PT_panel_6, LINE_GRAPH_PT_panel_1, LINE_GRAPH_PT_panel_2, LINE_GRAPH_PT_panel_3, LINE_GRAPH_PT_panel_4, LINE_GRAPH_PT_panel_5, LINE_GRAPH_PT_panel_6, COMPARISON_LINE_GRAPH_PT_panel_1, COMPARISON_LINE_GRAPH_PT_panel_2, COMPARISON_LINE_GRAPH_PT_panel_3, COMPARISON_LINE_GRAPH_PT_panel_4, COMPARISON_LINE_GRAPH_PT_panel_5, COMPARISON_LINE_GRAPH_PT_panel_6,  HORIZONTAL_BAR_GRAPH_PT_panel_1, HORIZONTAL_BAR_GRAPH_PT_panel_2, HORIZONTAL_BAR_GRAPH_PT_panel_3, HORIZONTAL_BAR_GRAPH_PT_panel_4, HORIZONTAL_BAR_GRAPH_PT_panel_5, HORIZONTAL_BAR_GRAPH_PT_panel_6, OPPOSING_HORIZONTAL_BAR_GRAPH_PT_panel_1, OPPOSING_HORIZONTAL_BAR_GRAPH_PT_panel_2, OPPOSING_HORIZONTAL_BAR_GRAPH_PT_panel_3, OPPOSING_HORIZONTAL_BAR_GRAPH_PT_panel_4, OPPOSING_HORIZONTAL_BAR_GRAPH_PT_panel_5, PROFITLOSS_BAR_GRAPH_PT_panel_1, PROFITLOSS_BAR_GRAPH_PT_panel_2, PROFITLOSS_BAR_GRAPH_PT_panel_3, PROFITLOSS_BAR_GRAPH_PT_panel_4, PROFITLOSS_BAR_GRAPH_PT_panel_5, STACKED_HORIZONTAL_BAR_GRAPH_PT_panel_1, STACKED_HORIZONTAL_BAR_GRAPH_PT_panel_2, STACKED_HORIZONTAL_BAR_GRAPH_PT_panel_3, STACKED_HORIZONTAL_BAR_GRAPH_PT_panel_4, STACKED_HORIZONTAL_BAR_GRAPH_PT_panel_5, STACKED_VERTICAL_BAR_GRAPH_PT_panel_1, STACKED_VERTICAL_BAR_GRAPH_PT_panel_2, STACKED_VERTICAL_BAR_GRAPH_PT_panel_3, STACKED_VERTICAL_BAR_GRAPH_PT_panel_4, STACKED_VERTICAL_BAR_GRAPH_PT_panel_5,
COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_1, COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_2, COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_3, COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_4, COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_5, COMPARISON_HORIZONTAL_BAR_GRAPH_PT_panel_6, MULTIPLE_CIRCLE_GRAPH_PT_panel_1, MULTIPLE_CIRCLE_GRAPH_PT_panel_2, MULTIPLE_CIRCLE_GRAPH_PT_panel_3, MULTIPLE_CIRCLE_GRAPH_PT_panel_4, MULTIPLE_CIRCLE_GRAPH_PT_panel_5, MULTIPLE_CIRCLE_GRAPH_PT_panel_6, MULTIPLE_PIE_GRAPH_PT_panel_1, MULTIPLE_PIE_GRAPH_PT_panel_2, MULTIPLE_PIE_GRAPH_PT_panel_3, MULTIPLE_PIE_GRAPH_PT_panel_4, MULTIPLE_PIE_GRAPH_PT_panel_5, MULTIPLE_PIE_GRAPH_PT_panel_6, RADAR_GRAPH_PT_panel_1, RADAR_GRAPH_PT_panel_2, RADAR_GRAPH_PT_panel_3, RADAR_GRAPH_PT_panel_4, RADAR_GRAPH_PT_panel_5, MOUNTAIN_GRAPH_PT_panel_1, MOUNTAIN_GRAPH_PT_panel_2, MOUNTAIN_GRAPH_PT_panel_3, MOUNTAIN_GRAPH_PT_panel_4, MOUNTAIN_GRAPH_PT_panel_5, MOUNTAIN_GRAPH_PT_panel_6,
COMPARISON_MOUNTAIN_GRAPH_PT_panel_1, COMPARISON_MOUNTAIN_GRAPH_PT_panel_2, COMPARISON_MOUNTAIN_GRAPH_PT_panel_3, COMPARISON_MOUNTAIN_GRAPH_PT_panel_4, COMPARISON_MOUNTAIN_GRAPH_PT_panel_5, COMPARISON_MOUNTAIN_GRAPH_PT_panel_6, SCATTER_GRAPH_PT_panel_1, SCATTER_GRAPH_PT_panel_2, SCATTER_GRAPH_PT_panel_3, SCATTER_GRAPH_PT_panel_4, SCATTER_GRAPH_PT_panel_5, BUBBLE_GRAPH_PT_panel_1, BUBBLE_GRAPH_PT_panel_2, BUBBLE_GRAPH_PT_panel_3, BUBBLE_GRAPH_PT_panel_4, BUBBLE_GRAPH_PT_panel_5,  Locationchange, US_MAP_PT_panel_1, US_MAP_PT_panel_2, US_MAP_PT_panel_3, US_MAP_PT_panel_4, US_MAP_PT_panel_5, VERTICAL_BAR_GRAPH_PT_panel_1, VERTICAL_BAR_GRAPH_PT_panel_2, VERTICAL_BAR_GRAPH_PT_panel_3, VERTICAL_BAR_GRAPH_PT_panel_4, VERTICAL_BAR_GRAPH_PT_panel_5, VERTICAL_BAR_GRAPH_PT_panel_6, COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_1, COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_2, COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_3, COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_4, COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_5, COMPARISON_VERTICAL_BAR_GRAPH_PT_panel_6, MULTIPLE_VERTICAL_BAR_GRAPH_PT_panel_1, MULTIPLE_VERTICAL_BAR_GRAPH_PT_panel_2, MULTIPLE_VERTICAL_BAR_GRAPH_PT_panel_3, MULTIPLE_VERTICAL_BAR_GRAPH_PT_panel_4, MULTIPLE_VERTICAL_BAR_GRAPH_PT_panel_5, ADDONNAME_OT_my_opLGAL, 
ADDONNAME_OT_my_opLGBL, ADDONNAME_OT_my_opLGCL, ADDONNAME_OT_my_opLGDL, ADDONNAME_OT_my_opLGEL, ADDONNAME_OT_my_opLGFL,ADDONNAME_OT_my_opLGGL, ADDONNAME_OT_my_opLGHL, ADDONNAME_OT_my_opMGAL, ADDONNAME_OT_my_opMGBL, ADDONNAME_OT_my_opMGCL, ADDONNAME_OT_my_opMGDL, ADDONNAME_OT_my_opMGEL, ADDONNAME_OT_my_opMGFL, ADDONNAME_OT_my_opMGGL, ADDONNAME_OT_my_opMGHL, ADDONNAME_OT_my_opMCGAL, ADDONNAME_OT_my_opMCGBL, ADDONNAME_OT_my_opMCGCL, ADDONNAME_OT_my_opMCGDL, ADDONNAME_OT_my_opMCGEL, ADDONNAME_OT_my_opMCGFL, ADDONNAME_OT_my_opMCGGL, ADDONNAME_OT_my_opMCGHL, ADDONNAME_OT_my_opMPGAL, ADDONNAME_OT_my_opMPGBL, ADDONNAME_OT_my_opMPGCL, ADDONNAME_OT_my_opMPGDL, ADDONNAME_OT_my_opMPGEL, ADDONNAME_OT_my_opMPGFL, ADDONNAME_OT_my_opMPGGL, ADDONNAME_OT_my_opMPGHL, 
ADDONNAME_OT_my_opCOMPARISONAHBARAL, ADDONNAME_OT_my_opCOMPARISONAHBARBL, ADDONNAME_OT_my_opCOMPARISONAHBARCL, ADDONNAME_OT_my_opCOMPARISONAHBARD, ADDONNAME_OT_my_opCOMPARISONAHBARE, ADDONNAME_OT_my_opCOMPARISONAHBARF, ADDONNAME_OT_my_opCOMPARISONAHBARG, ADDONNAME_OT_my_opCOMPARISONAHBARH, ADDONNAME_OT_my_opCOMPARISONAHBARI, ADDONNAME_OT_my_opCOMPARISONBHBARAL, ADDONNAME_OT_my_opCOMPARISONBHBARBL, ADDONNAME_OT_my_opCOMPARISONBHBARCL, ADDONNAME_OT_my_opCOMPARISONBHBARD, ADDONNAME_OT_my_opCOMPARISONBHBARE, ADDONNAME_OT_my_opCOMPARISONBHBARF, ADDONNAME_OT_my_opCOMPARISONBHBARG, ADDONNAME_OT_my_opCOMPARISONBHBARH, ADDONNAME_OT_my_opCOMPARISONBHBARI, ADDONNAME_OT_my_opCOMPARISONALINEAL, ADDONNAME_OT_my_opCOMPARISONALINEB, ADDONNAME_OT_my_opCOMPARISONALINEC, ADDONNAME_OT_my_opCOMPARISONALINED, ADDONNAME_OT_my_opCOMPARISONALINEE, ADDONNAME_OT_my_opCOMPARISONALINEF, ADDONNAME_OT_my_opCOMPARISONALINEH, ADDONNAME_OT_my_opCOMPARISONALINEG, ADDONNAME_OT_my_opCOMPARISONBLINEA, 
ADDONNAME_OT_my_opCOMPARISONBLINEB, ADDONNAME_OT_my_opCOMPARISONBLINEC, ADDONNAME_OT_my_opCOMPARISONBLINED, ADDONNAME_OT_my_opCOMPARISONBLINEE, ADDONNAME_OT_my_opCOMPARISONBLINEF, ADDONNAME_OT_my_opCOMPARISONBLINEG, ADDONNAME_OT_my_opCOMPARISONBLINEH, ADDONNAME_OT_my_opCOMPARISONAMOUNTA, ADDONNAME_OT_my_opSCATTERA, ADDONNAME_OT_my_opBUBBLEA,  ADDONNAME_OT_my_opCOMPARISONAMOUNTB, ADDONNAME_OT_my_opCOMPARISONAMOUNTC, ADDONNAME_OT_my_opCOMPARISONAMOUNTD, ADDONNAME_OT_my_opCOMPARISONAMOUNTE, ADDONNAME_OT_my_opCOMPARISONAMOUNTF, ADDONNAME_OT_my_opCOMPARISONAMOUNTG, ADDONNAME_OT_my_opCOMPARISONAMOUNTH, ADDONNAME_OT_my_opCOMPARISONBMOUNTA, ADDONNAME_OT_my_opCOMPARISONBMOUNTB, 
ADDONNAME_OT_my_opCOMPARISONBMOUNTC, ADDONNAME_OT_my_opCOMPARISONBMOUNTD, ADDONNAME_OT_my_opCOMPARISONBMOUNTE, ADDONNAME_OT_my_opCOMPARISONBMOUNTF, ADDONNAME_OT_my_opCOMPARISONBMOUNTG, ADDONNAME_OT_my_opCOMPARISONBMOUNTH, ADDONNAME_OT_my_opCOMPARISONABARVA, ADDONNAME_OT_my_opCOMPARISONABARVB, ADDONNAME_OT_my_opCOMPARISONABARVC, ADDONNAME_OT_my_opCOMPARISONABARVD, ADDONNAME_OT_my_opCOMPARISONABARVE, ADDONNAME_OT_my_opCOMPARISONABARVF, ADDONNAME_OT_my_opCOMPARISONABARVG, ADDONNAME_OT_my_opCOMPARISONABARVH, ADDONNAME_OT_my_opCOMPARISONBBARVA, ADDONNAME_OT_my_opCOMPARISONBBARVB, ADDONNAME_OT_my_opCOMPARISONBBARVC, 
ADDONNAME_OT_my_opCOMPARISONBBARVD, ADDONNAME_OT_my_opCOMPARISONBBARVE, ADDONNAME_OT_my_opCOMPARISONBBARVF, ADDONNAME_OT_my_opCOMPARISONBBARVG, ADDONNAME_OT_my_opCOMPARISONBBARVH, ADDONNAME_OT_my_opMULTIPLEABARVA, ADDONNAME_OT_my_opMULTIPLEABARVB, ADDONNAME_OT_my_opMULTIPLEABARVC, ADDONNAME_OT_my_opMULTIPLEABARVD, ADDONNAME_OT_my_opMULTIPLEABARVE, ADDONNAME_OT_my_opMULTIPLEABARVF, ADDONNAME_OT_my_opMULTIPLEABARVG, ADDONNAME_OT_my_opMULTIPLEABARVH, ADDONNAME_OT_my_opMULTIPLEBBARVA, ADDONNAME_OT_my_opMULTIPLEBBARVB, ADDONNAME_OT_my_opMULTIPLEBBARVC, ADDONNAME_OT_my_opMULTIPLEBBARVD, ADDONNAME_OT_my_opMULTIPLEBBARVE, ADDONNAME_OT_my_opMULTIPLEBBARVF, ADDONNAME_OT_my_opMULTIPLEBBARVG, ADDONNAME_OT_my_opMULTIPLEBBARVH, ADDONNAME_OT_my_opMULTIPLECBARVA, ADDONNAME_OT_my_opMULTIPLECBARVB, ADDONNAME_OT_my_opMULTIPLECBARVC, ADDONNAME_OT_my_opMULTIPLECBARVD, ADDONNAME_OT_my_opMULTIPLECBARVE, ADDONNAME_OT_my_opMULTIPLECBARVF, ADDONNAME_OT_my_opMULTIPLECBARVG, ADDONNAME_OT_my_opMULTIPLECBARVH,ADDONNAME_OT_my_opMULTIPLEDBARVA, ADDONNAME_OT_my_opMULTIPLEDBARVB, ADDONNAME_OT_my_opMULTIPLEDBARVC, ADDONNAME_OT_my_opMULTIPLEDBARVD, ADDONNAME_OT_my_opMULTIPLEDBARVE, ADDONNAME_OT_my_opMULTIPLEDBARVF, ADDONNAME_OT_my_opMULTIPLEDBARVG, ADDONNAME_OT_my_opMULTIPLEDBARVH]
 
 
def register():
    for cls in classes:
        bpy.utils.register_class(cls)
        
        bpy.types.Scene.my_tool = bpy.props.PointerProperty(type= MyProperties)
        
 
def unregister():
    for cls in classes:
        bpy.utils.unregister_class(cls)

    
if __name__ == "__main__":
    register()


